!function(e,t){"function"==typeof define&&define.amd?define([],function(){return t()}):"object"==typeof exports?module.exports=t():t()}(this,function(){return angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),r=e.storage(),n=function(){var n=e.preferredLanguage();angular.isString(n)?e.use(n):r.put(t,e.use())};r?r.get(t)?e.use(r.get(t))["catch"](n):n():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY","$windowProvider",function(e,t){var r,n,a,o,i,l,s,u,c,f,g,h,d,p,v,m={},$=[],y=e,b=[],S=!1,w="translate-cloak",T=!1,k=".",L=0,P=!0,C="2.7.0",E=function(){var e,r,n=t.$get().navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(r=n.languages[e],r&&r.length)return r;for(e=0;e<a.length;e++)if(r=n[a[e]],r&&r.length)return r;return null};E.displayName="angular-translate/service: getFirstBrowserLanguage";var A=function(){return(E()||"").split("-").join("_")};A.displayName="angular-translate/service: getLocale";var j=function(e,t){for(var r=0,n=e.length;n>r;r++)if(e[r]===t)return r;return-1},I=function(){return this.replace(/^\s+|\s+$/g,"")},O=function(e){for(var t=[],r=angular.lowercase(e),a=0,o=$.length;o>a;a++)t.push(angular.lowercase($[a]));if(j(t,r)>-1)return e;if(n){var i;for(var l in n){var s=!1,u=Object.prototype.hasOwnProperty.call(n,l)&&angular.lowercase(l)===angular.lowercase(e);if("*"===l.slice(-1)&&(s=l.slice(0,-1)===e.slice(0,l.length-1)),(u||s)&&(i=n[l],j(t,angular.lowercase(i))>-1))return i}}var c=e.split("_");return c.length>1&&j(t,angular.lowercase(c[0]))>-1?c[0]:e},x=function(e,t){if(!e&&!t)return m;if(e&&!t){if(angular.isString(e))return m[e]}else angular.isObject(m[e])||(m[e]={}),angular.extend(m[e],B(t));return this};this.translations=x,this.cloakClassName=function(e){return e?(w=e,this):w};var B=function(e,t,r,n){var a,o,i,l;t||(t=[]),r||(r={});for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&(l=e[a],angular.isObject(l)?B(l,t.concat(a),r,a):(o=t.length?""+t.join(k)+k+a:a,t.length&&a===n&&(i=""+t.join(k),r[i]="@:"+o),r[o]=l));return r};this.addInterpolation=function(e){return b.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return f=e,this},this.useSanitizeValueStrategy=function(e){return S=e,this},this.preferredLanguage=function(e){return F(e),this};var F=function(e){return e&&(r=e),r};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(d=e,this):d},this.translationNotFoundIndicatorRight=function(e){return e?(p=e,this):p},this.fallbackLanguage=function(e){return _(e),this};var _=function(e){return e?(angular.isString(e)?(o=!0,a=[e]):angular.isArray(e)&&(o=!1,a=e),angular.isString(r)&&j(a,r)<0&&a.push(r),this):o?a[0]:a};this.use=function(e){if(e){if(!m[e]&&!g)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return i=e,this}return i};var V=function(e){return e?void(y=e):u?u+y:y};this.storageKey=V,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return g=e,h=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(u=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return T=!!e,this},this.determinePreferredLanguage=function(e){var t=e&&angular.isFunction(e)?e():A();return r=$.length?O(t):t,this},this.registerAvailableLanguageKeys=function(e,t){return e?($=e,t&&(n=t),this):$},this.useLoaderCache=function(e){return e===!1?v=void 0:e===!0?v=!0:"undefined"==typeof e?v="$translationCache":e&&(v=e),this},this.directivePriority=function(e){return void 0===e?L:(L=e,this)},this.statefulFilter=function(e){return void 0===e?P:(P=e,this)},this.$get=["$log","$injector","$rootScope","$q",function(e,t,n,u){var $,k,E,A=t.get(f||"$translateDefaultInterpolation"),N=!1,U={},R={},K=function(e,t,n,o){if(angular.isArray(e)){var l=function(e){for(var r={},a=[],i=function(e){var a=u.defer(),i=function(t){r[e]=t,a.resolve([e,t])};return K(e,t,n,o).then(i,i),a.promise},l=0,s=e.length;s>l;l++)a.push(i(e[l]));return u.all(a).then(function(){return r})};return l(e)}var c=u.defer();e&&(e=I.apply(e));var f=function(){var e=r?R[r]:R[i];if(k=0,s&&!e){var t=$.get(y);if(e=R[t],a&&a.length){var n=j(a,t);k=0===n?1:0,j(a,r)<0&&a.push(r)}}return e}();return f?f["finally"](function(){Z(e,t,n,o).then(c.resolve,c.reject)}):Z(e,t,n,o).then(c.resolve,c.reject),c.promise},z=function(e){return d&&(e=[d,e].join(" ")),p&&(e=[e,p].join(" ")),e},q=function(e){i=e,n.$emit("$translateChangeSuccess",{language:e}),s&&$.put(K.storageKey(),i),A.setLocale(i),angular.forEach(U,function(e,t){U[t].setLocale(i)}),n.$emit("$translateChangeEnd",{language:e})},D=function(e){if(!e)throw"No language key specified for loading.";var r=u.defer();n.$emit("$translateLoadingStart",{language:e}),N=!0;var a=v;"string"==typeof a&&(a=t.get(a));var o=angular.extend({},h,{key:e,$http:angular.extend({},{cache:a},h.$http)});return t.get(g)(o).then(function(t){var a={};n.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(t)?angular.forEach(t,function(e){angular.extend(a,B(e))}):angular.extend(a,B(t)),N=!1,r.resolve({key:e,table:a}),n.$emit("$translateLoadingEnd",{language:e})},function(e){n.$emit("$translateLoadingError",{language:e}),r.reject(e),n.$emit("$translateLoadingEnd",{language:e})}),r.promise};if(s&&($=t.get(s),!$.get||!$.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(A.useSanitizeValueStrategy)&&A.useSanitizeValueStrategy(S),b.length&&angular.forEach(b,function(e){var n=t.get(e);n.setLocale(r||i),angular.isFunction(n.useSanitizeValueStrategy)&&n.useSanitizeValueStrategy(S),U[n.getInterpolationIdentifier()]=n});var M=function(e){var t=u.defer();return Object.prototype.hasOwnProperty.call(m,e)?t.resolve(m[e]):R[e]?R[e].then(function(e){x(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},H=function(e,t,r,n){var a=u.defer();return M(e).then(function(o){if(Object.prototype.hasOwnProperty.call(o,t)){n.setLocale(e);var l=o[t];"@:"===l.substr(0,2)?H(e,l.substr(2),r,n).then(a.resolve,a.reject):a.resolve(n.interpolate(o[t],r)),n.setLocale(i)}else a.reject()},a.reject),a.promise},G=function(e,t,r,n){var a,o=m[e];if(o&&Object.prototype.hasOwnProperty.call(o,t)){if(n.setLocale(e),a=n.interpolate(o[t],r),"@:"===a.substr(0,2))return G(e,a.substr(2),r,n);n.setLocale(i)}return a},J=function(e,r){if(c){var n=t.get(c)(e,i,r);return void 0!==n?n:e}return e},Y=function(e,t,r,n,o){var i=u.defer();if(e<a.length){var l=a[e];H(l,t,r,n).then(i.resolve,function(){Y(e+1,t,r,n,o).then(i.resolve)})}else i.resolve(o?o:J(t,r));return i.promise},W=function(e,t,r,n){var o;if(e<a.length){var i=a[e];o=G(i,t,r,n),o||(o=W(e+1,t,r,n))}return o},X=function(e,t,r,n){return Y(E>0?E:k,e,t,r,n)},Q=function(e,t,r){return W(E>0?E:k,e,t,r)},Z=function(e,t,r,n){var o=u.defer(),l=i?m[i]:m,s=r?U[r]:A;if(l&&Object.prototype.hasOwnProperty.call(l,e)){var f=l[e];"@:"===f.substr(0,2)?K(f.substr(2),t,r,n).then(o.resolve,o.reject):o.resolve(s.interpolate(f,t))}else{var g;c&&!N&&(g=J(e,t)),i&&a&&a.length?X(e,t,s,n).then(function(e){o.resolve(e)},function(e){o.reject(z(e))}):c&&!N&&g?o.resolve(n?n:g):n?o.resolve(n):o.reject(z(e))}return o.promise},ee=function(e,t,r){var n,o=i?m[i]:m,l=A;if(U&&Object.prototype.hasOwnProperty.call(U,r)&&(l=U[r]),o&&Object.prototype.hasOwnProperty.call(o,e)){var s=o[e];n="@:"===s.substr(0,2)?ee(s.substr(2),t,r):l.interpolate(s,t)}else{var u;c&&!N&&(u=J(e,t)),i&&a&&a.length?(k=0,n=Q(e,t,l)):n=c&&!N&&u?u:z(e)}return n},te=function(e){l===e&&(l=void 0),R[e]=void 0};if(K.preferredLanguage=function(e){return e&&F(e),r},K.cloakClassName=function(){return w},K.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(_(e),g&&a&&a.length)for(var t=0,r=a.length;r>t;t++)R[a[t]]||(R[a[t]]=D(a[t]));K.use(K.use())}return o?a[0]:a},K.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=j(a,e);t>-1&&(E=t)}else E=0},K.proposedLanguage=function(){return l},K.storage=function(){return $},K.use=function(e){if(!e)return i;var t=u.defer();n.$emit("$translateChangeStart",{language:e});var r=O(e);return r&&(e=r),m[e]||!g||R[e]?l===e&&R[e]?R[e].then(function(e){return t.resolve(e.key),e},function(e){return t.reject(e),u.reject(e)}):(t.resolve(e),q(e)):(l=e,R[e]=D(e).then(function(e){return x(e.key,e.table),t.resolve(e.key),q(e.key),e},function(e){return n.$emit("$translateChangeError",{language:e}),t.reject(e),n.$emit("$translateChangeEnd",{language:e}),u.reject(e)}),R[e]["finally"](function(){te(e)})),t.promise},K.storageKey=function(){return V()},K.isPostCompilingEnabled=function(){return T},K.refresh=function(e){function t(){o.resolve(),n.$emit("$translateRefreshEnd",{language:e})}function r(){o.reject(),n.$emit("$translateRefreshEnd",{language:e})}if(!g)throw new Error("Couldn't refresh translation table, no loader registered!");var o=u.defer();if(n.$emit("$translateRefreshStart",{language:e}),e)m[e]?D(e).then(function(r){x(r.key,r.table),e===i&&q(i),t()},r):r();else{var l=[],s={};if(a&&a.length)for(var c=0,f=a.length;f>c;c++)l.push(D(a[c])),s[a[c]]=!0;i&&!s[i]&&l.push(D(i)),u.all(l).then(function(e){angular.forEach(e,function(e){m[e.key]&&delete m[e.key],x(e.key,e.table)}),i&&q(i),t()})}return o.promise},K.instant=function(e,t,n){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var o={},l=0,s=e.length;s>l;l++)o[e[l]]=K.instant(e[l],t,n);return o}if(angular.isString(e)&&e.length<1)return e;e&&(e=I.apply(e));var u,f=[];r&&f.push(r),i&&f.push(i),a&&a.length&&(f=f.concat(a));for(var g=0,h=f.length;h>g;g++){var v=f[g];if(m[v]&&("undefined"!=typeof m[v][e]?u=ee(e,t,n):(d||p)&&(u=z(e))),"undefined"!=typeof u)break}return u||""===u||(u=A.interpolate(e,t),c&&!N&&(u=J(e,t))),u},K.versionInfo=function(){return C},K.loaderCache=function(){return v},K.directivePriority=function(){return L},K.statefulFilter=function(){return P},g&&(angular.equals(m,{})&&K.use(K.use()),a&&a.length))for(var re=function(e){return x(e.key,e.table),n.$emit("$translateChangeEnd",{language:e.key}),e},ne=0,ae=a.length;ae>ne;ne++){var oe=a[ne];m[oe]||(R[oe]=D(oe).then(re))}return K}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,r={},n="default",a=null,o={escaped:function(e){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=angular.isNumber(e[r])?e[r]:angular.element("<div></div>").text(e[r]).html());return t}},i=function(e){var t;return t=angular.isFunction(o[a])?o[a](e):e};return r.setLocale=function(e){t=e},r.getInterpolationIdentifier=function(){return n},r.useSanitizeValueStrategy=function(e){return a=e,this},r.interpolate=function(t,r){return a&&(r=i(r)),e(t)(r||{})},r}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,r,n,a,o){var i=function(){return this.replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:e.directivePriority(),compile:function(t,l){var s=l.translateValues?l.translateValues:void 0,u=l.translateInterpolation?l.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),f="^(.*)("+r.startSymbol()+".*"+r.endSymbol()+")(.*)",g="^(.*)"+r.startSymbol()+"(.*)"+r.endSymbol()+"(.*)";return function(t,h,d){t.interpolateParams={},t.preText="",t.postText="";var p={};d.translateValues&&angular.extend(t.interpolateParams,a(d.translateValues)(t.$parent));var v=function(e){if(angular.isFunction(v._unwatchOld)&&(v._unwatchOld(),v._unwatchOld=void 0),angular.equals(e,"")||!angular.isDefined(e)){if(c)for(var n in l)if(Object.prototype.hasOwnProperty.call(d,n)&&"translateValue"===n.substr(0,14)&&"translateValues"!==n){var a=angular.lowercase(n.substr(14,1))+n.substr(15);t.interpolateParams[a]=l[n]}var o=i.apply(h.text()).match(f);if(angular.isArray(o)){t.preText=o[1],t.postText=o[3],p.translate=r(o[2])(t.$parent);var s=h.text().match(g);angular.isArray(s)&&s[2]&&s[2].length&&(v._unwatchOld=t.$watch(s[2],function(e){p.translate=e,w()}))}else p.translate=h.text().replace(/^\s+|\s+$/g,"")}else p.translate=e;w()},m=function(e){d.$observe(e,function(t){p[e]=t,w()})},$=!0;d.$observe("translate",function(e){"undefined"==typeof e?v(""):""===e&&$||(p.translate=e,w()),$=!1});for(var y in d)d.hasOwnProperty(y)&&"translateAttr"===y.substr(0,13)&&m(y);if(d.$observe("translateDefault",function(e){t.defaultText=e}),s&&d.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,a(e)(t.$parent))})}),c){var b=function(e){d.$observe(e,function(r){var n=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[n]=r})};for(var S in d)Object.prototype.hasOwnProperty.call(d,S)&&"translateValue"===S.substr(0,14)&&"translateValues"!==S&&b(S)}var w=function(){for(var e in p)p.hasOwnProperty(e)&&void 0!==p[e]&&T(e,p[e],t,t.interpolateParams,t.defaultText)},T=function(t,r,n,a,o){r?e(r,a,u,o).then(function(e){k(e,n,!0,t)},function(e){k(e,n,!1,t)}):k(r,n,!1,t)},k=function(t,r,a,o){if("translate"===o){a||"undefined"==typeof r.defaultText||(t=r.defaultText),h.html(r.preText+t+r.postText);var i=e.isPostCompilingEnabled(),s="undefined"!=typeof l.translateCompile,u=s&&"false"!==l.translateCompile;(i&&!s||u)&&n(h.contents())(r)}else{a||"undefined"==typeof r.defaultText||(t=r.defaultText);var c=d.$attr[o];"data-"===c.substr(0,5)&&(c=c.substr(5)),c=c.substr(15),h.attr(c,t)}};t.$watch("interpolateParams",w,!0);var L=o.$on("$translateChangeSuccess",w);h.text().length&&v(d.translate?d.translate:""),w(),t.$on("$destroy",L)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(r){var n=function(){r.addClass(t.cloakClassName())},a=function(){r.removeClass(t.cloakClassName())},o=e.$on("$translateChangeEnd",function(){a(),o(),o=null});return n(),function(e,r,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(e){t(e).then(a,n)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var r=function(r,n,a){return angular.isObject(n)||(n=e(n)(this)),t.instant(r,n,a)};return t.statefulFilter()&&(r.$stateful=!0),r}]),"pascalprecht.translate"}),function(e,t){"function"==typeof define&&define.amd?define([],function(){return t()}):"object"==typeof exports?module.exports=t():t()}(this,function(){return angular.module("pascalprecht.translate").provider("$translatePartialLoader",function(){function e(e,t){this.name=e,this.isActive=!0,this.tables={},this.priority=t||0}function t(e){return Object.prototype.hasOwnProperty.call(i,e)}function r(e){return angular.isString(e)&&""!==e}function n(e){if(!r(e))throw new TypeError("Invalid type of a first argument, a non-empty string expected.");return t(e)&&i[e].isActive}function a(e,t){for(var r in t)t[r]&&t[r].constructor&&t[r].constructor===Object?(e[r]=e[r]||{},a(e[r],t[r])):e[r]=t[r];return e}function o(){var e=[];for(var t in i)i[t].isActive&&e.push(i[t]);return e.sort(function(e,t){return e.priority-t.priority}),e}e.prototype.parseUrl=function(e,t){return angular.isFunction(e)?e(this.name,t):e.replace(/\{part\}/g,this.name).replace(/\{lang\}/g,t)},e.prototype.getTable=function(e,t,r,n,a,o){var i=t.defer();if(this.tables[e])i.resolve(this.tables[e]);else{var l=this;r(angular.extend({method:"GET",url:this.parseUrl(a,e)},n)).success(function(t){l.tables[e]=t,i.resolve(t)}).error(function(){o?o(l.name,e).then(function(t){l.tables[e]=t,i.resolve(t)},function(){i.reject(l.name)}):i.reject(l.name)})}return i.promise};var i={};this.addPart=function(n,a){if(!r(n))throw new TypeError("Couldn't add part, part name has to be a string!");return t(n)||(i[n]=new e(n,a)),i[n].isActive=!0,this},this.setPart=function(n,a,o){if(!r(n))throw new TypeError("Couldn't set part.`lang` parameter has to be a string!");if(!r(a))throw new TypeError("Couldn't set part.`part` parameter has to be a string!");if("object"!=typeof o||null===o)throw new TypeError("Couldn't set part. `table` parameter has to be an object!");return t(a)||(i[a]=new e(a),i[a].isActive=!1),i[a].tables[n]=o,this},this.deletePart=function(e){if(!r(e))throw new TypeError("Couldn't delete part, first arg has to be string.");return t(e)&&(i[e].isActive=!1),this},this.isPartAvailable=n,this.$get=["$rootScope","$injector","$q","$http",function(l,s,u,c){var f=function(e){if(!r(e.key))throw new TypeError("Unable to load data, a key is not a non-empty string.");if(!r(e.urlTemplate)&&!angular.isFunction(e.urlTemplate))throw new TypeError("Unable to load data, a urlTemplate is not a non-empty string or not a function.");var t=e.loadFailureHandler;if(void 0!==t){if(!angular.isString(t))throw new Error("Unable to load data, a loadFailureHandler is not a string.");t=s.get(t)}var n=[],i=u.defer(),l=o();return angular.forEach(l,function(r,a){n.push(r.getTable(e.key,u,c,e.$http,e.urlTemplate,t)),r.urlTemplate=e.urlTemplate}),u.all(n).then(function(){var t={};angular.forEach(l,function(r){a(t,r.tables[e.key])}),i.resolve(t)},function(){i.reject(e.key)}),i.promise};return f.addPart=function(n,a){if(!r(n))throw new TypeError("Couldn't add part, first arg has to be a string");return t(n)?i[n].isActive||(i[n].isActive=!0,l.$emit("$translatePartialLoaderStructureChanged",n)):(i[n]=new e(n,a),l.$emit("$translatePartialLoaderStructureChanged",n)),f},f.deletePart=function(e,n){if(!r(e))throw new TypeError("Couldn't delete part, first arg has to be string");if(void 0===n)n=!1;else if("boolean"!=typeof n)throw new TypeError("Invalid type of a second argument, a boolean expected.");if(t(e)){var a=i[e].isActive;if(n){var o=s.get("$translate"),u=o.loaderCache();"string"==typeof u&&(u=s.get(u)),"object"==typeof u&&angular.forEach(i[e].tables,function(t,r){u.remove(i[e].parseUrl(i[e].urlTemplate,r))}),delete i[e]}else i[e].isActive=!1;a&&l.$emit("$translatePartialLoaderStructureChanged",e)}return f},f.isPartLoaded=function(e,t){return angular.isDefined(i[e])&&angular.isDefined(i[e].tables[t])},f.getRegisteredParts=function(){var e=[];return angular.forEach(i,function(t){t.isActive&&e.push(t.name)}),e},f.isPartAvailable=n,f}]}),"pascalprecht.translate"}),function(){"use strict";angular.module("angular-loading-bar",["cfp.loadingBarInterceptor"]),angular.module("chieffancypants.loadingBar",["cfp.loadingBarInterceptor"]),angular.module("cfp.loadingBarInterceptor",["cfp.loadingBar"]).config(["$httpProvider",function(e){var t=["$q","$cacheFactory","$timeout","$rootScope","$log","cfpLoadingBar",function(t,r,n,a,o,i){function l(){n.cancel(u),i.complete(),f=0,c=0}function s(t){var n,a=r.get("$http"),o=e.defaults;!t.cache&&!o.cache||t.cache===!1||"GET"!==t.method&&"JSONP"!==t.method||(n=angular.isObject(t.cache)?t.cache:angular.isObject(o.cache)?o.cache:a);var i=void 0!==n?void 0!==n.get(t.url):!1;return void 0!==t.cached&&i!==t.cached?t.cached:(t.cached=i,i)}var u,c=0,f=0,g=i.latencyThreshold;return{request:function(e){return e.ignoreLoadingBar||s(e)||(a.$broadcast("cfpLoadingBar:loading",{url:e.url}),0===c&&(u=n(function(){i.start()},g)),c++,i.set(f/c)),e},response:function(e){return e&&e.config?(e.config.ignoreLoadingBar||s(e.config)||(f++,a.$broadcast("cfpLoadingBar:loaded",{url:e.config.url,result:e}),f>=c?l():i.set(f/c)),e):(o.error("Broken interceptor detected: Config object not supplied in response:\n https://github.com/chieffancypants/angular-loading-bar/pull/50"),e)},responseError:function(e){return e&&e.config?(e.config.ignoreLoadingBar||s(e.config)||(f++,a.$broadcast("cfpLoadingBar:loaded",{url:e.config.url,result:e}),f>=c?l():i.set(f/c)),t.reject(e)):(o.error("Broken interceptor detected: Config object not supplied in rejection:\n https://github.com/chieffancypants/angular-loading-bar/pull/50"),t.reject(e))}}}];e.interceptors.push(t)}]),angular.module("cfp.loadingBar",[]).provider("cfpLoadingBar",function(){this.includeSpinner=!0,this.includeBar=!0,this.latencyThreshold=100,this.startSize=.02,this.parentSelector="body",this.spinnerTemplate='<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>',this.loadingBarTemplate='<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>',this.$get=["$injector","$document","$timeout","$rootScope",function(e,t,r,n){function a(){c||(c=e.get("$animate"));var a=t.find(h).eq(0);r.cancel(g),m||(n.$broadcast("cfpLoadingBar:started"),m=!0,b&&c.enter(d,a,angular.element(a[0].lastChild)),y&&c.enter(v,a,angular.element(a[0].lastChild)),o(S))}function o(e){if(m){var t=100*e+"%";p.css("width",t),$=e,r.cancel(f),f=r(function(){i()},250)}}function i(){if(!(l()>=1)){var e=0,t=l();e=t>=0&&.25>t?(3*Math.random()+3)/100:t>=.25&&.65>t?3*Math.random()/100:t>=.65&&.9>t?2*Math.random()/100:t>=.9&&.99>t?.005:0;var r=l()+e;o(r)}}function l(){return $}function s(){$=0,m=!1}function u(){c||(c=e.get("$animate")),n.$broadcast("cfpLoadingBar:completed"),o(1),r.cancel(g),g=r(function(){var e=c.leave(d,s);e&&e.then&&e.then(s),c.leave(v)},500)}var c,f,g,h=this.parentSelector,d=angular.element(this.loadingBarTemplate),p=d.find("div").eq(0),v=angular.element(this.spinnerTemplate),m=!1,$=0,y=this.includeSpinner,b=this.includeBar,S=this.startSize;return{start:a,set:o,status:l,inc:i,complete:u,includeSpinner:this.includeSpinner,latencyThreshold:this.latencyThreshold,parentSelector:this.parentSelector,startSize:this.startSize}}]})}(),function(){"use strict";angular.module("auth",[]).service("TokenService",["$rootScope",function(e){function t(e){var t=e.replace("-","+").replace("_","/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}return window.atob(t)}function r(e){var r={};if(null!=e)try{var n=e.split(".")[1];r=JSON.parse(t(n))}catch(a){}return r}function n(){return null!=localStorage.token&&null!=e.tokenClaims&&(new Date).getTime()<=1e3*e.tokenClaims.exp?!0:!1}this.setToken=function(t){t&&(localStorage.token=t,e.tokenClaims=r(t),e.token=t,n())||(delete localStorage.token,delete e.tokenClaims,delete e.token)},this.getToken=function(){return n()?localStorage.token:(this.setToken(null),null)},this.hasPermission=function(e){return!1},this.needsRefresh=function(t){return null!=localStorage.token&&null!=e.tokenClaims&&(new Date).getTime()>=1e3*e.tokenClaims.iat+t?!0:!1}}]).service("AuthService",["$http","urls",function(e,t){this.signup=function(r,n,a){e.post(t.BASE_API+"/signup",r).success(n).error(a)},this.signin=function(r,n,a){e.post(t.BASE_API+"/signin",r).success(n).error(a)},this.refresh=function(r,n){e.get(t.BASE_API+"/token-refresh",{ignoreLoadingBar:!0}).success(r).error(n)},this.logout=function(e){e()}}])}(),function(){"use strict";angular.module("search",[]).service("SearchService",["$http","urls",function(e,t){this.search=function(r,n,a){e.post(t.BASE_API+"/search",r).success(n).error(a)},this.advancedSearch=function(r,n,a){e.post(t.BASE_API+"/search/advanced",r).success(n).error(a)}}])}(),function(){"use strict";angular.module("vehicles",[]).factory("Vehicle",["$resource","urls",function(e,t){return e(t.BASE_API+"/vehicle/:vehicleId/:action",{vehicleId:"@vehicleId",action:"@action"},{preview:{method:"GET",params:{action:"preview"}}})}]).service("VehiclesService",["$http","Vehicle",function(e,t){this.get=function(e,r,n){var a=t.get({vehicleId:e},function(){r(a)},n)},this.preview=function(e,r,n){var a=t.preview({vehicleId:e},function(){r(a)},n)}}])}(),function(){"use strict";angular.module("auth").controller("AuthController",["$rootScope","$scope","$location","$translatePartialLoader","$interval","TokenService","AuthService",function(e,t,r,n,a,o,i){function l(t){r.path(e.returnTo?e.returnTo:"/")}function s(){o.setToken(null),r.path("/")}function u(){if(o.needsRefresh(6e4)){var e=o.getToken();e&&i.refresh(function(e){},function(){o.setToken(null)})}}e.tokenRefreshPromise||(e.tokenRefreshPromise=a(u,3e4)),n.addPart("auth"),t.signin=function(r){if(r){delete t.signinFormInvalid;var n={email:t.email,password:t.password};i.signin(n,l,function(){e.error="Invalid credentials."})}else t.signinFormInvalid=!0},t.signup=function(r){if(r){delete t.signupFormInvalid;var n={name:t.name,email:t.email,password:t.password,password_confirmation:t.password_confirmation};i.signup(n,l,function(t){e.error=t.error||"Failed to sign up."})}else t.signupFormInvalid=!0},t.logout=function(){i.logout(s)}}])}(),function(){"use strict";var e=[];angular.module("search").controller("SearchController",["$rootScope","$scope","$location","$translatePartialLoader","SearchService","TokenService",function(t,r,n,a,o,i){function l(e){s(e&&e.vehicles?e.vehicles:[])}function s(t){e=t,r.vehicles=t,r.isPanelExpanded=e.length>0?!1:!0}function u(){t.error="Search failed",s([])}a.addPart("search"),r.search=function(){r.isAdvancedSearch=!1;var e={type:r.type,feature1:r.feature1};o.search(e,l,u)},r.advancedSearch=function(){if(null==i.getToken())return t.error="Access denied",void(r.isAdvancedSearch=!1);r.isAdvancedSearch=!0;var e={type:r.type,feature1:r.feature1,feature2:r.feature2,feature3:r.feature3};o.advancedSearch(e,l,u)},r.viewDetails=function(e){n.path("/vehicle/"+e)},r.select=function(e){r.isAdvancedSearch="advanced"===e&&null!=i.getToken()?!0:!1,r.isPanelExpanded=!0},s(e),r.isAdvancedSearch=!1}])}(),function(){"use strict";angular.module("vehicles").controller("VehiclesController",["$rootScope","$scope","TokenService","VehiclesService","$routeParams",function(e,t,r,n,a){function o(e){t.vehicle=e.vehicle}function i(t){e.error=t.data.error}a&&a.id&&(null==r.getToken()?n.preview(a.id,o,i):n.get(a.id,o,i))}])}(),function(){"use strict";angular.module("truxApp",["ngRoute","ngResource","angular-loading-bar","pascalprecht.translate","auth","search","vehicles"]).constant("urls",{BASE:"",BASE_API:"/api/v1"}).config(["$routeProvider","$httpProvider","$locationProvider","$translateProvider","$translatePartialLoaderProvider",function(e,t,r,n,a){e.when("/",{templateUrl:"modules/search/search.html",controller:"SearchController"}).when("/signin",{templateUrl:"modules/auth/signin.html",controller:"AuthController"}).when("/signup",{templateUrl:"modules/auth/signup.html",controller:"AuthController"}).when("/vehicle/:id",{templateUrl:"modules/vehicles/details.html",controller:"VehiclesController"}).when("/account",{restricted:!0,templateUrl:"modules/account/account.html",controller:"AuthController"}).otherwise({redirectTo:"/"}),t.interceptors.push(["$q","$location","$rootScope","TokenService",function(e,t,r,n){function a(e){var t=e.headers("X-JWT-Token");t&&n.setToken(t)}return{request:function(e){e.headers=e.headers||{};var t=n.getToken();return null!=t&&(e.headers.Authorization="Bearer "+t),e},response:function(e){return 200===e.status&&a(e),e},responseError:function(o){return 401===o.status||403===o.status?(n.setToken(null),r.returnTo=t.path(),t.path("/signin")):a(o),e.reject(o)}}}]),r.html5Mode(!0),n.useLoader("$translatePartialLoader",{urlTemplate:"/modules/{part}/locale/{lang}.json"}).registerAvailableLanguageKeys(["en","de","ru","lt"],{en_US:"en",en_UK:"en",de_DE:"de",de_CH:"de",ru_RU:"ru",lt_LT:"lt"}).fallbackLanguage("en").determinePreferredLanguage().useSanitizeValueStrategy("escaped"),a.addPart("auth"),a.addPart("search")}]).controller("TranslateController",["$translate","$scope",function(e,t){localStorage.langKey?(e.use(localStorage.langKey),t.currentLanguage=localStorage.langKey):t.currentLanguage=e.use(),t.languages=[{id:"de",label:"Deutsch"},{id:"ru",label:"Русский"},{id:"lt",label:"Lietuvių"},{id:"en",label:"English"}],t.changeLanguage=function(){e.use(t.currentLanguage),localStorage.langKey=t.currentLanguage}}]).run(["$rootScope","$location","$translate","TokenService",function(e,t,r,n){e.$on("$routeChangeStart",function(r,a){delete e.error,null==n.getToken()&&(a&&a.restricted===!0?(e.returnTo=t.path(),t.path("/signin")):e.returnTo&&delete e.returnTo)}),e.$on("$translatePartialLoaderStructureChanged",function(){r.refresh()}),n.setToken(localStorage.token)}])}();
//# sourceMappingURL=data:application/json;base64,