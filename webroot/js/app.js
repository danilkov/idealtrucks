!function(e,t){"function"==typeof define&&define.amd?define([],function(){return t()}):"object"==typeof exports?module.exports=t():t()}(this,function(){return angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),r=function(){var r=e.preferredLanguage();angular.isString(r)?e.use(r):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](r):r():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY","$windowProvider",function(e,t){var n,r,a,o,i,l,s,u,c,d,g,f,h,p,v,m={},$=[],y=e,S=[],b=!1,w="translate-cloak",L=!1,T=".",k=0,P=!0,C="2.7.0",E=function(){var e,n,r=t.$get().navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(r.languages))for(e=0;e<r.languages.length;e++)if(n=r.languages[e],n&&n.length)return n;for(e=0;e<a.length;e++)if(n=r[a[e]],n&&n.length)return n;return null};E.displayName="angular-translate/service: getFirstBrowserLanguage";var A=function(){return(E()||"").split("-").join("_")};A.displayName="angular-translate/service: getLocale";var j=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},O=function(){return this.replace(/^\s+|\s+$/g,"")},I=function(e){for(var t=[],n=angular.lowercase(e),a=0,o=$.length;o>a;a++)t.push(angular.lowercase($[a]));if(j(t,n)>-1)return e;if(r){var i;for(var l in r){var s=!1,u=Object.prototype.hasOwnProperty.call(r,l)&&angular.lowercase(l)===angular.lowercase(e);if("*"===l.slice(-1)&&(s=l.slice(0,-1)===e.slice(0,l.length-1)),(u||s)&&(i=r[l],j(t,angular.lowercase(i))>-1))return i}}var c=e.split("_");return c.length>1&&j(t,angular.lowercase(c[0]))>-1?c[0]:e},x=function(e,t){if(!e&&!t)return m;if(e&&!t){if(angular.isString(e))return m[e]}else angular.isObject(m[e])||(m[e]={}),angular.extend(m[e],F(t));return this};this.translations=x,this.cloakClassName=function(e){return e?(w=e,this):w};var F=function(e,t,n,r){var a,o,i,l;t||(t=[]),n||(n={});for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&(l=e[a],angular.isObject(l)?F(l,t.concat(a),n,a):(o=t.length?""+t.join(T)+T+a:a,t.length&&a===r&&(i=""+t.join(T),n[i]="@:"+o),n[o]=l));return n};this.addInterpolation=function(e){return S.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return d=e,this},this.useSanitizeValueStrategy=function(e){return b=e,this},this.preferredLanguage=function(e){return B(e),this};var B=function(e){return e&&(n=e),n};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(h=e,this):h},this.translationNotFoundIndicatorRight=function(e){return e?(p=e,this):p},this.fallbackLanguage=function(e){return _(e),this};var _=function(e){return e?(angular.isString(e)?(o=!0,a=[e]):angular.isArray(e)&&(o=!1,a=e),angular.isString(n)&&j(a,n)<0&&a.push(n),this):o?a[0]:a};this.use=function(e){if(e){if(!m[e]&&!g)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return i=e,this}return i};var M=function(e){return e?void(y=e):u?u+y:y};this.storageKey=M,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return g=e,f=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(u=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return L=!!e,this},this.determinePreferredLanguage=function(e){var t=e&&angular.isFunction(e)?e():A();return n=$.length?I(t):t,this},this.registerAvailableLanguageKeys=function(e,t){return e?($=e,t&&(r=t),this):$},this.useLoaderCache=function(e){return e===!1?v=void 0:e===!0?v=!0:"undefined"==typeof e?v="$translationCache":e&&(v=e),this},this.directivePriority=function(e){return void 0===e?k:(k=e,this)},this.statefulFilter=function(e){return void 0===e?P:(P=e,this)},this.$get=["$log","$injector","$rootScope","$q",function(e,t,r,u){var $,T,E,A=t.get(d||"$translateDefaultInterpolation"),V=!1,N={},R={},U=function(e,t,r,o){if(angular.isArray(e)){var l=function(e){for(var n={},a=[],i=function(e){var a=u.defer(),i=function(t){n[e]=t,a.resolve([e,t])};return U(e,t,r,o).then(i,i),a.promise},l=0,s=e.length;s>l;l++)a.push(i(e[l]));return u.all(a).then(function(){return n})};return l(e)}var c=u.defer();e&&(e=O.apply(e));var d=function(){var e=n?R[n]:R[i];if(T=0,s&&!e){var t=$.get(y);if(e=R[t],a&&a.length){var r=j(a,t);T=0===r?1:0,j(a,n)<0&&a.push(n)}}return e}();return d?d["finally"](function(){Q(e,t,r,o).then(c.resolve,c.reject)}):Q(e,t,r,o).then(c.resolve,c.reject),c.promise},K=function(e){return h&&(e=[h,e].join(" ")),p&&(e=[e,p].join(" ")),e},z=function(e){i=e,r.$emit("$translateChangeSuccess",{language:e}),s&&$.put(U.storageKey(),i),A.setLocale(i),angular.forEach(N,function(e,t){N[t].setLocale(i)}),r.$emit("$translateChangeEnd",{language:e})},q=function(e){if(!e)throw"No language key specified for loading.";var n=u.defer();r.$emit("$translateLoadingStart",{language:e}),V=!0;var a=v;"string"==typeof a&&(a=t.get(a));var o=angular.extend({},f,{key:e,$http:angular.extend({},{cache:a},f.$http)});return t.get(g)(o).then(function(t){var a={};r.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(t)?angular.forEach(t,function(e){angular.extend(a,F(e))}):angular.extend(a,F(t)),V=!1,n.resolve({key:e,table:a}),r.$emit("$translateLoadingEnd",{language:e})},function(e){r.$emit("$translateLoadingError",{language:e}),n.reject(e),r.$emit("$translateLoadingEnd",{language:e})}),n.promise};if(s&&($=t.get(s),!$.get||!$.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(A.useSanitizeValueStrategy)&&A.useSanitizeValueStrategy(b),S.length&&angular.forEach(S,function(e){var r=t.get(e);r.setLocale(n||i),angular.isFunction(r.useSanitizeValueStrategy)&&r.useSanitizeValueStrategy(b),N[r.getInterpolationIdentifier()]=r});var D=function(e){var t=u.defer();return Object.prototype.hasOwnProperty.call(m,e)?t.resolve(m[e]):R[e]?R[e].then(function(e){x(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},H=function(e,t,n,r){var a=u.defer();return D(e).then(function(o){if(Object.prototype.hasOwnProperty.call(o,t)){r.setLocale(e);var l=o[t];"@:"===l.substr(0,2)?H(e,l.substr(2),n,r).then(a.resolve,a.reject):a.resolve(r.interpolate(o[t],n)),r.setLocale(i)}else a.reject()},a.reject),a.promise},G=function(e,t,n,r){var a,o=m[e];if(o&&Object.prototype.hasOwnProperty.call(o,t)){if(r.setLocale(e),a=r.interpolate(o[t],n),"@:"===a.substr(0,2))return G(e,a.substr(2),n,r);r.setLocale(i)}return a},J=function(e,n){if(c){var r=t.get(c)(e,i,n);return void 0!==r?r:e}return e},W=function(e,t,n,r,o){var i=u.defer();if(e<a.length){var l=a[e];H(l,t,n,r).then(i.resolve,function(){W(e+1,t,n,r,o).then(i.resolve)})}else i.resolve(o?o:J(t,n));return i.promise},Y=function(e,t,n,r){var o;if(e<a.length){var i=a[e];o=G(i,t,n,r),o||(o=Y(e+1,t,n,r))}return o},X=function(e,t,n,r){return W(E>0?E:T,e,t,n,r)},Z=function(e,t,n){return Y(E>0?E:T,e,t,n)},Q=function(e,t,n,r){var o=u.defer(),l=i?m[i]:m,s=n?N[n]:A;if(l&&Object.prototype.hasOwnProperty.call(l,e)){var d=l[e];"@:"===d.substr(0,2)?U(d.substr(2),t,n,r).then(o.resolve,o.reject):o.resolve(s.interpolate(d,t))}else{var g;c&&!V&&(g=J(e,t)),i&&a&&a.length?X(e,t,s,r).then(function(e){o.resolve(e)},function(e){o.reject(K(e))}):c&&!V&&g?o.resolve(r?r:g):r?o.resolve(r):o.reject(K(e))}return o.promise},ee=function(e,t,n){var r,o=i?m[i]:m,l=A;if(N&&Object.prototype.hasOwnProperty.call(N,n)&&(l=N[n]),o&&Object.prototype.hasOwnProperty.call(o,e)){var s=o[e];r="@:"===s.substr(0,2)?ee(s.substr(2),t,n):l.interpolate(s,t)}else{var u;c&&!V&&(u=J(e,t)),i&&a&&a.length?(T=0,r=Z(e,t,l)):r=c&&!V&&u?u:K(e)}return r},te=function(e){l===e&&(l=void 0),R[e]=void 0};if(U.preferredLanguage=function(e){return e&&B(e),n},U.cloakClassName=function(){return w},U.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(_(e),g&&a&&a.length)for(var t=0,n=a.length;n>t;t++)R[a[t]]||(R[a[t]]=q(a[t]));U.use(U.use())}return o?a[0]:a},U.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=j(a,e);t>-1&&(E=t)}else E=0},U.proposedLanguage=function(){return l},U.storage=function(){return $},U.use=function(e){if(!e)return i;var t=u.defer();r.$emit("$translateChangeStart",{language:e});var n=I(e);return n&&(e=n),m[e]||!g||R[e]?l===e&&R[e]?R[e].then(function(e){return t.resolve(e.key),e},function(e){return t.reject(e),u.reject(e)}):(t.resolve(e),z(e)):(l=e,R[e]=q(e).then(function(e){return x(e.key,e.table),t.resolve(e.key),z(e.key),e},function(e){return r.$emit("$translateChangeError",{language:e}),t.reject(e),r.$emit("$translateChangeEnd",{language:e}),u.reject(e)}),R[e]["finally"](function(){te(e)})),t.promise},U.storageKey=function(){return M()},U.isPostCompilingEnabled=function(){return L},U.refresh=function(e){function t(){o.resolve(),r.$emit("$translateRefreshEnd",{language:e})}function n(){o.reject(),r.$emit("$translateRefreshEnd",{language:e})}if(!g)throw new Error("Couldn't refresh translation table, no loader registered!");var o=u.defer();if(r.$emit("$translateRefreshStart",{language:e}),e)m[e]?q(e).then(function(n){x(n.key,n.table),e===i&&z(i),t()},n):n();else{var l=[],s={};if(a&&a.length)for(var c=0,d=a.length;d>c;c++)l.push(q(a[c])),s[a[c]]=!0;i&&!s[i]&&l.push(q(i)),u.all(l).then(function(e){angular.forEach(e,function(e){m[e.key]&&delete m[e.key],x(e.key,e.table)}),i&&z(i),t()})}return o.promise},U.instant=function(e,t,r){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var o={},l=0,s=e.length;s>l;l++)o[e[l]]=U.instant(e[l],t,r);return o}if(angular.isString(e)&&e.length<1)return e;e&&(e=O.apply(e));var u,d=[];n&&d.push(n),i&&d.push(i),a&&a.length&&(d=d.concat(a));for(var g=0,f=d.length;f>g;g++){var v=d[g];if(m[v]&&("undefined"!=typeof m[v][e]?u=ee(e,t,r):(h||p)&&(u=K(e))),"undefined"!=typeof u)break}return u||""===u||(u=A.interpolate(e,t),c&&!V&&(u=J(e,t))),u},U.versionInfo=function(){return C},U.loaderCache=function(){return v},U.directivePriority=function(){return k},U.statefulFilter=function(){return P},g&&(angular.equals(m,{})&&U.use(U.use()),a&&a.length))for(var ne=function(e){return x(e.key,e.table),r.$emit("$translateChangeEnd",{language:e.key}),e},re=0,ae=a.length;ae>re;re++){var oe=a[re];m[oe]||(R[oe]=q(oe).then(ne))}return U}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},r="default",a=null,o={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.isNumber(e[n])?e[n]:angular.element("<div></div>").text(e[n]).html());return t}},i=function(e){var t;return t=angular.isFunction(o[a])?o[a](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return r},n.useSanitizeValueStrategy=function(e){return a=e,this},n.interpolate=function(t,n){return a&&(n=i(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,r,a,o){var i=function(){return this.replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:e.directivePriority(),compile:function(t,l){var s=l.translateValues?l.translateValues:void 0,u=l.translateInterpolation?l.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),d="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",g="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,f,h){t.interpolateParams={},t.preText="",t.postText="";var p={};h.translateValues&&angular.extend(t.interpolateParams,a(h.translateValues)(t.$parent));var v=function(e){if(angular.isFunction(v._unwatchOld)&&(v._unwatchOld(),v._unwatchOld=void 0),angular.equals(e,"")||!angular.isDefined(e)){if(c)for(var r in l)if(Object.prototype.hasOwnProperty.call(h,r)&&"translateValue"===r.substr(0,14)&&"translateValues"!==r){var a=angular.lowercase(r.substr(14,1))+r.substr(15);t.interpolateParams[a]=l[r]}var o=i.apply(f.text()).match(d);if(angular.isArray(o)){t.preText=o[1],t.postText=o[3],p.translate=n(o[2])(t.$parent);var s=f.text().match(g);angular.isArray(s)&&s[2]&&s[2].length&&(v._unwatchOld=t.$watch(s[2],function(e){p.translate=e,w()}))}else p.translate=f.text().replace(/^\s+|\s+$/g,"")}else p.translate=e;w()},m=function(e){h.$observe(e,function(t){p[e]=t,w()})},$=!0;h.$observe("translate",function(e){"undefined"==typeof e?v(""):""===e&&$||(p.translate=e,w()),$=!1});for(var y in h)h.hasOwnProperty(y)&&"translateAttr"===y.substr(0,13)&&m(y);if(h.$observe("translateDefault",function(e){t.defaultText=e}),s&&h.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,a(e)(t.$parent))})}),c){var S=function(e){h.$observe(e,function(n){var r=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[r]=n})};for(var b in h)Object.prototype.hasOwnProperty.call(h,b)&&"translateValue"===b.substr(0,14)&&"translateValues"!==b&&S(b)}var w=function(){for(var e in p)p.hasOwnProperty(e)&&void 0!==p[e]&&L(e,p[e],t,t.interpolateParams,t.defaultText)},L=function(t,n,r,a,o){n?e(n,a,u,o).then(function(e){T(e,r,!0,t)},function(e){T(e,r,!1,t)}):T(n,r,!1,t)},T=function(t,n,a,o){if("translate"===o){a||"undefined"==typeof n.defaultText||(t=n.defaultText),f.html(n.preText+t+n.postText);var i=e.isPostCompilingEnabled(),s="undefined"!=typeof l.translateCompile,u=s&&"false"!==l.translateCompile;(i&&!s||u)&&r(f.contents())(n)}else{a||"undefined"==typeof n.defaultText||(t=n.defaultText);var c=h.$attr[o];"data-"===c.substr(0,5)&&(c=c.substr(5)),c=c.substr(15),f.attr(c,t)}};t.$watch("interpolateParams",w,!0);var k=o.$on("$translateChangeSuccess",w);f.text().length&&v(h.translate?h.translate:""),w(),t.$on("$destroy",k)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var r=function(){n.addClass(t.cloakClassName())},a=function(){n.removeClass(t.cloakClassName())},o=e.$on("$translateChangeEnd",function(){a(),o(),o=null});return r(),function(e,n,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(e){t(e).then(a,r)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,r,a){return angular.isObject(r)||(r=e(r)(this)),t.instant(n,r,a)};return t.statefulFilter()&&(n.$stateful=!0),n}]),"pascalprecht.translate"}),function(e,t){"function"==typeof define&&define.amd?define([],function(){return t()}):"object"==typeof exports?module.exports=t():t()}(this,function(){return angular.module("pascalprecht.translate").provider("$translatePartialLoader",function(){function e(e,t){this.name=e,this.isActive=!0,this.tables={},this.priority=t||0}function t(e){return Object.prototype.hasOwnProperty.call(i,e)}function n(e){return angular.isString(e)&&""!==e}function r(e){if(!n(e))throw new TypeError("Invalid type of a first argument, a non-empty string expected.");return t(e)&&i[e].isActive}function a(e,t){for(var n in t)t[n]&&t[n].constructor&&t[n].constructor===Object?(e[n]=e[n]||{},a(e[n],t[n])):e[n]=t[n];return e}function o(){var e=[];for(var t in i)i[t].isActive&&e.push(i[t]);return e.sort(function(e,t){return e.priority-t.priority}),e}e.prototype.parseUrl=function(e,t){return angular.isFunction(e)?e(this.name,t):e.replace(/\{part\}/g,this.name).replace(/\{lang\}/g,t)},e.prototype.getTable=function(e,t,n,r,a,o){var i=t.defer();if(this.tables[e])i.resolve(this.tables[e]);else{var l=this;n(angular.extend({method:"GET",url:this.parseUrl(a,e)},r)).success(function(t){l.tables[e]=t,i.resolve(t)}).error(function(){o?o(l.name,e).then(function(t){l.tables[e]=t,i.resolve(t)},function(){i.reject(l.name)}):i.reject(l.name)})}return i.promise};var i={};this.addPart=function(r,a){if(!n(r))throw new TypeError("Couldn't add part, part name has to be a string!");return t(r)||(i[r]=new e(r,a)),i[r].isActive=!0,this},this.setPart=function(r,a,o){if(!n(r))throw new TypeError("Couldn't set part.`lang` parameter has to be a string!");if(!n(a))throw new TypeError("Couldn't set part.`part` parameter has to be a string!");if("object"!=typeof o||null===o)throw new TypeError("Couldn't set part. `table` parameter has to be an object!");return t(a)||(i[a]=new e(a),i[a].isActive=!1),i[a].tables[r]=o,this},this.deletePart=function(e){if(!n(e))throw new TypeError("Couldn't delete part, first arg has to be string.");return t(e)&&(i[e].isActive=!1),this},this.isPartAvailable=r,this.$get=["$rootScope","$injector","$q","$http",function(l,s,u,c){var d=function(e){if(!n(e.key))throw new TypeError("Unable to load data, a key is not a non-empty string.");if(!n(e.urlTemplate)&&!angular.isFunction(e.urlTemplate))throw new TypeError("Unable to load data, a urlTemplate is not a non-empty string or not a function.");var t=e.loadFailureHandler;if(void 0!==t){if(!angular.isString(t))throw new Error("Unable to load data, a loadFailureHandler is not a string.");t=s.get(t)}var r=[],i=u.defer(),l=o();return angular.forEach(l,function(n,a){r.push(n.getTable(e.key,u,c,e.$http,e.urlTemplate,t)),n.urlTemplate=e.urlTemplate}),u.all(r).then(function(){var t={};angular.forEach(l,function(n){a(t,n.tables[e.key])}),i.resolve(t)},function(){i.reject(e.key)}),i.promise};return d.addPart=function(r,a){if(!n(r))throw new TypeError("Couldn't add part, first arg has to be a string");return t(r)?i[r].isActive||(i[r].isActive=!0,l.$emit("$translatePartialLoaderStructureChanged",r)):(i[r]=new e(r,a),l.$emit("$translatePartialLoaderStructureChanged",r)),d},d.deletePart=function(e,r){if(!n(e))throw new TypeError("Couldn't delete part, first arg has to be string");if(void 0===r)r=!1;else if("boolean"!=typeof r)throw new TypeError("Invalid type of a second argument, a boolean expected.");if(t(e)){var a=i[e].isActive;if(r){var o=s.get("$translate"),u=o.loaderCache();"string"==typeof u&&(u=s.get(u)),"object"==typeof u&&angular.forEach(i[e].tables,function(t,n){u.remove(i[e].parseUrl(i[e].urlTemplate,n))}),delete i[e]}else i[e].isActive=!1;a&&l.$emit("$translatePartialLoaderStructureChanged",e)}return d},d.isPartLoaded=function(e,t){return angular.isDefined(i[e])&&angular.isDefined(i[e].tables[t])},d.getRegisteredParts=function(){var e=[];return angular.forEach(i,function(t){t.isActive&&e.push(t.name)}),e},d.isPartAvailable=r,d}]}),"pascalprecht.translate"}),function(){"use strict";angular.module("angular-loading-bar",["cfp.loadingBarInterceptor"]),angular.module("chieffancypants.loadingBar",["cfp.loadingBarInterceptor"]),angular.module("cfp.loadingBarInterceptor",["cfp.loadingBar"]).config(["$httpProvider",function(e){var t=["$q","$cacheFactory","$timeout","$rootScope","$log","cfpLoadingBar",function(t,n,r,a,o,i){function l(){r.cancel(u),i.complete(),d=0,c=0}function s(t){var r,a=n.get("$http"),o=e.defaults;!t.cache&&!o.cache||t.cache===!1||"GET"!==t.method&&"JSONP"!==t.method||(r=angular.isObject(t.cache)?t.cache:angular.isObject(o.cache)?o.cache:a);var i=void 0!==r?void 0!==r.get(t.url):!1;return void 0!==t.cached&&i!==t.cached?t.cached:(t.cached=i,i)}var u,c=0,d=0,g=i.latencyThreshold;return{request:function(e){return e.ignoreLoadingBar||s(e)||(a.$broadcast("cfpLoadingBar:loading",{url:e.url}),0===c&&(u=r(function(){i.start()},g)),c++,i.set(d/c)),e},response:function(e){return e&&e.config?(e.config.ignoreLoadingBar||s(e.config)||(d++,a.$broadcast("cfpLoadingBar:loaded",{url:e.config.url,result:e}),d>=c?l():i.set(d/c)),e):(o.error("Broken interceptor detected: Config object not supplied in response:\n https://github.com/chieffancypants/angular-loading-bar/pull/50"),e)},responseError:function(e){return e&&e.config?(e.config.ignoreLoadingBar||s(e.config)||(d++,a.$broadcast("cfpLoadingBar:loaded",{url:e.config.url,result:e}),d>=c?l():i.set(d/c)),t.reject(e)):(o.error("Broken interceptor detected: Config object not supplied in rejection:\n https://github.com/chieffancypants/angular-loading-bar/pull/50"),t.reject(e))}}}];e.interceptors.push(t)}]),angular.module("cfp.loadingBar",[]).provider("cfpLoadingBar",function(){this.includeSpinner=!0,this.includeBar=!0,this.latencyThreshold=100,this.startSize=.02,this.parentSelector="body",this.spinnerTemplate='<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>',this.loadingBarTemplate='<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>',this.$get=["$injector","$document","$timeout","$rootScope",function(e,t,n,r){function a(){c||(c=e.get("$animate"));var a=t.find(f).eq(0);n.cancel(g),m||(r.$broadcast("cfpLoadingBar:started"),m=!0,S&&c.enter(h,a,angular.element(a[0].lastChild)),y&&c.enter(v,a,angular.element(a[0].lastChild)),o(b))}function o(e){if(m){var t=100*e+"%";p.css("width",t),$=e,n.cancel(d),d=n(function(){i()},250)}}function i(){if(!(l()>=1)){var e=0,t=l();e=t>=0&&.25>t?(3*Math.random()+3)/100:t>=.25&&.65>t?3*Math.random()/100:t>=.65&&.9>t?2*Math.random()/100:t>=.9&&.99>t?.005:0;var n=l()+e;o(n)}}function l(){return $}function s(){$=0,m=!1}function u(){c||(c=e.get("$animate")),r.$broadcast("cfpLoadingBar:completed"),o(1),n.cancel(g),g=n(function(){var e=c.leave(h,s);e&&e.then&&e.then(s),c.leave(v)},500)}var c,d,g,f=this.parentSelector,h=angular.element(this.loadingBarTemplate),p=h.find("div").eq(0),v=angular.element(this.spinnerTemplate),m=!1,$=0,y=this.includeSpinner,S=this.includeBar,b=this.startSize;return{start:a,set:o,status:l,inc:i,complete:u,includeSpinner:this.includeSpinner,latencyThreshold:this.latencyThreshold,parentSelector:this.parentSelector,startSize:this.startSize}}]})}(),angular.module("polyglotLanguageSwitcher",[]).directive("pls",["$document","$timeout",function(e,t){return{restrict:"E",replace:!0,scope:{items:"=",id:"@",hoverTimeout:"@",openMode:"@",gridColumns:"@",showFlag:"@",selectedLang:"@"},controller:["$scope",function(n){var r=n.selectedLang,a=Math.round(n.items.length/parseInt(n.gridColumns)),o=n.hoverTimeout;o||(o=200);var i=null,l=function(){d(),n.$apply()},s=function(e){27===e.keyCode&&(d(),n.$apply())},u=function(){n.model={opened:!1,selectedLang:null,showFlag:"true"===n.showFlag,columns:[]};var e=[],t=1;angular.forEach(n.items,function(o){o.selected=!1,n.model.selectedLang||o.id!==r||(o.selected=!0,n.model.selectedLang=o),e.push(o),t%a===0&&(n.model.columns.push(e),e=[]),t++}),e.length>0&&(n.model.columns.push(e),e=null),n.model.selectedLang||(n.model.selectedLang=n.items[0],n.items[0].selected=!0)},c=function(){return n.model.opened||(n.$emit("pls.popupOpening",{id:n.id}),n.model.opened=!0,e.on("click",l),e.on("keydown",s),n.$emit("pls.popupOpened",{id:n.id})),!1},d=function(){return n.model.opened&&(n.$emit("pls.popupClosing",{id:n.id}),e.off("click",l),e.off("keydown",s),n.model.opened=!1,n.$emit("pls.popupClosed",{id:n.id})),!1};n.onMouseEnterOrLeave=function(e){return e?(i&&(t.cancel(i),i=null),c()):i||(i=t(function(){d()},o)),!1},n.onClick=function(e){return e.stopPropagation(),n.model.opened?d():c(),!1},n.onLanguageChanged=function(e,t){return e.stopPropagation(),d(),angular.forEach(n.items,function(e){e.selected=!1}),t.selected=!0,n.model.selectedLang=t,n.$emit("pls.onLanguageChanged",{id:n.id,lang:angular.copy(t)}),!1},u()}],template:function(e,t){var n='<div class="polyglot-language-switcher ng-polyglot-language-switcher">';return"hover"===t.openMode?n+='<a class="pls-selected-locale" href="#" data-ng-mouseenter="onMouseEnterOrLeave(true)" data-ng-mouseleave="onMouseEnterOrLeave(false)"><img data-ng-if="model.showFlag" data-ng-src="{{model.selectedLang.flagImg}}" alt="{{model.selectedLang.flagTitle}}"> {{model.selectedLang.name}}</a><div class="pls-language-container-scrollable" data-ng-show="model.opened" data-ng-mouseenter="onMouseEnterOrLeave(true)" data-ng-mouseleave="onMouseEnterOrLeave(false)">':"click"===t.openMode&&(n+='<a class="pls-selected-locale" href="#" data-ng-click="onClick($event)"><img data-ng-if="model.showFlag" data-ng-src="{{model.selectedLang.flagImg}}" alt="{{model.selectedLang.flagTitle}}"> {{model.selectedLang.name}}</a><div class="pls-language-container-scrollable" data-ng-show="model.opened">'),n+='<table class="pls-language-container"><tbody><tr><td data-ng-repeat="column in model.columns"><ul><li data-ng-repeat="item in column"><a href="#" title="{{item.title}}" data-ng-click="onLanguageChanged($event, item)" data-ng-class="item.selected? \'pls-selected-locale\':\'\'"><img data-ng-if="model.showFlag" data-ng-src="{{item.flagImg}}" alt="{{item.flagTitle}}"> {{item.name}}</a></li></ul></td></tr></tbody></table></div></div>'}}}]),function(){"use strict";angular.module("directives.confirmPassword",[]).directive("confirmPassword",[function(){return{restrict:"A",scope:!0,require:"ngModel",link:function(e,t,n,r){var a=function(){var t=e.$eval(n.ngModel),r=e.$eval(n.confirmPassword);return""===t&&(t=null),""===r&&(r=null),t==r};e.$watch(a,function(e){r.$setValidity("passwordMismatch",e)})}}}])}(),function(){"use strict";angular.module("directives.passwordStrength",[]).directive("passwordStrength",[function(){return{restrict:"E",scope:!0,replace:!0,require:"ngModel",link:function(e,t,n,r){var a={measureStrength:function(e){var t=-1;return e&&(/[a-z]+/.test(e)&&t++,/[A-Z]+/.test(e)&&t++,/[0-9]+/.test(e)&&t++,/[^a-zA-Z\d]/.test(e)&&t++,e.length<7?t>0&&t--:e.length>9&&t++),t}};e.strengthStyle=function(t){return t<=e.passwordStrength?"strength_"+e.passwordStrength:null},e.$watch(n.ngModel,function(){var o=e.$eval(n.ngModel);o&&""!==o?(e.passwordStrength=a.measureStrength(o),t.css({display:"inline"}),r.$setValidity("passwordTooWeek",e.passwordStrength>=2)):(e.passwordStrength=-1,t.css({display:"none"}),r.$setValidity("passwordTooWeek",!0))})},template:'<ul id="strength"><li ng-class="strengthStyle(0)"></li><li ng-class="strengthStyle(1)"></li><li ng-class="strengthStyle(2)"></li><li ng-class="strengthStyle(3)"></li><li ng-class="strengthStyle(4)"></li></ul>'}}])}(),function(){"use strict";angular.module("auth",[]).service("TokenService",["$rootScope",function(e){function t(e){var t=e.replace("-","+").replace("_","/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}return window.atob(t)}function n(e){var n={};if(null!=e)try{var r=e.split(".")[1];n=JSON.parse(t(r))}catch(a){}return n}function r(){return null!=localStorage.token&&null!=e.tokenClaims&&(new Date).getTime()<=1e3*e.tokenClaims.exp?!0:!1}this.setToken=function(t){t&&(localStorage.token=t,e.tokenClaims=n(t),e.token=t,r())||(delete localStorage.token,delete e.tokenClaims,delete e.token)},this.getToken=function(){return r()?localStorage.token:(this.setToken(null),null)},this.hasPermission=function(e){return!1},this.needsRefresh=function(t){return null!=localStorage.token&&null!=e.tokenClaims&&(new Date).getTime()>=1e3*e.tokenClaims.iat+t?!0:!1}}]).service("AuthService",["$http","urls",function(e,t){this.signup=function(n,r,a){e.post(t.BASE_API+"/signup",n).success(r).error(a)},this.signin=function(n,r,a){e.post(t.BASE_API+"/signin",n).success(r).error(a)},this.refresh=function(n,r){e.get(t.BASE_API+"/token-refresh",{ignoreLoadingBar:!0}).success(n).error(r)},this.logout=function(e){e()}}])}(),function(){"use strict";angular.module("search",[]).service("SearchService",["$http","urls",function(e,t){this.search=function(n,r,a){e.post(t.BASE_API+"/search",n).success(r).error(a)},this.advancedSearch=function(n,r,a){e.post(t.BASE_API+"/search/advanced",n).success(r).error(a)}}])}(),function(){"use strict";angular.module("vehicles",[]).factory("Vehicle",["$resource","urls",function(e,t){return e(t.BASE_API+"/vehicle/:vehicleId/:action",{vehicleId:"@vehicleId",action:"@action"},{preview:{method:"GET",params:{action:"preview"}}})}]).service("VehiclesService",["$http","Vehicle",function(e,t){this.get=function(e,n,r){var a=t.get({vehicleId:e},function(){n(a)},r)},this.preview=function(e,n,r){var a=t.preview({vehicleId:e},function(){n(a)},r)}}])}(),function(){"use strict";angular.module("auth").controller("AuthController",["$rootScope","$scope","$location","$translatePartialLoader","$interval","TokenService","AuthService",function(e,t,n,r,a,o,i){function l(t){n.path(e.returnTo?e.returnTo:"/")}function s(){o.setToken(null),n.path("/")}function u(){if(o.needsRefresh(6e4)){var e=o.getToken();e&&i.refresh(function(e){},function(){o.setToken(null)})}}e.tokenRefreshPromise||(e.tokenRefreshPromise=a(u,3e4)),r.addPart("auth"),t.signin=function(n){if(n){delete t.signinFormInvalid;var r={email:t.email,password:t.password};i.signin(r,l,function(){e.error="Invalid credentials."})}else t.signinFormInvalid=!0},t.signup=function(n){if(n){delete t.signupFormInvalid;var r={name:t.name,email:t.email,password:t.password,password_confirmation:t.password_confirmation};i.signup(r,l,function(t){e.error=t.error||"Failed to sign up."})}else t.signupFormInvalid=!0},t.logout=function(){i.logout(s)}}])}(),function(){"use strict";var e=[];angular.module("search").controller("SearchController",["$rootScope","$scope","$location","$translatePartialLoader","SearchService","TokenService",function(t,n,r,a,o,i){function l(e){s(e&&e.vehicles?e.vehicles:[])}function s(t){e=t,n.vehicles=t,n.isPanelExpanded=e.length>0?!1:!0}function u(){t.error="Search failed",s([])}a.addPart("search"),n.search=function(){n.isAdvancedSearch=!1;var e={type:n.type,feature1:n.feature1};o.search(e,l,u)},n.advancedSearch=function(){if(null==i.getToken())return t.error="Access denied",void(n.isAdvancedSearch=!1);n.isAdvancedSearch=!0;var e={type:n.type,feature1:n.feature1,feature2:n.feature2,feature3:n.feature3};o.advancedSearch(e,l,u)},n.viewDetails=function(e){r.path("/vehicle/"+e)},n.select=function(e){n.isAdvancedSearch="advanced"===e&&null!=i.getToken()?!0:!1,n.isPanelExpanded=!0},s(e),n.isAdvancedSearch=!1}])}(),function(){"use strict";angular.module("vehicles").controller("VehiclesController",["$rootScope","$scope","TokenService","VehiclesService","$routeParams",function(e,t,n,r,a){function o(e){t.vehicle=e.vehicle}function i(t){e.error=t.data.error}a&&a.id&&(null==n.getToken()?r.preview(a.id,o,i):r.get(a.id,o,i))}])}(),function(){"use strict";angular.module("truxApp",["ngRoute","ngResource","angular-loading-bar","pascalprecht.translate","directives.passwordStrength","directives.confirmPassword","auth","search","vehicles"]).constant("urls",{BASE:"",BASE_API:"/api/v1"}).config(["$routeProvider","$httpProvider","$locationProvider","$translateProvider","$translatePartialLoaderProvider",function(e,t,n,r,a){e.when("/",{templateUrl:"modules/search/search.html",controller:"SearchController"}).when("/signin",{templateUrl:"modules/auth/signin.html",controller:"AuthController"}).when("/signup",{templateUrl:"modules/auth/signup.html",controller:"AuthController"}).when("/vehicle/:id",{templateUrl:"modules/vehicles/details.html",controller:"VehiclesController"}).when("/account",{restricted:!0,templateUrl:"modules/account/account.html",controller:"AuthController"}).otherwise({redirectTo:"/"}),t.interceptors.push(["$q","$location","$rootScope","TokenService",function(e,t,n,r){function a(e){var t=e.headers("X-JWT-Token");t&&r.setToken(t)}return{request:function(e){e.headers=e.headers||{};var t=r.getToken();return null!=t&&(e.headers.Authorization="Bearer "+t),e},response:function(e){return 200===e.status&&a(e),
e},responseError:function(o){return 401===o.status||403===o.status?(r.setToken(null),n.returnTo=t.path(),t.path("/signin")):a(o),e.reject(o)}}}]),t.defaults.xsrfHeaderName="X-CSRF-Token",t.defaults.xsrfCookieName="csrfToken",n.html5Mode(!0),r.useLoader("$translatePartialLoader",{urlTemplate:"/modules/{part}/locale/{lang}.json"}).registerAvailableLanguageKeys(["en","de","ru","lt"],{en_US:"en",en_UK:"en",de_DE:"de",de_CH:"de",ru_RU:"ru",lt_LT:"lt"}).fallbackLanguage("en").determinePreferredLanguage().useSanitizeValueStrategy("escaped"),a.addPart("auth"),a.addPart("search")}]).controller("TranslateController",["$translate","$scope",function(e,t){localStorage.langKey?(e.use(localStorage.langKey),t.currentLanguage=localStorage.langKey):t.currentLanguage=e.use(),t.languages=[{id:"de",label:"Deutsch"},{id:"ru",label:"Русский"},{id:"lt",label:"Lietuvių"},{id:"en",label:"English"}],t.changeLanguage=function(){e.use(t.currentLanguage),localStorage.langKey=t.currentLanguage}}]).run(["$rootScope","$location","$translate","TokenService",function(e,t,n,r){e.$on("$routeChangeStart",function(n,a){delete e.error,null==r.getToken()&&(a&&a.restricted===!0?(e.returnTo=t.path(),t.path("/signin")):e.returnTo&&delete e.returnTo)}),e.$on("$translatePartialLoaderStructureChanged",function(){n.refresh()}),r.setToken(localStorage.token)}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItdHJhbnNsYXRlLmpzIiwiYW5ndWxhci10cmFuc2xhdGUtbG9hZGVyLXBhcnRpYWwuanMiLCJsb2FkaW5nLWJhci5qcyIsImFuZ3VsYXItcG9seWdsb3QubGFuZ3VhZ2Uuc3dpdGNoZXIuanMiLCJjb25maXJtLXBhc3N3b3JkLmpzIiwicGFzc3dvcmQtc3RyZW5ndGguanMiLCJhdXRoL3NlcnZpY2VzLmpzIiwic2VhcmNoL3NlcnZpY2VzLmpzIiwidmVoaWNsZXMvc2VydmljZXMuanMiLCJhdXRoL2NvbnRyb2xsZXJzLmpzIiwic2VhcmNoL2NvbnRyb2xsZXJzLmpzIiwidmVoaWNsZXMvY29udHJvbGxlcnMuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInRoaXMiLCJhbmd1bGFyIiwicnVuIiwiJHRyYW5zbGF0ZSIsImtleSIsInN0b3JhZ2VLZXkiLCJzdG9yYWdlIiwiZmFsbGJhY2tGcm9tSW5jb3JyZWN0U3RvcmFnZVZhbHVlIiwicHJlZmVycmVkIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJpc1N0cmluZyIsInVzZSIsInB1dCIsImdldCIsInByb3ZpZGVyIiwiJFNUT1JBR0VfS0VZIiwiJHdpbmRvd1Byb3ZpZGVyIiwiJHByZWZlcnJlZExhbmd1YWdlIiwiJGxhbmd1YWdlS2V5QWxpYXNlcyIsIiRmYWxsYmFja0xhbmd1YWdlIiwiJGZhbGxiYWNrV2FzU3RyaW5nIiwiJHVzZXMiLCIkbmV4dExhbmciLCIkc3RvcmFnZUZhY3RvcnkiLCIkc3RvcmFnZVByZWZpeCIsIiRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSIsIiRpbnRlcnBvbGF0aW9uRmFjdG9yeSIsIiRsb2FkZXJGYWN0b3J5IiwiJGxvYWRlck9wdGlvbnMiLCIkbm90Rm91bmRJbmRpY2F0b3JMZWZ0IiwiJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQiLCJsb2FkZXJDYWNoZSIsIiR0cmFuc2xhdGlvblRhYmxlIiwiJGF2YWlsYWJsZUxhbmd1YWdlS2V5cyIsIiRzdG9yYWdlS2V5IiwiJGludGVycG9sYXRvckZhY3RvcmllcyIsIiRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kiLCIkY2xvYWtDbGFzc05hbWUiLCIkcG9zdENvbXBpbGluZ0VuYWJsZWQiLCJORVNURURfT0JKRUNUX0RFTElNSVRFUiIsImRpcmVjdGl2ZVByaW9yaXR5Iiwic3RhdGVmdWxGaWx0ZXIiLCJ2ZXJzaW9uIiwiZ2V0Rmlyc3RCcm93c2VyTGFuZ3VhZ2UiLCJpIiwibGFuZ3VhZ2UiLCJuYXYiLCIkZ2V0IiwibmF2aWdhdG9yIiwiYnJvd3Nlckxhbmd1YWdlUHJvcGVydHlLZXlzIiwiaXNBcnJheSIsImxhbmd1YWdlcyIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiZ2V0TG9jYWxlIiwic3BsaXQiLCJqb2luIiwiaW5kZXhPZiIsImFycmF5Iiwic2VhcmNoRWxlbWVudCIsImxlbiIsInRyaW0iLCJyZXBsYWNlIiwibmVnb3RpYXRlTG9jYWxlIiwiYXZhaWwiLCJsb2NhbGUiLCJsb3dlcmNhc2UiLCJuIiwicHVzaCIsImFsaWFzIiwibGFuZ0tleUFsaWFzIiwiaGFzV2lsZGNhcmRLZXkiLCJoYXNFeGFjdEtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNsaWNlIiwicGFydHMiLCJ0cmFuc2xhdGlvbnMiLCJsYW5nS2V5IiwidHJhbnNsYXRpb25UYWJsZSIsImlzT2JqZWN0IiwiZXh0ZW5kIiwiZmxhdE9iamVjdCIsImNsb2FrQ2xhc3NOYW1lIiwibmFtZSIsImRhdGEiLCJwYXRoIiwicmVzdWx0IiwicHJldktleSIsImtleVdpdGhQYXRoIiwia2V5V2l0aFNob3J0UGF0aCIsInZhbCIsImNvbmNhdCIsImFkZEludGVycG9sYXRpb24iLCJ1c2VNZXNzYWdlRm9ybWF0SW50ZXJwb2xhdGlvbiIsInVzZUludGVycG9sYXRpb24iLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJ2YWx1ZSIsInNldHVwUHJlZmVycmVkTGFuZ3VhZ2UiLCJ0cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yIiwiaW5kaWNhdG9yIiwidHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQiLCJ0cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQiLCJmYWxsYmFja0xhbmd1YWdlIiwiZmFsbGJhY2tTdGFjayIsIkVycm9yIiwidXNlVXJsTG9hZGVyIiwidXJsIiwib3B0aW9ucyIsInVzZUxvYWRlciIsInVzZVN0YXRpY0ZpbGVzTG9hZGVyIiwibG9hZGVyRmFjdG9yeSIsInVzZUxvY2FsU3RvcmFnZSIsInVzZVN0b3JhZ2UiLCJ1c2VDb29raWVTdG9yYWdlIiwic3RvcmFnZUZhY3RvcnkiLCJzdG9yYWdlUHJlZml4IiwicHJlZml4IiwidXNlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZyIsInVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIiLCJ1c2VQb3N0Q29tcGlsaW5nIiwiZGV0ZXJtaW5lUHJlZmVycmVkTGFuZ3VhZ2UiLCJmbiIsImlzRnVuY3Rpb24iLCJyZWdpc3RlckF2YWlsYWJsZUxhbmd1YWdlS2V5cyIsImxhbmd1YWdlS2V5cyIsImFsaWFzZXMiLCJ1c2VMb2FkZXJDYWNoZSIsImNhY2hlIiwidW5kZWZpbmVkIiwicHJpb3JpdHkiLCJzdGF0ZSIsIiRsb2ciLCIkaW5qZWN0b3IiLCIkcm9vdFNjb3BlIiwiJHEiLCJTdG9yYWdlIiwiZmFsbGJhY2tJbmRleCIsInN0YXJ0RmFsbGJhY2tJdGVyYXRpb24iLCJkZWZhdWx0SW50ZXJwb2xhdG9yIiwicGVuZGluZ0xvYWRlciIsImludGVycG9sYXRvckhhc2hNYXAiLCJsYW5nUHJvbWlzZXMiLCJ0cmFuc2xhdGlvbklkIiwiaW50ZXJwb2xhdGVQYXJhbXMiLCJpbnRlcnBvbGF0aW9uSWQiLCJkZWZhdWx0VHJhbnNsYXRpb25UZXh0IiwidHJhbnNsYXRlQWxsIiwidHJhbnNsYXRpb25JZHMiLCJyZXN1bHRzIiwicHJvbWlzZXMiLCJ0cmFuc2xhdGUiLCJkZWZlcnJlZCIsImRlZmVyIiwicmVnYXJkbGVzcyIsInJlc29sdmUiLCJ0aGVuIiwicHJvbWlzZSIsImMiLCJhbGwiLCJhcHBseSIsInByb21pc2VUb1dhaXRGb3IiLCJpbmRleCIsImRldGVybWluZVRyYW5zbGF0aW9uIiwicmVqZWN0IiwiYXBwbHlOb3RGb3VuZEluZGljYXRvcnMiLCJ1c2VMYW5ndWFnZSIsIiRlbWl0Iiwic2V0TG9jYWxlIiwiZm9yRWFjaCIsImludGVycG9sYXRvciIsImlkIiwibG9hZEFzeW5jIiwibG9hZGVyT3B0aW9ucyIsIiRodHRwIiwidGFibGUiLCJpbnRlcnBvbGF0b3JGYWN0b3J5IiwiZ2V0SW50ZXJwb2xhdGlvbklkZW50aWZpZXIiLCJnZXRUcmFuc2xhdGlvblRhYmxlIiwiZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbiIsIkludGVycG9sYXRvciIsInRyYW5zbGF0aW9uIiwic3Vic3RyIiwiaW50ZXJwb2xhdGUiLCJnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCIsInRyYW5zbGF0ZUJ5SGFuZGxlciIsInJlc3VsdFN0cmluZyIsInJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlIiwiZmFsbGJhY2tMYW5ndWFnZUluZGV4IiwicmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2VJbnN0YW50IiwiZmFsbGJhY2tUcmFuc2xhdGlvbiIsImZhbGxiYWNrVHJhbnNsYXRpb25JbnN0YW50IiwibWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uIiwiX3RyYW5zbGF0aW9uSWQiLCJkZXRlcm1pbmVUcmFuc2xhdGlvbkluc3RhbnQiLCJjbGVhck5leHRMYW5nQW5kUHJvbWlzZSIsInVzZUZhbGxiYWNrTGFuZ3VhZ2UiLCJsYW5nS2V5UG9zaXRpb24iLCJwcm9wb3NlZExhbmd1YWdlIiwiYWxpYXNlZEtleSIsImlzUG9zdENvbXBpbGluZ0VuYWJsZWQiLCJyZWZyZXNoIiwidGFibGVzIiwibG9hZGluZ0tleXMiLCJ0YWJsZURhdGEiLCJpbnN0YW50IiwiaXNVbmRlZmluZWQiLCJwb3NzaWJsZUxhbmdLZXlzIiwiaiIsImQiLCJwb3NzaWJsZUxhbmdLZXkiLCJ2ZXJzaW9uSW5mbyIsImVxdWFscyIsInByb2Nlc3NBc3luY1Jlc3VsdCIsImZhbGxiYWNrTGFuZ3VhZ2VJZCIsIiRpbnRlcnBvbGF0ZSIsIiRsb2NhbGUiLCIkdHJhbnNsYXRlSW50ZXJwb2xhdG9yIiwiJGlkZW50aWZpZXIiLCIkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5Iiwic2FuaXRpemVWYWx1ZVN0cmF0ZWdpZXMiLCJlc2NhcGVkIiwicGFyYW1zIiwiaXNOdW1iZXIiLCJlbGVtZW50IiwidGV4dCIsImh0bWwiLCJzYW5pdGl6ZVBhcmFtcyIsInN0cmluZyIsImNvbnN0YW50IiwiZGlyZWN0aXZlIiwiJGNvbXBpbGUiLCIkcGFyc2UiLCJyZXN0cmljdCIsInNjb3BlIiwiY29tcGlsZSIsInRFbGVtZW50IiwidEF0dHIiLCJ0cmFuc2xhdGVWYWx1ZXNFeGlzdCIsInRyYW5zbGF0ZVZhbHVlcyIsInRyYW5zbGF0ZUludGVycG9sYXRpb24iLCJ0cmFuc2xhdGVWYWx1ZUV4aXN0Iiwib3V0ZXJIVE1MIiwibWF0Y2giLCJpbnRlcnBvbGF0ZVJlZ0V4cCIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwid2F0Y2hlclJlZ0V4cCIsImlFbGVtZW50IiwiaUF0dHIiLCJwcmVUZXh0IiwicG9zdFRleHQiLCIkcGFyZW50Iiwib2JzZXJ2ZUVsZW1lbnRUcmFuc2xhdGlvbiIsIl91bndhdGNoT2xkIiwiaXNEZWZpbmVkIiwiYXR0ciIsImF0dHJpYnV0ZU5hbWUiLCJpbnRlcnBvbGF0ZU1hdGNoZXMiLCJ3YXRjaGVyTWF0Y2hlcyIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwidXBkYXRlVHJhbnNsYXRpb25zIiwib2JzZXJ2ZUF0dHJpYnV0ZVRyYW5zbGF0aW9uIiwidHJhbnNsYXRlQXR0ciIsIiRvYnNlcnZlIiwiZmlyc3RBdHRyaWJ1dGVDaGFuZ2VkRXZlbnQiLCJkZWZhdWx0VGV4dCIsIm9ic2VydmVWYWx1ZUF0dHJpYnV0ZSIsImF0dHJOYW1lIiwidXBkYXRlVHJhbnNsYXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwic3VjY2Vzc2Z1bCIsImdsb2JhbGx5RW5hYmxlZCIsImxvY2FsbHlEZWZpbmVkIiwidHJhbnNsYXRlQ29tcGlsZSIsImxvY2FsbHlFbmFibGVkIiwiY29udGVudHMiLCIkYXR0ciIsInVuYmluZCIsIiRvbiIsImFwcGx5Q2xvYWsiLCJhZGRDbGFzcyIsInJlbW92ZUNsb2FrIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVMaXN0ZW5lciIsInRyYW5zbGF0ZUNsb2FrIiwiZmlsdGVyIiwidHJhbnNsYXRlRmlsdGVyIiwiaW50ZXJwb2xhdGlvbiIsIiRzdGF0ZWZ1bCIsIlBhcnQiLCJpc0FjdGl2ZSIsImhhc1BhcnQiLCJpc1N0cmluZ1ZhbGlkIiwic3RyIiwiaXNQYXJ0QXZhaWxhYmxlIiwiVHlwZUVycm9yIiwiZGVlcEV4dGVuZCIsImRzdCIsInNyYyIsInByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJnZXRQcmlvcml0aXplZFBhcnRzIiwicHJpb3JpdGl6ZWRQYXJ0cyIsInBhcnQiLCJzb3J0IiwiYSIsImIiLCJwYXJzZVVybCIsInVybFRlbXBsYXRlIiwidGFyZ2V0TGFuZyIsImdldFRhYmxlIiwibGFuZyIsIiRodHRwT3B0aW9ucyIsImVycm9ySGFuZGxlciIsInNlbGYiLCJtZXRob2QiLCJzdWNjZXNzIiwiZXJyb3IiLCJhZGRQYXJ0Iiwic2V0UGFydCIsImRlbGV0ZVBhcnQiLCJzZXJ2aWNlIiwibG9hZEZhaWx1cmVIYW5kbGVyIiwibG9hZGVycyIsInJlbW92ZURhdGEiLCJ3YXNBY3RpdmUiLCJyZW1vdmUiLCJpc1BhcnRMb2FkZWQiLCJnZXRSZWdpc3RlcmVkUGFydHMiLCJyZWdpc3RlcmVkUGFydHMiLCJwIiwiY29uZmlnIiwiJGh0dHBQcm92aWRlciIsImludGVyY2VwdG9yIiwiJGNhY2hlRmFjdG9yeSIsIiR0aW1lb3V0IiwiY2ZwTG9hZGluZ0JhciIsInNldENvbXBsZXRlIiwiY2FuY2VsIiwic3RhcnRUaW1lb3V0IiwiY29tcGxldGUiLCJyZXFzQ29tcGxldGVkIiwicmVxc1RvdGFsIiwiaXNDYWNoZWQiLCJkZWZhdWx0Q2FjaGUiLCJkZWZhdWx0cyIsImNhY2hlZCIsImxhdGVuY3lUaHJlc2hvbGQiLCJyZXF1ZXN0IiwiaWdub3JlTG9hZGluZ0JhciIsIiRicm9hZGNhc3QiLCJzdGFydCIsInNldCIsInJlc3BvbnNlIiwicmVzcG9uc2VFcnJvciIsInJlamVjdGlvbiIsImludGVyY2VwdG9ycyIsImluY2x1ZGVTcGlubmVyIiwiaW5jbHVkZUJhciIsInN0YXJ0U2l6ZSIsInBhcmVudFNlbGVjdG9yIiwic3Bpbm5lclRlbXBsYXRlIiwibG9hZGluZ0JhclRlbXBsYXRlIiwiJGRvY3VtZW50IiwiX3N0YXJ0IiwiJGFuaW1hdGUiLCJmaW5kIiwiJHBhcmVudFNlbGVjdG9yIiwiZXEiLCJjb21wbGV0ZVRpbWVvdXQiLCJzdGFydGVkIiwiZW50ZXIiLCJsb2FkaW5nQmFyQ29udGFpbmVyIiwibGFzdENoaWxkIiwic3Bpbm5lciIsIl9zZXQiLCJwY3QiLCJsb2FkaW5nQmFyIiwiY3NzIiwic3RhdHVzIiwiaW5jVGltZW91dCIsIl9pbmMiLCJfc3RhdHVzIiwicm5kIiwic3RhdCIsIk1hdGgiLCJyYW5kb20iLCJfY29tcGxldGVBbmltYXRpb24iLCJfY29tcGxldGUiLCJsZWF2ZSIsImluYyIsIml0ZW1zIiwiaG92ZXJUaW1lb3V0Iiwib3Blbk1vZGUiLCJncmlkQ29sdW1ucyIsInNob3dGbGFnIiwic2VsZWN0ZWRMYW5nIiwiY29udHJvbGxlciIsIiRzY29wZSIsImNvbHVtbnMiLCJyb3VuZCIsInBhcnNlSW50IiwiaG92ZXJUaW1lb3V0UHJvbWlzZSIsImRvY3VtZW50Q2xpY2tIYW5kbGVyIiwiY2xvc2VQb3B1cCIsIiRhcHBseSIsImRvY3VtZW50S2V5SGFuZGxlciIsImV2dCIsImtleUNvZGUiLCJwcmVwYXJlTW9kZWwiLCJtb2RlbCIsIm9wZW5lZCIsImNvbHVtbiIsIml0ZW0iLCJzZWxlY3RlZCIsIm9wZW5Qb3B1cCIsIm9uIiwib2ZmIiwib25Nb3VzZUVudGVyT3JMZWF2ZSIsIm1vdXNlRW50ZXIiLCJvbkNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwib25MYW5ndWFnZUNoYW5nZWQiLCJjb3B5IiwidGVtcGxhdGUiLCJjb250ZXh0IiwicmVxdWlyZSIsImxpbmsiLCJhdHRyaWJ1dGVzIiwiY29udHJvbCIsImNoZWNrZXIiLCJwYXNzd29yZCIsIiRldmFsIiwibmdNb2RlbCIsImNvbmZpcm1lZFBhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwiaXNDb25maXJtZWQiLCIkc2V0VmFsaWRpdHkiLCJtZWFzdXJlU3RyZW5ndGgiLCJzdHJlbmd0aCIsInRlc3QiLCJzdHJlbmd0aFN0eWxlIiwibGV2ZWwiLCJwYXNzd29yZFN0cmVuZ3RoIiwiZGlzcGxheSIsInVybEJhc2U2NERlY29kZSIsIm91dHB1dCIsIndpbmRvdyIsImF0b2IiLCJnZXRUb2tlbkNsYWltcyIsInRva2VuIiwiY2xhaW1zIiwiZW5jb2RlZCIsIkpTT04iLCJwYXJzZSIsImUiLCJpc1Rva2VuVmFsaWQiLCJsb2NhbFN0b3JhZ2UiLCJ0b2tlbkNsYWltcyIsIkRhdGUiLCJnZXRUaW1lIiwic2V0VG9rZW4iLCJnZXRUb2tlbiIsImhhc1Blcm1pc3Npb24iLCJyZXNvdXJjZSIsIm5lZWRzUmVmcmVzaCIsImFnZSIsImlhdCIsInVybHMiLCJzaWdudXAiLCJwb3N0IiwiQkFTRV9BUEkiLCJzaWduaW4iLCJsb2dvdXQiLCJzZWFyY2giLCJhZHZhbmNlZFNlYXJjaCIsIiRyZXNvdXJjZSIsInZlaGljbGVJZCIsImFjdGlvbiIsInByZXZpZXciLCJWZWhpY2xlIiwidmVjaGljbGVJZCIsInZlaGljbGUiLCIkbG9jYXRpb24iLCIkdHJhbnNsYXRlUGFydGlhbExvYWRlciIsIiRpbnRlcnZhbCIsInRva2VuU2VydmljZSIsImF1dGhTZXJ2aWNlIiwic3VjY2Vzc0F1dGgiLCJyZXMiLCJyZXR1cm5UbyIsInN1Y2Nlc3NMb2dvdXQiLCJyZWZyZXNoVG9rZW4iLCJ0b2tlblJlZnJlc2hQcm9taXNlIiwiaXNWYWxpZCIsInNpZ25pbkZvcm1JbnZhbGlkIiwiZm9ybURhdGEiLCJlbWFpbCIsInNpZ251cEZvcm1JbnZhbGlkIiwicGFzc3dvcmRfY29uZmlybWF0aW9uIiwidmVoaWNsZXMiLCJzZWFyY2hTZXJ2aWNlIiwic2VhcmNoU3VjY2VzcyIsInNldFZlaGljbGVzIiwiJHZlaGljbGVzIiwiaXNQYW5lbEV4cGFuZGVkIiwic2VhcmNoRmFpbGVkIiwiaXNBZHZhbmNlZFNlYXJjaCIsInR5cGUiLCJmZWF0dXJlMSIsImZlYXR1cmUyIiwiZmVhdHVyZTMiLCJ2aWV3RGV0YWlscyIsInNlbGVjdCIsIiR0YWIiLCJ2ZWhpY2xlc1NlcnZpY2UiLCIkcm91dGVQYXJhbXMiLCJCQVNFIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIiR0cmFuc2xhdGVQcm92aWRlciIsIiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJyZXN0cmljdGVkIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImV4dHJhY3RUb2tlbiIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwieHNyZkhlYWRlck5hbWUiLCJ4c3JmQ29va2llTmFtZSIsImh0bWw1TW9kZSIsImVuX1VTIiwiZW5fVUsiLCJkZV9ERSIsImRlX0NIIiwicnVfUlUiLCJsdF9MVCIsImN1cnJlbnRMYW5ndWFnZSIsImxhYmVsIiwiY2hhbmdlTGFuZ3VhZ2UiLCJldmVudCIsIm5leHQiXSwibWFwcGluZ3MiOiJDQUtBLFNBQUFBLEVBQUFDLEdBQ0Esa0JBQUFDLFNBQUFBLE9BQUFDLElBRUFELFVBQUEsV0FDQSxNQUFBRCxPQUVBLGdCQUFBRyxTQUlBQyxPQUFBRCxRQUFBSCxJQUVBQSxLQUVBSyxLQUFBLFdBNjNFQSxNQXAzRUFDLFNBQUFGLE9BQUEsMEJBQUEsT0FFQUcsS0FBQSxhQUFBLFNBQUFDLEdB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YXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBhbmd1bGFyLXRyYW5zbGF0ZSAtIHYyLjcuMCAtIDIwMTUtMDQtMTVcbiAqIGh0dHA6Ly9naXRodWIuY29tL2FuZ3VsYXItdHJhbnNsYXRlL2FuZ3VsYXItdHJhbnNsYXRlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgOyBMaWNlbnNlZCBNSVRcbiAqL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUgdW5sZXNzIGFtZE1vZHVsZUlkIGlzIHNldFxuICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChmYWN0b3J5KCkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgIC8vIGxpa2UgTm9kZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG1haW4gbW9kdWxlIHdoaWNoIGhvbGRzIGV2ZXJ5dGhpbmcgdG9nZXRoZXIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJywgWyduZyddKVxuXG4ucnVuKFsnJHRyYW5zbGF0ZScsIGZ1bmN0aW9uICgkdHJhbnNsYXRlKSB7XG5cbiAgdmFyIGtleSA9ICR0cmFuc2xhdGUuc3RvcmFnZUtleSgpLFxuICAgICAgc3RvcmFnZSA9ICR0cmFuc2xhdGUuc3RvcmFnZSgpO1xuXG4gIHZhciBmYWxsYmFja0Zyb21JbmNvcnJlY3RTdG9yYWdlVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJlZmVycmVkID0gJHRyYW5zbGF0ZS5wcmVmZXJyZWRMYW5ndWFnZSgpO1xuICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHByZWZlcnJlZCkpIHtcbiAgICAgICR0cmFuc2xhdGUudXNlKHByZWZlcnJlZCk7XG4gICAgICAvLyAkdHJhbnNsYXRlLnVzZSgpIHdpbGwgYWxzbyByZW1lbWJlciB0aGUgbGFuZ3VhZ2UuXG4gICAgICAvLyBTbywgd2UgZG9uJ3QgbmVlZCB0byBjYWxsIHN0b3JhZ2UucHV0KCkgaGVyZS5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcmFnZS5wdXQoa2V5LCAkdHJhbnNsYXRlLnVzZSgpKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHN0b3JhZ2UpIHtcbiAgICBpZiAoIXN0b3JhZ2UuZ2V0KGtleSkpIHtcbiAgICAgIGZhbGxiYWNrRnJvbUluY29ycmVjdFN0b3JhZ2VWYWx1ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkdHJhbnNsYXRlLnVzZShzdG9yYWdlLmdldChrZXkpKVsnY2F0Y2gnXShmYWxsYmFja0Zyb21JbmNvcnJlY3RTdG9yYWdlVmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKCR0cmFuc2xhdGUucHJlZmVycmVkTGFuZ3VhZ2UoKSkpIHtcbiAgICAkdHJhbnNsYXRlLnVzZSgkdHJhbnNsYXRlLnByZWZlcnJlZExhbmd1YWdlKCkpO1xuICB9XG59XSk7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICR0cmFuc2xhdGVQcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byByZWdpc3RlciB0cmFuc2xhdGlvbi10YWJsZXMsIGFzeW5jaHJvbm91cyBsb2FkZXJzXG4gKiBhbmQgc2ltaWxhciB0byBjb25maWd1cmUgdHJhbnNsYXRpb24gYmVoYXZpb3IgZGlyZWN0bHkgaW5zaWRlIG9mIGEgbW9kdWxlLlxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnKS5wcm92aWRlcignJHRyYW5zbGF0ZScsIFsnJFNUT1JBR0VfS0VZJywgJyR3aW5kb3dQcm92aWRlcicsIGZ1bmN0aW9uICgkU1RPUkFHRV9LRVksICR3aW5kb3dQcm92aWRlcikge1xuXG4gIHZhciAkdHJhbnNsYXRpb25UYWJsZSA9IHt9LFxuICAgICAgJHByZWZlcnJlZExhbmd1YWdlLFxuICAgICAgJGF2YWlsYWJsZUxhbmd1YWdlS2V5cyA9IFtdLFxuICAgICAgJGxhbmd1YWdlS2V5QWxpYXNlcyxcbiAgICAgICRmYWxsYmFja0xhbmd1YWdlLFxuICAgICAgJGZhbGxiYWNrV2FzU3RyaW5nLFxuICAgICAgJHVzZXMsXG4gICAgICAkbmV4dExhbmcsXG4gICAgICAkc3RvcmFnZUZhY3RvcnksXG4gICAgICAkc3RvcmFnZUtleSA9ICRTVE9SQUdFX0tFWSxcbiAgICAgICRzdG9yYWdlUHJlZml4LFxuICAgICAgJG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJGYWN0b3J5LFxuICAgICAgJGludGVycG9sYXRpb25GYWN0b3J5LFxuICAgICAgJGludGVycG9sYXRvckZhY3RvcmllcyA9IFtdLFxuICAgICAgJGludGVycG9sYXRpb25TYW5pdGl6YXRpb25TdHJhdGVneSA9IGZhbHNlLFxuICAgICAgJGxvYWRlckZhY3RvcnksXG4gICAgICAkY2xvYWtDbGFzc05hbWUgPSAndHJhbnNsYXRlLWNsb2FrJyxcbiAgICAgICRsb2FkZXJPcHRpb25zLFxuICAgICAgJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCxcbiAgICAgICRub3RGb3VuZEluZGljYXRvclJpZ2h0LFxuICAgICAgJHBvc3RDb21waWxpbmdFbmFibGVkID0gZmFsc2UsXG4gICAgICBORVNURURfT0JKRUNUX0RFTElNSVRFUiA9ICcuJyxcbiAgICAgIGxvYWRlckNhY2hlLFxuICAgICAgZGlyZWN0aXZlUHJpb3JpdHkgPSAwLFxuICAgICAgc3RhdGVmdWxGaWx0ZXIgPSB0cnVlO1xuXG4gIHZhciB2ZXJzaW9uID0gJzIuNy4wJztcblxuICAvLyB0cmllcyB0byBkZXRlcm1pbmUgdGhlIGJyb3dzZXJzIGxhbmd1YWdlXG4gIHZhciBnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmF2ID0gJHdpbmRvd1Byb3ZpZGVyLiRnZXQoKS5uYXZpZ2F0b3IsXG4gICAgICAgIGJyb3dzZXJMYW5ndWFnZVByb3BlcnR5S2V5cyA9IFsnbGFuZ3VhZ2UnLCAnYnJvd3Nlckxhbmd1YWdlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3VzZXJMYW5ndWFnZSddLFxuICAgICAgICBpLFxuICAgICAgICBsYW5ndWFnZTtcblxuICAgIC8vIHN1cHBvcnQgZm9yIEhUTUwgNS4xIFwibmF2aWdhdG9yLmxhbmd1YWdlc1wiXG4gICAgaWYgKGFuZ3VsYXIuaXNBcnJheShuYXYubGFuZ3VhZ2VzKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5hdi5sYW5ndWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGFuZ3VhZ2UgPSBuYXYubGFuZ3VhZ2VzW2ldO1xuICAgICAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGxhbmd1YWdlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBmb3Igb3RoZXIgd2VsbCBrbm93biBwcm9wZXJ0aWVzIGluIGJyb3dzZXJzXG4gICAgZm9yIChpID0gMDsgaSA8IGJyb3dzZXJMYW5ndWFnZVByb3BlcnR5S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGFuZ3VhZ2UgPSBuYXZbYnJvd3Nlckxhbmd1YWdlUHJvcGVydHlLZXlzW2ldXTtcbiAgICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZS5kaXNwbGF5TmFtZSA9ICdhbmd1bGFyLXRyYW5zbGF0ZS9zZXJ2aWNlOiBnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZSc7XG5cbiAgLy8gdHJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBicm93c2VycyBsb2NhbGVcbiAgdmFyIGdldExvY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKGdldEZpcnN0QnJvd3Nlckxhbmd1YWdlKCkgfHwgJycpLnNwbGl0KCctJykuam9pbignXycpO1xuICB9O1xuICBnZXRMb2NhbGUuZGlzcGxheU5hbWUgPSAnYW5ndWxhci10cmFuc2xhdGUvc2VydmljZTogZ2V0TG9jYWxlJztcblxuICAvKipcbiAgICogQG5hbWUgaW5kZXhPZlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogaW5kZXhPZiBwb2x5ZmlsbC4gS2luZGEgc29ydGEuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IEFycmF5IHRvIHNlYXJjaCBpbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaEVsZW1lbnQgRWxlbWVudCB0byBzZWFyY2ggZm9yLlxuICAgKlxuICAgKiBAcmV0dXJucyB7aW50fSBJbmRleCBvZiBzZWFyY2ggZWxlbWVudC5cbiAgICovXG4gIHZhciBpbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIHNlYXJjaEVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSB0cmltXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiB0cmltIHBvbHlmaWxsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBzdHJpbmcgc3RyaXBwZWQgb2Ygd2hpdGVzcGFjZSBmcm9tIGJvdGggZW5kc1xuICAgKi9cbiAgdmFyIHRyaW0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gIH07XG5cbiAgdmFyIG5lZ290aWF0ZUxvY2FsZSA9IGZ1bmN0aW9uIChwcmVmZXJyZWQpIHtcblxuICAgIHZhciBhdmFpbCA9IFtdLFxuICAgICAgICBsb2NhbGUgPSBhbmd1bGFyLmxvd2VyY2FzZShwcmVmZXJyZWQpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9ICRhdmFpbGFibGVMYW5ndWFnZUtleXMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGF2YWlsLnB1c2goYW5ndWxhci5sb3dlcmNhc2UoJGF2YWlsYWJsZUxhbmd1YWdlS2V5c1tpXSkpO1xuICAgIH1cblxuICAgIGlmIChpbmRleE9mKGF2YWlsLCBsb2NhbGUpID4gLTEpIHtcbiAgICAgIHJldHVybiBwcmVmZXJyZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRsYW5ndWFnZUtleUFsaWFzZXMpIHtcbiAgICAgIHZhciBhbGlhcztcbiAgICAgIGZvciAodmFyIGxhbmdLZXlBbGlhcyBpbiAkbGFuZ3VhZ2VLZXlBbGlhc2VzKSB7XG4gICAgICAgIHZhciBoYXNXaWxkY2FyZEtleSA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzRXhhY3RLZXkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJGxhbmd1YWdlS2V5QWxpYXNlcywgbGFuZ0tleUFsaWFzKSAmJlxuICAgICAgICAgIGFuZ3VsYXIubG93ZXJjYXNlKGxhbmdLZXlBbGlhcykgPT09IGFuZ3VsYXIubG93ZXJjYXNlKHByZWZlcnJlZCk7XG5cbiAgICAgICAgaWYgKGxhbmdLZXlBbGlhcy5zbGljZSgtMSkgPT09ICcqJykge1xuICAgICAgICAgIGhhc1dpbGRjYXJkS2V5ID0gbGFuZ0tleUFsaWFzLnNsaWNlKDAsIC0xKSA9PT0gcHJlZmVycmVkLnNsaWNlKDAsIGxhbmdLZXlBbGlhcy5sZW5ndGgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0V4YWN0S2V5IHx8IGhhc1dpbGRjYXJkS2V5KSB7XG4gICAgICAgICAgYWxpYXMgPSAkbGFuZ3VhZ2VLZXlBbGlhc2VzW2xhbmdLZXlBbGlhc107XG4gICAgICAgICAgaWYgKGluZGV4T2YoYXZhaWwsIGFuZ3VsYXIubG93ZXJjYXNlKGFsaWFzKSkgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWFzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwYXJ0cyA9IHByZWZlcnJlZC5zcGxpdCgnXycpO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEgJiYgaW5kZXhPZihhdmFpbCwgYW5ndWxhci5sb3dlcmNhc2UocGFydHNbMF0pKSA+IC0xKSB7XG4gICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgfVxuXG4gICAgLy8gSWYgZXZlcnl0aGluZyBmYWlscywganVzdCByZXR1cm4gdGhlIHByZWZlcnJlZCwgdW5jaGFuZ2VkLlxuICAgIHJldHVybiBwcmVmZXJyZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN0cmFuc2xhdGlvbnNcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBuZXcgdHJhbnNsYXRpb24gdGFibGUgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGtleS5cbiAgICpcbiAgICogVG8gcmVnaXN0ZXIgYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UsIHBhc3MgYSBkZWZpbmVkIGxhbmd1YWdlXG4gICAqIGtleSBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIDxwcmU+XG4gICAqICAvLyByZWdpc3RlciB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgbGFuZ3VhZ2U6ICdkZV9ERSdcbiAgICogICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoJ2RlX0RFJywge1xuICAgKiAgICAnR1JFRVRJTkcnOiAnSGFsbG8gV2VsdCEnXG4gICAqICB9KTtcbiAgICpcbiAgICogIC8vIHJlZ2lzdGVyIGFub3RoZXIgb25lXG4gICAqICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKCdlbl9VUycsIHtcbiAgICogICAgJ0dSRUVUSU5HJzogJ0hlbGxvIHdvcmxkISdcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogV2hlbiByZWdpc3RlcmluZyBtdWx0aXBsZSB0cmFuc2xhdGlvbiB0YWJsZXMgZm9yIGZvciB0aGUgc2FtZSBsYW5ndWFnZSBrZXksXG4gICAqIHRoZSBhY3R1YWwgdHJhbnNsYXRpb24gdGFibGUgZ2V0cyBleHRlbmRlZC4gVGhpcyBhbGxvd3MgeW91IHRvIGRlZmluZSBtb2R1bGVcbiAgICogc3BlY2lmaWMgdHJhbnNsYXRpb24gd2hpY2ggb25seSBnZXQgYWRkZWQsIG9uY2UgYSBzcGVjaWZpYyBtb2R1bGUgaXMgbG9hZGVkIGluXG4gICAqIHlvdXIgYXBwLlxuICAgKlxuICAgKiBJbnZva2luZyB0aGlzIG1ldGhvZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB0YWJsZSB3aGljaCB3YXNcbiAgICogcmVnaXN0ZXJlZCB3aXRoIG5vIGxhbmd1YWdlIGtleS4gSW52b2tpbmcgaXQgd2l0aCBhIGxhbmd1YWdlIGtleSByZXR1cm5zIHRoZVxuICAgKiByZWxhdGVkIHRyYW5zbGF0aW9uIHRhYmxlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEEgbGFuZ3VhZ2Uga2V5LlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHJhbnNsYXRpb25UYWJsZSBBIHBsYWluIG9sZCBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSB0cmFuc2xhdGlvbiB0YWJsZS5cbiAgICpcbiAgICovXG4gIHZhciB0cmFuc2xhdGlvbnMgPSBmdW5jdGlvbiAobGFuZ0tleSwgdHJhbnNsYXRpb25UYWJsZSkge1xuXG4gICAgaWYgKCFsYW5nS2V5ICYmICF0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICByZXR1cm4gJHRyYW5zbGF0aW9uVGFibGU7XG4gICAgfVxuXG4gICAgaWYgKGxhbmdLZXkgJiYgIXRyYW5zbGF0aW9uVGFibGUpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGxhbmdLZXkpKSB7XG4gICAgICAgIHJldHVybiAkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KCR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldKSkge1xuICAgICAgICAkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSA9IHt9O1xuICAgICAgfVxuICAgICAgYW5ndWxhci5leHRlbmQoJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0sIGZsYXRPYmplY3QodHJhbnNsYXRpb25UYWJsZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLnRyYW5zbGF0aW9ucyA9IHRyYW5zbGF0aW9ucztcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI2Nsb2FrQ2xhc3NOYW1lXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGV0J3MgeW91IGNoYW5nZSB0aGUgY2xhc3MgbmFtZSBmb3IgYHRyYW5zbGF0ZS1jbG9ha2AgZGlyZWN0aXZlLlxuICAgKiBEZWZhdWx0IGNsYXNzIG5hbWUgaXMgYHRyYW5zbGF0ZS1jbG9ha2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRyYW5zbGF0ZS1jbG9hayBjbGFzcyBuYW1lXG4gICAqL1xuICB0aGlzLmNsb2FrQ2xhc3NOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgfVxuICAgICRjbG9ha0NsYXNzTmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuYW1lIGZsYXRPYmplY3RcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZsYXRzIGFuIG9iamVjdC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGZsYXR0ZW4gZ2l2ZW4gdHJhbnNsYXRpb24gZGF0YSB3aXRoXG4gICAqIG5hbWVzcGFjZXMsIHNvIHRoZXkgYXJlIGxhdGVyIGFjY2Vzc2libGUgdmlhIGRvdCBub3RhdGlvbi5cbiAgICovXG4gIHZhciBmbGF0T2JqZWN0ID0gZnVuY3Rpb24gKGRhdGEsIHBhdGgsIHJlc3VsdCwgcHJldktleSkge1xuICAgIHZhciBrZXksIGtleVdpdGhQYXRoLCBrZXlXaXRoU2hvcnRQYXRoLCB2YWw7XG5cbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIHBhdGggPSBbXTtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJlc3VsdCA9IHt9O1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBkYXRhKSB7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFsID0gZGF0YVtrZXldO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QodmFsKSkge1xuICAgICAgICBmbGF0T2JqZWN0KHZhbCwgcGF0aC5jb25jYXQoa2V5KSwgcmVzdWx0LCBrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5V2l0aFBhdGggPSBwYXRoLmxlbmd0aCA/ICgnJyArIHBhdGguam9pbihORVNURURfT0JKRUNUX0RFTElNSVRFUikgKyBORVNURURfT0JKRUNUX0RFTElNSVRFUiArIGtleSkgOiBrZXk7XG4gICAgICAgIGlmKHBhdGgubGVuZ3RoICYmIGtleSA9PT0gcHJldktleSl7XG4gICAgICAgICAgLy8gQ3JlYXRlIHNob3J0Y3V0IHBhdGggKGZvby5iYXIgPT0gZm9vLmJhci5iYXIpXG4gICAgICAgICAga2V5V2l0aFNob3J0UGF0aCA9ICcnICsgcGF0aC5qb2luKE5FU1RFRF9PQkpFQ1RfREVMSU1JVEVSKTtcbiAgICAgICAgICAvLyBMaW5rIGl0IHRvIG9yaWdpbmFsIHBhdGhcbiAgICAgICAgICByZXN1bHRba2V5V2l0aFNob3J0UGF0aF0gPSAnQDonICsga2V5V2l0aFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W2tleVdpdGhQYXRoXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI2FkZEludGVycG9sYXRpb25cbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBZGRzIGludGVycG9sYXRpb24gc2VydmljZXMgdG8gYW5ndWxhci10cmFuc2xhdGUsIHNvIGl0IGNhbiBtYW5hZ2UgdGhlbS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZhY3RvcnkgSW50ZXJwb2xhdGlvbiBzZXJ2aWNlIGZhY3RvcnlcbiAgICovXG4gIHRoaXMuYWRkSW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgJGludGVycG9sYXRvckZhY3Rvcmllcy5wdXNoKGZhY3RvcnkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdXNlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb25cbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbmFsaXR5IG9mIG1lc3NhZ2Vmb3JtYXQuanMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4gaGF2aW5nIGhpZ2ggbGV2ZWwgcGx1cmFsaXphdGlvbiBhbmQgZ2VuZGVyIHNlbGVjdGlvbi5cbiAgICovXG4gIHRoaXMudXNlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlSW50ZXJwb2xhdGlvbignJHRyYW5zbGF0ZU1lc3NhZ2VGb3JtYXRJbnRlcnBvbGF0aW9uJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VJbnRlcnBvbGF0aW9uXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgYW5ndWxhci10cmFuc2xhdGUgd2hpY2ggaW50ZXJwb2xhdGlvbiBzdHlsZSB0byB1c2UgYXMgZGVmYXVsdCwgYXBwbGljYXRpb24td2lkZS5cbiAgICogU2ltcGx5IHBhc3MgYSBmYWN0b3J5L3NlcnZpY2UgbmFtZS4gVGhlIGludGVycG9sYXRpb24gc2VydmljZSBoYXMgdG8gaW1wbGVtZW50XG4gICAqIHRoZSBjb3JyZWN0IGludGVyZmFjZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgSW50ZXJwb2xhdGlvbiBzZXJ2aWNlIG5hbWUuXG4gICAqL1xuICB0aGlzLnVzZUludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICRpbnRlcnBvbGF0aW9uRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VTYW5pdGl6ZVN0cmF0ZWd5XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2ltcGx5IHNldHMgYSBzYW5pdGF0aW9uIHN0cmF0ZWd5IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBTdHJhdGVneSB0eXBlLlxuICAgKi9cbiAgdGhpcy51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAkaW50ZXJwb2xhdGlvblNhbml0aXphdGlvblN0cmF0ZWd5ID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3ByZWZlcnJlZExhbmd1YWdlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBvZiB0aGUgcmVnaXN0ZXJlZCB0cmFuc2xhdGlvbiB0YWJsZXMgdG8gdXNlIGZvciB0cmFuc2xhdGlvblxuICAgKiBhdCBpbml0aWFsIHN0YXJ0dXAgYnkgcGFzc2luZyBhIGxhbmd1YWdlIGtleS4gU2ltaWxhciB0byBgJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZWBcbiAgICogb25seSB0aGF0IGl0IHNheXMgd2hpY2ggbGFuZ3VhZ2UgdG8gKipwcmVmZXIqKi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdLZXkgQSBsYW5ndWFnZSBrZXkuXG4gICAqXG4gICAqL1xuICB0aGlzLnByZWZlcnJlZExhbmd1YWdlID0gZnVuY3Rpb24obGFuZ0tleSkge1xuICAgIHNldHVwUHJlZmVycmVkTGFuZ3VhZ2UobGFuZ0tleSk7XG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgfTtcbiAgdmFyIHNldHVwUHJlZmVycmVkTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgIGlmIChsYW5nS2V5KSB7XG4gICAgICAkcHJlZmVycmVkTGFuZ3VhZ2UgPSBsYW5nS2V5O1xuICAgIH1cbiAgICByZXR1cm4gJHByZWZlcnJlZExhbmd1YWdlO1xuICB9O1xuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3RyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZC4gRS5nLiB3aGVuXG4gICAqIHNldHRpbmcgdGhlIGluZGljYXRvciBhcyAnWCcgYW5kIG9uZSB0cmllcyB0byB0cmFuc2xhdGUgYSB0cmFuc2xhdGlvbiBpZFxuICAgKiBjYWxsZWQgYE5PVF9GT1VORGAsIHRoaXMgd2lsbCByZXN1bHQgaW4gYFggTk9UX0ZPVU5EIFhgLlxuICAgKlxuICAgKiBJbnRlcm5hbGx5IHRoaXMgbWV0aG9kcyBzZXRzIGEgbGVmdCBpbmRpY2F0b3IgYW5kIGEgcmlnaHQgaW5kaWNhdG9yIHVzaW5nXG4gICAqIGAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQoKWAgYW5kXG4gICAqIGAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvclJpZ2h0KClgLlxuICAgKlxuICAgKiAqKk5vdGUqKjogVGhlc2UgbWV0aG9kcyBhdXRvbWF0aWNhbGx5IGFkZCBhIHdoaXRlc3BhY2UgYmV0d2VlbiB0aGUgaW5kaWNhdG9yc1xuICAgKiBhbmQgdGhlIHRyYW5zbGF0aW9uIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5kaWNhdG9yIEFuIGluZGljYXRvciwgY291bGQgYmUgYW55IHN0cmluZy5cbiAgICovXG4gIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvciA9IGZ1bmN0aW9uIChpbmRpY2F0b3IpIHtcbiAgICB0aGlzLnRyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JMZWZ0KGluZGljYXRvcik7XG4gICAgdGhpcy50cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQoaW5kaWNhdG9yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnRcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZCBsZWZ0IHRvIHRoZVxuICAgKiB0cmFuc2xhdGlvbiBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGluZGljYXRvciBBbiBpbmRpY2F0b3IuXG4gICAqL1xuICB0aGlzLnRyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JMZWZ0ID0gZnVuY3Rpb24gKGluZGljYXRvcikge1xuICAgIGlmICghaW5kaWNhdG9yKSB7XG4gICAgICByZXR1cm4gJG5vdEZvdW5kSW5kaWNhdG9yTGVmdDtcbiAgICB9XG4gICAgJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCA9IGluZGljYXRvcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnRcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZCByaWdodCB0byB0aGVcbiAgICogdHJhbnNsYXRpb24gaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbmRpY2F0b3IgQW4gaW5kaWNhdG9yLlxuICAgKi9cbiAgdGhpcy50cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQgPSBmdW5jdGlvbiAoaW5kaWNhdG9yKSB7XG4gICAgaWYgKCFpbmRpY2F0b3IpIHtcbiAgICAgIHJldHVybiAkbm90Rm91bmRJbmRpY2F0b3JSaWdodDtcbiAgICB9XG4gICAgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQgPSBpbmRpY2F0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNmYWxsYmFja0xhbmd1YWdlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBvZiB0aGUgcmVnaXN0ZXJlZCB0cmFuc2xhdGlvbiB0YWJsZXMgdG8gdXNlIHdoZW4gbWlzc2luZyB0cmFuc2xhdGlvbnNcbiAgICogYXQgaW5pdGlhbCBzdGFydHVwIGJ5IHBhc3NpbmcgYSBsYW5ndWFnZSBrZXkuIFNpbWlsYXIgdG8gYCR0cmFuc2xhdGVQcm92aWRlciN1c2VgXG4gICAqIG9ubHkgdGhhdCBpdCBzYXlzIHdoaWNoIGxhbmd1YWdlIHRvICoqZmFsbGJhY2sqKi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8fGFycmF5fSBsYW5nS2V5IEEgbGFuZ3VhZ2Uga2V5LlxuICAgKlxuICAgKi9cbiAgdGhpcy5mYWxsYmFja0xhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBmYWxsYmFja1N0YWNrID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICBpZiAobGFuZ0tleSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcobGFuZ0tleSkpIHtcbiAgICAgICAgJGZhbGxiYWNrV2FzU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgJGZhbGxiYWNrTGFuZ3VhZ2UgPSBbIGxhbmdLZXkgXTtcbiAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0FycmF5KGxhbmdLZXkpKSB7XG4gICAgICAgICRmYWxsYmFja1dhc1N0cmluZyA9IGZhbHNlO1xuICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZSA9IGxhbmdLZXk7XG4gICAgICB9XG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZygkcHJlZmVycmVkTGFuZ3VhZ2UpICAmJiBpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCAkcHJlZmVycmVkTGFuZ3VhZ2UpIDwgMCkge1xuICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZS5wdXNoKCRwcmVmZXJyZWRMYW5ndWFnZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJGZhbGxiYWNrV2FzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXQgd2hpY2ggdHJhbnNsYXRpb24gdGFibGUgdG8gdXNlIGZvciB0cmFuc2xhdGlvbiBieSBnaXZlbiBsYW5ndWFnZSBrZXkuIFdoZW5cbiAgICogdHJ5aW5nIHRvICd1c2UnIGEgbGFuZ3VhZ2Ugd2hpY2ggaXNuJ3QgcHJvdmlkZWQsIGl0J2xsIHRocm93IGFuIGVycm9yLlxuICAgKlxuICAgKiBZb3UgYWN0dWFsbHkgZG9uJ3QgaGF2ZSB0byB1c2UgdGhpcyBtZXRob2Qgc2luY2UgYCR0cmFuc2xhdGVQcm92aWRlciNwcmVmZXJyZWRMYW5ndWFnZWBcbiAgICogZG9lcyB0aGUgam9iIHRvby5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdLZXkgQSBsYW5ndWFnZSBrZXkuXG4gICAqL1xuICB0aGlzLnVzZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgaWYgKGxhbmdLZXkpIHtcbiAgICAgIGlmICghJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0gJiYgKCEkbG9hZGVyRmFjdG9yeSkpIHtcbiAgICAgICAgLy8gb25seSB0aHJvdyBhbiBlcnJvciwgd2hlbiBub3QgbG9hZGluZyB0cmFuc2xhdGlvbiBkYXRhIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIiR0cmFuc2xhdGVQcm92aWRlciBjb3VsZG4ndCBmaW5kIHRyYW5zbGF0aW9uVGFibGUgZm9yIGxhbmdLZXk6ICdcIiArIGxhbmdLZXkgKyBcIidcIik7XG4gICAgICB9XG4gICAgICAkdXNlcyA9IGxhbmdLZXk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuICR1c2VzO1xuICB9O1xuXG4gLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNzdG9yYWdlS2V5XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBrZXkgbXVzdCByZXByZXNlbnQgdGhlIGNob29zZWQgbGFuZ3VhZ2UgYnkgYSB1c2VyIGluIHRoZSBzdG9yYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEEga2V5IGZvciB0aGUgc3RvcmFnZS5cbiAgICovXG4gIHZhciBzdG9yYWdlS2V5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGlmICgkc3RvcmFnZVByZWZpeCkge1xuICAgICAgICByZXR1cm4gJHN0b3JhZ2VQcmVmaXggKyAkc3RvcmFnZUtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc3RvcmFnZUtleTtcbiAgICB9XG4gICAgJHN0b3JhZ2VLZXkgPSBrZXk7XG4gIH07XG5cbiAgdGhpcy5zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZVVybExvYWRlclxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHVzZSBgJHRyYW5zbGF0ZVVybExvYWRlcmAgZXh0ZW5zaW9uIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVybFxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIHRoaXMudXNlVXJsTG9hZGVyID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnVzZUxvYWRlcignJHRyYW5zbGF0ZVVybExvYWRlcicsIGFuZ3VsYXIuZXh0ZW5kKHsgdXJsOiB1cmwgfSwgb3B0aW9ucykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdXNlU3RhdGljRmlsZXNMb2FkZXJcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVTdGF0aWNGaWxlc0xvYWRlcmAgZXh0ZW5zaW9uIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIHRoaXMudXNlU3RhdGljRmlsZXNMb2FkZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnVzZUxvYWRlcignJHRyYW5zbGF0ZVN0YXRpY0ZpbGVzTG9hZGVyJywgb3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VMb2FkZXJcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYW55IG90aGVyIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9hZGVyRmFjdG9yeSBGYWN0b3J5IG5hbWUgdG8gdXNlXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKi9cbiAgdGhpcy51c2VMb2FkZXIgPSBmdW5jdGlvbiAobG9hZGVyRmFjdG9yeSwgb3B0aW9ucykge1xuICAgICRsb2FkZXJGYWN0b3J5ID0gbG9hZGVyRmFjdG9yeTtcbiAgICAkbG9hZGVyT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VMb2NhbFN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVMb2NhbFN0b3JhZ2VgIHNlcnZpY2UgYXMgc3RvcmFnZSBsYXllci5cbiAgICpcbiAgICovXG4gIHRoaXMudXNlTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZVN0b3JhZ2UoJyR0cmFuc2xhdGVMb2NhbFN0b3JhZ2UnKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZUNvb2tpZVN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVDb29raWVTdG9yYWdlYCBzZXJ2aWNlIGFzIHN0b3JhZ2UgbGF5ZXIuXG4gICAqL1xuICB0aGlzLnVzZUNvb2tpZVN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlU3RvcmFnZSgnJHRyYW5zbGF0ZUNvb2tpZVN0b3JhZ2UnKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZVN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgY3VzdG9tIHNlcnZpY2UgYXMgc3RvcmFnZSBsYXllci5cbiAgICovXG4gIHRoaXMudXNlU3RvcmFnZSA9IGZ1bmN0aW9uIChzdG9yYWdlRmFjdG9yeSkge1xuICAgICRzdG9yYWdlRmFjdG9yeSA9IHN0b3JhZ2VGYWN0b3J5O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjc3RvcmFnZVByZWZpeFxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgcHJlZml4IGZvciBzdG9yYWdlIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCBTdG9yYWdlIGtleSBwcmVmaXhcbiAgICovXG4gIHRoaXMuc3RvcmFnZVByZWZpeCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpZiAoIXByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG4gICAgJHN0b3JhZ2VQcmVmaXggPSBwcmVmaXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgYW5ndWxhci10cmFuc2xhdGUgdG8gdXNlIGJ1aWx0LWluIGxvZyBoYW5kbGVyIHdoZW4gdHJ5aW5nIHRvIHRyYW5zbGF0ZVxuICAgKiBhIHRyYW5zbGF0aW9uIElkIHdoaWNoIGRvZXNuJ3QgZXhpc3QuXG4gICAqXG4gICAqIFRoaXMgaXMgYWN0dWFsbHkgYSBzaG9ydGN1dCBtZXRob2QgZm9yIGB1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyKClgLlxuICAgKlxuICAgKi9cbiAgdGhpcy51c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIoJyR0cmFuc2xhdGVNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXhwZWN0cyBhIGZhY3RvcnkgbmFtZSB3aGljaCBsYXRlciBnZXRzIGluc3RhbnRpYXRlZCB3aXRoIGAkaW5qZWN0b3JgLlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byB0ZWxsIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHVzZSBhIGN1c3RvbVxuICAgKiBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLiBKdXN0IGJ1aWxkIGEgZmFjdG9yeSB3aGljaCByZXR1cm5zIGEgZnVuY3Rpb25cbiAgICogYW5kIGV4cGVjdHMgYSB0cmFuc2xhdGlvbiBpZCBhcyBhcmd1bWVudC5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogPHByZT5cbiAgICogIGFwcC5jb25maWcoZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlcikge1xuICAgKiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlcignY3VzdG9tSGFuZGxlcicpO1xuICAgKiAgfSk7XG4gICAqXG4gICAqICBhcHAuZmFjdG9yeSgnY3VzdG9tSGFuZGxlcicsIGZ1bmN0aW9uIChkZXAxLCBkZXAyKSB7XG4gICAqICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgKiAgICAgIC8vIHNvbWV0aGluZyB3aXRoIHRyYW5zbGF0aW9uSWQgYW5kIGRlcDEgYW5kIGRlcDJcbiAgICogICAgfTtcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgRmFjdG9yeSBuYW1lXG4gICAqL1xuICB0aGlzLnVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VQb3N0Q29tcGlsaW5nXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgcG9zdCBjb21waWxpbmcgaXMgZW5hYmxlZCwgYWxsIHRyYW5zbGF0ZWQgdmFsdWVzIHdpbGwgYmUgcHJvY2Vzc2VkXG4gICAqIGFnYWluIHdpdGggQW5ndWxhckpTJyAkY29tcGlsZS5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogPHByZT5cbiAgICogIGFwcC5jb25maWcoZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlcikge1xuICAgKiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlUG9zdENvbXBpbGluZyh0cnVlKTtcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgRmFjdG9yeSBuYW1lXG4gICAqL1xuICB0aGlzLnVzZVBvc3RDb21waWxpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAkcG9zdENvbXBpbGluZ0VuYWJsZWQgPSAhKCF2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHRyeSB0byBkZXRlcm1pbmUgb24gaXRzIG93biB3aGljaCBsYW5ndWFnZSBrZXlcbiAgICogdG8gc2V0IGFzIHByZWZlcnJlZCBsYW5ndWFnZS4gV2hlbiBgZm5gIGlzIGdpdmVuLCBhbmd1bGFyLXRyYW5zbGF0ZSB1c2VzIGl0XG4gICAqIHRvIGRldGVybWluZSBhIGxhbmd1YWdlIGtleSwgb3RoZXJ3aXNlIGl0IHVzZXMgdGhlIGJ1aWx0LWluIGBnZXRMb2NhbGUoKWBcbiAgICogbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYGdldExvY2FsZSgpYCByZXR1cm5zIGEgbGFuZ3VhZ2Uga2V5IGluIHRoZSBmb3JtYXQgYFtsYW5nXV9bY291bnRyeV1gIG9yXG4gICAqIGBbbGFuZ11gIGRlcGVuZGluZyBvbiB3aGF0IHRoZSBicm93c2VyIHByb3ZpZGVzLlxuICAgKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgYXQgeW91ciBvd24gcmlzaywgc2luY2Ugbm90IGFsbCBicm93c2VycyByZXR1cm4gYSB2YWxpZFxuICAgKiBsb2NhbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gZm4gRnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGEgYnJvd3NlcidzIGxvY2FsZVxuICAgKi9cbiAgdGhpcy5kZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uIChmbikge1xuXG4gICAgdmFyIGxvY2FsZSA9IChmbiAmJiBhbmd1bGFyLmlzRnVuY3Rpb24oZm4pKSA/IGZuKCkgOiBnZXRMb2NhbGUoKTtcblxuICAgIGlmICghJGF2YWlsYWJsZUxhbmd1YWdlS2V5cy5sZW5ndGgpIHtcbiAgICAgICRwcmVmZXJyZWRMYW5ndWFnZSA9IGxvY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHByZWZlcnJlZExhbmd1YWdlID0gbmVnb3RpYXRlTG9jYWxlKGxvY2FsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNyZWdpc3RlckF2YWlsYWJsZUxhbmd1YWdlS2V5c1xuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIHNldCBvZiBsYW5ndWFnZSBrZXlzIHRoZSBhcHAgd2lsbCB3b3JrIHdpdGguIFVzZSB0aGlzIG1ldGhvZCBpblxuICAgKiBjb21iaW5hdGlvbiB3aXRoXG4gICAqIHtAbGluayBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSBkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZX0uXG4gICAqIFdoZW4gYXZhaWxhYmxlIGxhbmd1YWdlcyBrZXlzIGFyZSByZWdpc3RlcmVkLCBhbmd1bGFyLXRyYW5zbGF0ZVxuICAgKiB0cmllcyB0byBmaW5kIHRoZSBiZXN0IGZpdHRpbmcgbGFuZ3VhZ2Uga2V5IGRlcGVuZGluZyBvbiB0aGUgYnJvd3NlcnMgbG9jYWxlLFxuICAgKiBjb25zaWRlcmluZyB5b3VyIGxhbmd1YWdlIGtleSBjb252ZW50aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFuZ3VhZ2VLZXlzIEFycmF5IG9mIGxhbmd1YWdlIGtleXMgdGhlIHlvdXIgYXBwIHdpbGwgdXNlXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gYWxpYXNlcyBBbGlhcyBtYXAuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyQXZhaWxhYmxlTGFuZ3VhZ2VLZXlzID0gZnVuY3Rpb24gKGxhbmd1YWdlS2V5cywgYWxpYXNlcykge1xuICAgIGlmIChsYW5ndWFnZUtleXMpIHtcbiAgICAgICRhdmFpbGFibGVMYW5ndWFnZUtleXMgPSBsYW5ndWFnZUtleXM7XG4gICAgICBpZiAoYWxpYXNlcykge1xuICAgICAgICAkbGFuZ3VhZ2VLZXlBbGlhc2VzID0gYWxpYXNlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gJGF2YWlsYWJsZUxhbmd1YWdlS2V5cztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZUxvYWRlckNhY2hlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgY2FjaGUgZm9yIGludGVybmFsICRodHRwIGJhc2VkIGxvYWRlcnMuXG4gICAqIHtAbGluayBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSBkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZX0uXG4gICAqIFdoZW4gZmFsc2UgdGhlIGNhY2hlIHdpbGwgYmUgZGlzYWJsZWQgKGRlZmF1bHQpLiBXaGVuIHRydWUgb3IgdW5kZWZpbmVkXG4gICAqIHRoZSBjYWNoZSB3aWxsIGJlIGEgZGVmYXVsdCAoc2VlICRjYWNoZUZhY3RvcnkpLiBXaGVuIGFuIG9iamVjdCBpdCB3aWxsXG4gICAqIGJlIHRyZWF0IGFzIGEgY2FjaGUgb2JqZWN0IGl0c2VsZjogdGhlIHVzYWdlIGlzICRodHRwKHtjYWNoZTogY2FjaGV9KVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY2FjaGUgYm9vbGVhbiwgc3RyaW5nIG9yIGNhY2hlLW9iamVjdFxuICAgKi9cbiAgdGhpcy51c2VMb2FkZXJDYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSkge1xuICAgIGlmIChjYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGRpc2FibGUgY2FjaGVcbiAgICAgIGxvYWRlckNhY2hlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoY2FjaGUgPT09IHRydWUpIHtcbiAgICAgIC8vIGVuYWJsZSBjYWNoZSB1c2luZyBBSlMgZGVmYXVsdHNcbiAgICAgIGxvYWRlckNhY2hlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihjYWNoZSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlbmFibGUgY2FjaGUgdXNpbmcgZGVmYXVsdFxuICAgICAgbG9hZGVyQ2FjaGUgPSAnJHRyYW5zbGF0aW9uQ2FjaGUnO1xuICAgIH0gZWxzZSBpZiAoY2FjaGUpIHtcbiAgICAgIC8vIGVuYWJsZSBjYWNoZSB1c2luZyBnaXZlbiBvbmUgKHNlZSAkY2FjaGVGYWN0b3J5KVxuICAgICAgbG9hZGVyQ2FjaGUgPSBjYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkaXJlY3RpdmVQcmlvcml0eVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGRlZmF1bHQgcHJpb3JpdHkgb2YgdGhlIHRyYW5zbGF0ZSBkaXJlY3RpdmUuIFRoZSBzdGFuZGFyZCB2YWx1ZSBpcyBgMGAuXG4gICAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aXRob3V0IGFuIGFyZ3VtZW50IHdpbGwgcmV0dXJuIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcHJpb3JpdHkgZm9yIHRoZSB0cmFuc2xhdGUtZGlyZWN0aXZlXG4gICAqL1xuICB0aGlzLmRpcmVjdGl2ZVByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5KSB7XG4gICAgaWYgKHByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGdldHRlclxuICAgICAgcmV0dXJuIGRpcmVjdGl2ZVByaW9yaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXR0ZXIgd2l0aCBjaGFpbmluZ1xuICAgICAgZGlyZWN0aXZlUHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3N0YXRlZnVsRmlsdGVyXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2luY2UgQW5ndWxhckpTIDEuMywgZmlsdGVycyB3aGljaCBhcmUgbm90IHN0YXRlbGVzcyAoZGVwZW5kaW5nIGF0IHRoZSBzY29wZSlcbiAgICogaGF2ZSB0byBleHBsaWNpdCBkZWZpbmUgdGhpcyBiZWhhdmlvci5cbiAgICogU2V0cyB3aGV0aGVyIHRoZSB0cmFuc2xhdGUgZmlsdGVyIHNob3VsZCBiZSBzdGF0ZWZ1bCBvciBzdGF0ZWxlc3MuIFRoZSBzdGFuZGFyZCB2YWx1ZSBpcyBgdHJ1ZWBcbiAgICogbWVhbmluZyBiZWluZyBzdGF0ZWZ1bC5cbiAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgYW4gYXJndW1lbnQgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSBkZWZpbmVzIHRoZSBzdGF0ZSBvZiB0aGUgZmlsdGVyXG4gICAqL1xuICB0aGlzLnN0YXRlZnVsRmlsdGVyID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGdldHRlclxuICAgICAgcmV0dXJuIHN0YXRlZnVsRmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXR0ZXIgd2l0aCBjaGFpbmluZ1xuICAgICAgc3RhdGVmdWxGaWx0ZXIgPSBzdGF0ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICogQHJlcXVpcmVzICRpbnRlcnBvbGF0ZVxuICAgKiBAcmVxdWlyZXMgJGxvZ1xuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJHFcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgJHRyYW5zbGF0ZWAgc2VydmljZSBpcyB0aGUgYWN0dWFsIGNvcmUgb2YgYW5ndWxhci10cmFuc2xhdGUuIEl0IGV4cGVjdHMgYSB0cmFuc2xhdGlvbiBpZFxuICAgKiBhbmQgb3B0aW9uYWwgaW50ZXJwb2xhdGUgcGFyYW1ldGVycyB0byB0cmFuc2xhdGUgY29udGVudHMuXG4gICAqXG4gICAqIDxwcmU+XG4gICAqICAkdHJhbnNsYXRlKCdIRUFETElORV9URVhUJykudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICogICAgJHNjb3BlLnRyYW5zbGF0ZWRUZXh0ID0gdHJhbnNsYXRpb247XG4gICAqICB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB0cmFuc2xhdGlvbklkIEEgdG9rZW4gd2hpY2ggcmVwcmVzZW50cyBhIHRyYW5zbGF0aW9uIGlkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FuIGJlIG9wdGlvbmFsbHkgYW4gYXJyYXkgb2YgdHJhbnNsYXRpb24gaWRzIHdoaWNoXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgdGhhdCB0aGUgZnVuY3Rpb24gcmV0dXJucyBhbiBvYmplY3Qgd2hlcmUgZWFjaCBrZXlcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgdGhlIHRyYW5zbGF0aW9uIGlkIGFuZCB0aGUgdmFsdWUgdGhlIHRyYW5zbGF0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdD19IGludGVycG9sYXRlUGFyYW1zIEFuIG9iamVjdCBoYXNoIGZvciBkeW5hbWljIHZhbHVlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZXJwb2xhdGlvbklkIFRoZSBpZCBvZiB0aGUgaW50ZXJwb2xhdGlvbiB0byB1c2VcbiAgICogQHJldHVybnMge29iamVjdH0gcHJvbWlzZVxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gW1xuICAgICckbG9nJyxcbiAgICAnJGluamVjdG9yJyxcbiAgICAnJHJvb3RTY29wZScsXG4gICAgJyRxJyxcbiAgICBmdW5jdGlvbiAoJGxvZywgJGluamVjdG9yLCAkcm9vdFNjb3BlLCAkcSkge1xuXG4gICAgICB2YXIgU3RvcmFnZSxcbiAgICAgICAgICBkZWZhdWx0SW50ZXJwb2xhdG9yID0gJGluamVjdG9yLmdldCgkaW50ZXJwb2xhdGlvbkZhY3RvcnkgfHwgJyR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvbicpLFxuICAgICAgICAgIHBlbmRpbmdMb2FkZXIgPSBmYWxzZSxcbiAgICAgICAgICBpbnRlcnBvbGF0b3JIYXNoTWFwID0ge30sXG4gICAgICAgICAgbGFuZ1Byb21pc2VzID0ge30sXG4gICAgICAgICAgZmFsbGJhY2tJbmRleCxcbiAgICAgICAgICBzdGFydEZhbGxiYWNrSXRlcmF0aW9uO1xuXG4gICAgICB2YXIgJHRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KSB7XG5cbiAgICAgICAgLy8gRHVjayBkZXRlY3Rpb246IElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhbiBhcnJheSwgYSBidW5jaCBvZiB0cmFuc2xhdGlvbnMgd2FzIHJlcXVlc3RlZC5cbiAgICAgICAgLy8gVGhlIHJlc3VsdCBpcyBhbiBvYmplY3QuXG4gICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkodHJhbnNsYXRpb25JZCkpIHtcbiAgICAgICAgICAvLyBJbnNwaXJlZCBieSBRLmFsbFNldHRsZWQgYnkgS3JpcyBLb3dhbFxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS9ibG9iL2IwZmE3Mjk4MDcxN2RjMjAyZmZjM2NiZjAzYjkzNmUxMGViYmI5ZDcvcS5qcyNMMTU1My0xNTYzXG4gICAgICAgICAgLy8gVGhpcyB0cmFuc2Zvcm1zIGFsbCBwcm9taXNlcyByZWdhcmRsZXNzIHJlc29sdmVkIG9yIHJlamVjdGVkXG4gICAgICAgICAgdmFyIHRyYW5zbGF0ZUFsbCA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkcykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTsgLy8gc3RvcmluZyB0aGUgYWN0dWFsIHJlc3VsdHNcbiAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdOyAvLyBwcm9taXNlcyB0byB3YWl0IGZvclxuICAgICAgICAgICAgLy8gV3JhcHMgdGhlIHByb21pc2UgYSkgYmVpbmcgYWx3YXlzIHJlc29sdmVkIGFuZCBiKSBzdG9yaW5nIHRoZSBsaW5rIGlkLT52YWx1ZVxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgIHZhciByZWdhcmRsZXNzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0c1t0cmFuc2xhdGlvbklkXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoW3RyYW5zbGF0aW9uSWQsIHZhbHVlXSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIC8vIHdlIGRvbid0IGNhcmUgd2hldGhlciB0aGUgcHJvbWlzZSB3YXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQ7IGp1c3Qgc3RvcmUgdGhlIHZhbHVlc1xuICAgICAgICAgICAgICAkdHJhbnNsYXRlKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQsIGRlZmF1bHRUcmFuc2xhdGlvblRleHQpLnRoZW4ocmVnYXJkbGVzcywgcmVnYXJkbGVzcyk7XG4gICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjID0gdHJhbnNsYXRpb25JZHMubGVuZ3RoOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2godHJhbnNsYXRlKHRyYW5zbGF0aW9uSWRzW2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB3YWl0IGZvciBhbGwgKGluY2x1ZGluZyBzdG9yaW5nIHRvIHJlc3VsdHMpXG4gICAgICAgICAgICByZXR1cm4gJHEuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSByZXN1bHRzXG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlQWxsKHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAvLyB0cmltIG9mZiBhbnkgd2hpdGVzcGFjZVxuICAgICAgICBpZiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSB0cmltLmFwcGx5KHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb21pc2VUb1dhaXRGb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBwcm9taXNlID0gJHByZWZlcnJlZExhbmd1YWdlID9cbiAgICAgICAgICAgIGxhbmdQcm9taXNlc1skcHJlZmVycmVkTGFuZ3VhZ2VdIDpcbiAgICAgICAgICAgIGxhbmdQcm9taXNlc1skdXNlc107XG5cbiAgICAgICAgICBmYWxsYmFja0luZGV4ID0gMDtcblxuICAgICAgICAgIGlmICgkc3RvcmFnZUZhY3RvcnkgJiYgIXByb21pc2UpIHtcbiAgICAgICAgICAgIC8vIGxvb2tzIGxpa2UgdGhlcmUncyBubyBwZW5kaW5nIHByb21pc2UgZm9yICRwcmVmZXJyZWRMYW5ndWFnZSBvclxuICAgICAgICAgICAgLy8gJHVzZXMuIE1heWJlIHRoZXJlJ3Mgb25lIHBlbmRpbmcgZm9yIGEgbGFuZ3VhZ2UgdGhhdCBjb21lcyBmcm9tXG4gICAgICAgICAgICAvLyBzdG9yYWdlLlxuICAgICAgICAgICAgdmFyIGxhbmdLZXkgPSBTdG9yYWdlLmdldCgkc3RvcmFnZUtleSk7XG4gICAgICAgICAgICBwcm9taXNlID0gbGFuZ1Byb21pc2VzW2xhbmdLZXldO1xuXG4gICAgICAgICAgICBpZiAoJGZhbGxiYWNrTGFuZ3VhZ2UgJiYgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhPZigkZmFsbGJhY2tMYW5ndWFnZSwgbGFuZ0tleSk7XG4gICAgICAgICAgICAgICAgLy8gbWF5YmUgdGhlIGxhbmd1YWdlIGZyb20gc3RvcmFnZSBpcyBhbHNvIGRlZmluZWQgYXMgZmFsbGJhY2sgbGFuZ3VhZ2VcbiAgICAgICAgICAgICAgICAvLyB3ZSBpbmNyZWFzZSB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2UgaW5kZXggdG8gbm90IHNlYXJjaCBpbiB0aGF0IGxhbmd1YWdlXG4gICAgICAgICAgICAgICAgLy8gYXMgZmFsbGJhY2ssIHNpbmNlIGl0J3MgcHJvYmFibHkgdGhlIGZpcnN0IHVzZWQgbGFuZ3VhZ2VcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2UgdGhlIGluZGV4IHN0YXJ0cyBhZnRlciB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgICAgIGZhbGxiYWNrSW5kZXggPSAoaW5kZXggPT09IDApID8gMSA6IDA7XG5cbiAgICAgICAgICAgICAgICAvLyBidXQgd2UgY2FuIG1ha2Ugc3VyZSB0byBBTFdBWVMgZmFsbGJhY2sgdG8gcHJlZmVycmVkIGxhbmd1YWdlIGF0IGxlYXN0XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4T2YoJGZhbGxiYWNrTGFuZ3VhZ2UsICRwcmVmZXJyZWRMYW5ndWFnZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZS5wdXNoKCRwcmVmZXJyZWRMYW5ndWFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfSgpKTtcblxuICAgICAgICBpZiAoIXByb21pc2VUb1dhaXRGb3IpIHtcbiAgICAgICAgICAvLyBubyBwcm9taXNlIHRvIHdhaXQgZm9yPyBva2F5LiBUaGVuIHRoZXJlJ3Mgbm8gbG9hZGVyIHJlZ2lzdGVyZWRcbiAgICAgICAgICAvLyBub3IgaXMgYSBvbmUgcGVuZGluZyBmb3IgbGFuZ3VhZ2UgdGhhdCBjb21lcyBmcm9tIHN0b3JhZ2UuXG4gICAgICAgICAgLy8gV2UgY2FuIGp1c3QgdHJhbnNsYXRlLlxuICAgICAgICAgIGRldGVybWluZVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQsIGRlZmF1bHRUcmFuc2xhdGlvblRleHQpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9taXNlVG9XYWl0Rm9yWydmaW5hbGx5J10oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGV0ZXJtaW5lVHJhbnNsYXRpb24odHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCwgZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCkudGhlbihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSBhcHBseU5vdEZvdW5kSW5kaWNhdG9yc1xuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFwcGxpZXMgbm90IGZvdW50IGluZGljYXRvcnMgdG8gZ2l2ZW4gdHJhbnNsYXRpb24gaWQsIGlmIG5lZWRlZC5cbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gZ2V0cyBvbmx5IGV4ZWN1dGVkLCBpZiBhIHRyYW5zbGF0aW9uIGlkIGRvZXNuJ3QgZXhpc3QsXG4gICAgICAgKiB3aGljaCBpcyB3aHkgYSB0cmFuc2xhdGlvbiBpZCBpcyBleHBlY3RlZCBhcyBhcmd1bWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb25JZCBUcmFuc2xhdGlvbiBpZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFNhbWUgYXMgZ2l2ZW4gdHJhbnNsYXRpb24gaWQgYnV0IGFwcGxpZWQgd2l0aCBub3QgZm91bmRcbiAgICAgICAqIGluZGljYXRvcnMuXG4gICAgICAgKi9cbiAgICAgIHZhciBhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgIC8vIGFwcGx5aW5nIG5vdEZvdW5kSW5kaWNhdG9yc1xuICAgICAgICBpZiAoJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSBbJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCwgdHJhbnNsYXRpb25JZF0uam9pbignICcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbm90Rm91bmRJbmRpY2F0b3JSaWdodCkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSBbdHJhbnNsYXRpb25JZCwgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHRdLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgdXNlTGFuZ3VhZ2VcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBNYWtlcyBhY3R1YWwgdXNlIG9mIGEgbGFuZ3VhZ2UgYnkgc2V0dGluZyBhIGdpdmVuIGxhbmd1YWdlIGtleSBhcyB1c2VkXG4gICAgICAgKiBsYW5ndWFnZSBhbmQgaW5mb3JtcyByZWdpc3RlcmVkIGludGVycG9sYXRvcnMgdG8gYWxzbyB1c2UgdGhlIGdpdmVuXG4gICAgICAgKiBrZXkgYXMgbG9jYWxlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7a2V5fSBMb2NhbGUga2V5LlxuICAgICAgICovXG4gICAgICB2YXIgdXNlTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICR1c2VzID0ga2V5O1xuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlQ2hhbmdlU3VjY2VzcycsIHtsYW5ndWFnZToga2V5fSk7XG5cbiAgICAgICAgaWYgKCRzdG9yYWdlRmFjdG9yeSkge1xuICAgICAgICAgIFN0b3JhZ2UucHV0KCR0cmFuc2xhdGUuc3RvcmFnZUtleSgpLCAkdXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5mb3JtIGRlZmF1bHQgaW50ZXJwb2xhdG9yXG4gICAgICAgIGRlZmF1bHRJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCR1c2VzKTtcbiAgICAgICAgLy8gaW5mb3JtIGFsbCBvdGhlcnMgdG9vIVxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaW50ZXJwb2xhdG9ySGFzaE1hcCwgZnVuY3Rpb24gKGludGVycG9sYXRvciwgaWQpIHtcbiAgICAgICAgICBpbnRlcnBvbGF0b3JIYXNoTWFwW2lkXS5zZXRMb2NhbGUoJHVzZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZUVuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lIGxvYWRBc3luY1xuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEtpY2tzIG9mIHJlZ2lzdGVyZWQgYXN5bmMgbG9hZGVyIHVzaW5nIGAkaW5qZWN0b3JgIGFuZCBhcHBsaWVzIGV4aXN0aW5nXG4gICAgICAgKiBsb2FkZXIgb3B0aW9ucy4gV2hlbiByZXNvbHZlZCwgaXQgdXBkYXRlcyB0cmFuc2xhdGlvbiB0YWJsZXMgYWNjb3JkaW5nbHlcbiAgICAgICAqIG9yIHJlamVjdHMgd2l0aCBnaXZlbiBsYW5ndWFnZSBrZXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBMYW5ndWFnZSBrZXkuXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIHZhciBsb2FkQXN5bmMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgdGhyb3cgJ05vIGxhbmd1YWdlIGtleSBzcGVjaWZpZWQgZm9yIGxvYWRpbmcuJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUxvYWRpbmdTdGFydCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIHBlbmRpbmdMb2FkZXIgPSB0cnVlO1xuXG4gICAgICAgIHZhciBjYWNoZSA9IGxvYWRlckNhY2hlO1xuICAgICAgICBpZiAodHlwZW9mKGNhY2hlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBnZXR0aW5nIG9uLWRlbWFuZCBpbnN0YW5jZSBvZiBsb2FkZXJcbiAgICAgICAgICBjYWNoZSA9ICRpbmplY3Rvci5nZXQoY2FjaGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvYWRlck9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgJGxvYWRlck9wdGlvbnMsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAkaHR0cDogYW5ndWxhci5leHRlbmQoe30sIHtcbiAgICAgICAgICAgIGNhY2hlOiBjYWNoZVxuICAgICAgICAgIH0sICRsb2FkZXJPcHRpb25zLiRodHRwKVxuICAgICAgICB9KTtcblxuICAgICAgICAkaW5qZWN0b3IuZ2V0KCRsb2FkZXJGYWN0b3J5KShsb2FkZXJPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdmFyIHRyYW5zbGF0aW9uVGFibGUgPSB7fTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ1N1Y2Nlc3MnLCB7bGFuZ3VhZ2U6IGtleX0pO1xuXG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0cmFuc2xhdGlvblRhYmxlLCBmbGF0T2JqZWN0KHRhYmxlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodHJhbnNsYXRpb25UYWJsZSwgZmxhdE9iamVjdChkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBlbmRpbmdMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdGFibGU6IHRyYW5zbGF0aW9uVGFibGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0VuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0Vycm9yJywge2xhbmd1YWdlOiBrZXl9KTtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoa2V5KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0VuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIGlmICgkc3RvcmFnZUZhY3RvcnkpIHtcbiAgICAgICAgU3RvcmFnZSA9ICRpbmplY3Rvci5nZXQoJHN0b3JhZ2VGYWN0b3J5KTtcblxuICAgICAgICBpZiAoIVN0b3JhZ2UuZ2V0IHx8ICFTdG9yYWdlLnB1dCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGRuXFwndCB1c2Ugc3RvcmFnZSBcXCcnICsgJHN0b3JhZ2VGYWN0b3J5ICsgJ1xcJywgbWlzc2luZyBnZXQoKSBvciBwdXQoKSBtZXRob2QhJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYWRkaXRpb25hbCBzZXR0aW5nc1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihkZWZhdWx0SW50ZXJwb2xhdG9yLnVzZVNhbml0aXplVmFsdWVTdHJhdGVneSkpIHtcbiAgICAgICAgZGVmYXVsdEludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koJGludGVycG9sYXRpb25TYW5pdGl6YXRpb25TdHJhdGVneSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGhhdmUgYWRkaXRpb25hbCBpbnRlcnBvbGF0aW9ucyB0aGF0IHdlcmUgYWRkZWQgdmlhXG4gICAgICAvLyAkdHJhbnNsYXRlUHJvdmlkZXIuYWRkSW50ZXJwb2xhdGlvbigpLCB3ZSBoYXZlIHRvIG1hcCdlbVxuICAgICAgaWYgKCRpbnRlcnBvbGF0b3JGYWN0b3JpZXMubGVuZ3RoKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkaW50ZXJwb2xhdG9yRmFjdG9yaWVzLCBmdW5jdGlvbiAoaW50ZXJwb2xhdG9yRmFjdG9yeSkge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0b3IgPSAkaW5qZWN0b3IuZ2V0KGludGVycG9sYXRvckZhY3RvcnkpO1xuICAgICAgICAgIC8vIHNldHRpbmcgaW5pdGlhbCBsb2NhbGUgZm9yIGVhY2ggaW50ZXJwb2xhdGlvbiBzZXJ2aWNlXG4gICAgICAgICAgaW50ZXJwb2xhdG9yLnNldExvY2FsZSgkcHJlZmVycmVkTGFuZ3VhZ2UgfHwgJHVzZXMpO1xuICAgICAgICAgIC8vIGFwcGx5IGFkZGl0aW9uYWwgc2V0dGluZ3NcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBtYWtlJ2VtIHJlY29nbml6YWJsZSB0aHJvdWdoIGlkXG4gICAgICAgICAgaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0b3IuZ2V0SW50ZXJwb2xhdGlvbklkZW50aWZpZXIoKV0gPSBpbnRlcnBvbGF0b3I7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lIGdldFRyYW5zbGF0aW9uVGFibGVcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSB0cmFuc2xhdGlvbiB0YWJsZVxuICAgICAgICogb3IgaXMgcmVqZWN0ZWQgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIGxhbmdLZXlcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9XG4gICAgICAgKi9cbiAgICAgIHZhciBnZXRUcmFuc2xhdGlvblRhYmxlID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgkdHJhbnNsYXRpb25UYWJsZSwgbGFuZ0tleSkpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYW5nUHJvbWlzZXNbbGFuZ0tleV0pIHtcbiAgICAgICAgICBsYW5nUHJvbWlzZXNbbGFuZ0tleV0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdHJhbnNsYXRpb25zKGRhdGEua2V5LCBkYXRhLnRhYmxlKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YS50YWJsZSk7XG4gICAgICAgICAgfSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgZ2V0RmFsbGJhY2tUcmFuc2xhdGlvblxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHRvIHRoZSB0cmFuc2xhdGlvblxuICAgICAgICogb3IgYmUgcmVqZWN0ZWQgaWYgbm8gdHJhbnNsYXRpb24gd2FzIGZvdW5kIGZvciB0aGUgbGFuZ3VhZ2UuXG4gICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHVzZWQgZm9yIGZhbGxiYWNrIGxhbmd1YWdlIHRyYW5zbGF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBsYW5nS2V5IFRoZSBsYW5ndWFnZSB0byB0cmFuc2xhdGUgdG8uXG4gICAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb25JZFxuICAgICAgICogQHBhcmFtIGludGVycG9sYXRlUGFyYW1zXG4gICAgICAgKiBAcGFyYW0gSW50ZXJwb2xhdG9yXG4gICAgICAgKiBAcmV0dXJucyB7US5wcm9taXNlfVxuICAgICAgICovXG4gICAgICB2YXIgZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uIChsYW5nS2V5LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgZ2V0VHJhbnNsYXRpb25UYWJsZShsYW5nS2V5KS50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0cmFuc2xhdGlvblRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgSW50ZXJwb2xhdG9yLnNldExvY2FsZShsYW5nS2V5KTtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uVGFibGVbdHJhbnNsYXRpb25JZF07XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb24uc3Vic3RyKDAsIDIpID09PSAnQDonKSB7XG4gICAgICAgICAgICAgIGdldEZhbGxiYWNrVHJhbnNsYXRpb24obGFuZ0tleSwgdHJhbnNsYXRpb24uc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKVxuICAgICAgICAgICAgICAgIC50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvblRhYmxlW3RyYW5zbGF0aW9uSWRdLCBpbnRlcnBvbGF0ZVBhcmFtcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSW50ZXJwb2xhdG9yLnNldExvY2FsZSgkdXNlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZGVmZXJyZWQucmVqZWN0KTtcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnRcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIGEgdHJhbnNsYXRpb25cbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY3VycmVudGx5IG9ubHkgdXNlZCBmb3IgZmFsbGJhY2sgbGFuZ3VhZ2UgdHJhbnNsYXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIGxhbmdLZXkgVGhlIGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSB0by5cbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRyYW5zbGF0aW9uXG4gICAgICAgKi9cbiAgICAgIHZhciBnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCA9IGZ1bmN0aW9uIChsYW5nS2V5LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIHZhciByZXN1bHQsIHRyYW5zbGF0aW9uVGFibGUgPSAkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XTtcblxuICAgICAgICBpZiAodHJhbnNsYXRpb25UYWJsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHJhbnNsYXRpb25UYWJsZSwgdHJhbnNsYXRpb25JZCkpIHtcbiAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKGxhbmdLZXkpO1xuICAgICAgICAgIHJlc3VsdCA9IEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvblRhYmxlW3RyYW5zbGF0aW9uSWRdLCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5zdWJzdHIoMCwgMikgPT09ICdAOicpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudChsYW5nS2V5LCByZXN1bHQuc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgSW50ZXJwb2xhdG9yLnNldExvY2FsZSgkdXNlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lIHRyYW5zbGF0ZUJ5SGFuZGxlclxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBUcmFuc2xhdGUgYnkgbWlzc2luZyB0cmFuc2xhdGlvbiBoYW5kbGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcmV0dXJucyB0cmFuc2xhdGlvbiBjcmVhdGVkIGJ5ICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyIG9yIHRyYW5zbGF0aW9uSWQgaXMgJG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgaXNcbiAgICAgICAqIGFic2VudFxuICAgICAgICovXG4gICAgICB2YXIgdHJhbnNsYXRlQnlIYW5kbGVyID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBoYW5kbGVyIGZhY3RvcnkgLSB3ZSBtaWdodCBhbHNvIGNhbGwgaXQgaGVyZSB0byBkZXRlcm1pbmUgaWYgaXQgcHJvdmlkZXNcbiAgICAgICAgLy8gYSBkZWZhdWx0IHRleHQgZm9yIGEgdHJhbnNsYXRpb25pZCB0aGF0IGNhbid0IGJlIGZvdW5kIGFueXdoZXJlIGluIG91ciB0YWJsZXNcbiAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSkge1xuICAgICAgICAgIHZhciByZXN1bHRTdHJpbmcgPSAkaW5qZWN0b3IuZ2V0KCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSkodHJhbnNsYXRpb25JZCwgJHVzZXMsIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICBpZiAocmVzdWx0U3RyaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRTdHJpbmc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGlvbklkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBSZWN1cnNpdmUgaGVscGVyIGZ1bmN0aW9uIGZvciBmYWxsYmFja1RyYW5zbGF0aW9uIHRoYXQgd2lsbCBzZXF1ZW50aWFsbHkgbG9va1xuICAgICAgICogZm9yIGEgdHJhbnNsYXRpb24gaW4gdGhlIGZhbGxiYWNrTGFuZ3VhZ2VzIHN0YXJ0aW5nIHdpdGggZmFsbGJhY2tMYW5ndWFnZUluZGV4LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBmYWxsYmFja0xhbmd1YWdlSW5kZXhcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9IFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgdG8gdGhlIHRyYW5zbGF0aW9uLlxuICAgICAgICovXG4gICAgICB2YXIgcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoZmFsbGJhY2tMYW5ndWFnZUluZGV4LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgaWYgKGZhbGxiYWNrTGFuZ3VhZ2VJbmRleCA8ICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBsYW5nS2V5ID0gJGZhbGxiYWNrTGFuZ3VhZ2VbZmFsbGJhY2tMYW5ndWFnZUluZGV4XTtcbiAgICAgICAgICBnZXRGYWxsYmFja1RyYW5zbGF0aW9uKGxhbmdLZXksIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpLnRoZW4oXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBMb29rIGluIHRoZSBuZXh0IGZhbGxiYWNrIGxhbmd1YWdlIGZvciBhIHRyYW5zbGF0aW9uLlxuICAgICAgICAgICAgICAvLyBJdCBkZWxheXMgdGhlIHJlc29sdmluZyBieSBwYXNzaW5nIGFub3RoZXIgcHJvbWlzZSB0byByZXNvbHZlLlxuICAgICAgICAgICAgICByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZShmYWxsYmFja0xhbmd1YWdlSW5kZXggKyAxLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KS50aGVuKGRlZmVycmVkLnJlc29sdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTm8gdHJhbnNsYXRpb24gZm91bmQgaW4gYW55IGZhbGxiYWNrIGxhbmd1YWdlXG4gICAgICAgICAgLy8gaWYgYSBkZWZhdWx0IHRyYW5zbGF0aW9uIHRleHQgaXMgc2V0IGluIHRoZSBkaXJlY3RpdmUsIHRoZW4gcmV0dXJuIHRoaXMgYXMgYSByZXN1bHRcbiAgICAgICAgICBpZiAoZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkZWZhdWx0VHJhbnNsYXRpb25UZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgbm8gZGVmYXVsdCB0cmFuc2xhdGlvbiBpcyBzZXQgYW5kIGFuIGVycm9yIGhhbmRsZXIgaXMgZGVmaW5lZCwgc2VuZCBpdCB0byB0aGUgaGFuZGxlclxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gcmV0dXJuIHRoZSByZXN1bHRcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJhbnNsYXRlQnlIYW5kbGVyKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZUluc3RhbnRcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogUmVjdXJzaXZlIGhlbHBlciBmdW5jdGlvbiBmb3IgZmFsbGJhY2tUcmFuc2xhdGlvbiB0aGF0IHdpbGwgc2VxdWVudGlhbGx5IGxvb2tcbiAgICAgICAqIGZvciBhIHRyYW5zbGF0aW9uIGluIHRoZSBmYWxsYmFja0xhbmd1YWdlcyBzdGFydGluZyB3aXRoIGZhbGxiYWNrTGFuZ3VhZ2VJbmRleC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gZmFsbGJhY2tMYW5ndWFnZUluZGV4XG4gICAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb25JZFxuICAgICAgICogQHBhcmFtIGludGVycG9sYXRlUGFyYW1zXG4gICAgICAgKiBAcGFyYW0gSW50ZXJwb2xhdG9yXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0cmFuc2xhdGlvblxuICAgICAgICovXG4gICAgICB2YXIgcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2VJbnN0YW50ID0gZnVuY3Rpb24gKGZhbGxiYWNrTGFuZ3VhZ2VJbmRleCwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIGlmIChmYWxsYmFja0xhbmd1YWdlSW5kZXggPCAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgbGFuZ0tleSA9ICRmYWxsYmFja0xhbmd1YWdlW2ZhbGxiYWNrTGFuZ3VhZ2VJbmRleF07XG4gICAgICAgICAgcmVzdWx0ID0gZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnQobGFuZ0tleSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlSW5zdGFudChmYWxsYmFja0xhbmd1YWdlSW5kZXggKyAxLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNsYXRlcyB3aXRoIHRoZSB1c2FnZSBvZiB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9IFByb21pc2UsIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zbGF0aW9uLlxuICAgICAgICovXG4gICAgICB2YXIgZmFsbGJhY2tUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KSB7XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIGZhbGxiYWNrTGFuZ3VhZ2Ugd2l0aCBpbmRleCAwXG4gICAgICAgIHJldHVybiByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZSgoc3RhcnRGYWxsYmFja0l0ZXJhdGlvbj4wID8gc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA6IGZhbGxiYWNrSW5kZXgpLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNsYXRlcyB3aXRoIHRoZSB1c2FnZSBvZiB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRyYW5zbGF0aW9uXG4gICAgICAgKi9cbiAgICAgIHZhciBmYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIGZhbGxiYWNrTGFuZ3VhZ2Ugd2l0aCBpbmRleCAwXG4gICAgICAgIHJldHVybiByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZUluc3RhbnQoKHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24+MCA/IHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24gOiBmYWxsYmFja0luZGV4KSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZGV0ZXJtaW5lVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCwgZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCkge1xuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgdmFyIHRhYmxlID0gJHVzZXMgPyAkdHJhbnNsYXRpb25UYWJsZVskdXNlc10gOiAkdHJhbnNsYXRpb25UYWJsZSxcbiAgICAgICAgICAgIEludGVycG9sYXRvciA9IChpbnRlcnBvbGF0aW9uSWQpID8gaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0aW9uSWRdIDogZGVmYXVsdEludGVycG9sYXRvcjtcblxuICAgICAgICAvLyBpZiB0aGUgdHJhbnNsYXRpb24gaWQgZXhpc3RzLCB3ZSBjYW4ganVzdCBpbnRlcnBvbGF0ZSBpdFxuICAgICAgICBpZiAodGFibGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRhYmxlW3RyYW5zbGF0aW9uSWRdO1xuXG4gICAgICAgICAgLy8gSWYgdXNpbmcgbGluaywgcmVydW4gJHRyYW5zbGF0ZSB3aXRoIGxpbmtlZCB0cmFuc2xhdGlvbklkIGFuZCByZXR1cm4gaXRcbiAgICAgICAgICBpZiAodHJhbnNsYXRpb24uc3Vic3RyKDAsIDIpID09PSAnQDonKSB7XG5cbiAgICAgICAgICAgICR0cmFuc2xhdGUodHJhbnNsYXRpb24uc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KVxuICAgICAgICAgICAgICAudGhlbihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvbiwgaW50ZXJwb2xhdGVQYXJhbXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJUcmFuc2xhdGlvbjtcbiAgICAgICAgICAvLyBmb3IgbG9nZ2luZyBwdXJwb3NlcyBvbmx5IChhcyBpbiAkdHJhbnNsYXRlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZyksIHZhbHVlIGlzIG5vdCByZXR1cm5lZCB0byBwcm9taXNlXG4gICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uID0gdHJhbnNsYXRlQnlIYW5kbGVyKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzaW5jZSB3ZSBjb3VsZG4ndCB0cmFuc2xhdGUgdGhlIGluaXRhbCByZXF1ZXN0ZWQgdHJhbnNsYXRpb24gaWQsXG4gICAgICAgICAgLy8gd2UgdHJ5IGl0IG5vdyB3aXRoIG9uZSBvciBtb3JlIGZhbGxiYWNrIGxhbmd1YWdlcywgaWYgZmFsbGJhY2sgbGFuZ3VhZ2UocykgaXNcbiAgICAgICAgICAvLyBjb25maWd1cmVkLlxuICAgICAgICAgIGlmICgkdXNlcyAmJiAkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZhbGxiYWNrVHJhbnNsYXRpb24odHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvciwgZGVmYXVsdFRyYW5zbGF0aW9uVGV4dClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChfdHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGFwcGx5Tm90Rm91bmRJbmRpY2F0b3JzKF90cmFuc2xhdGlvbklkKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckZhY3RvcnkgJiYgIXBlbmRpbmdMb2FkZXIgJiYgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAvLyBsb29rcyBsaWtlIHRoZSByZXF1ZXN0ZWQgdHJhbnNsYXRpb24gaWQgZG9lc24ndCBleGlzdHMuXG4gICAgICAgICAgICAvLyBOb3csIGlmIHRoZXJlIGlzIGEgcmVnaXN0ZXJlZCBoYW5kbGVyIGZvciBtaXNzaW5nIHRyYW5zbGF0aW9ucyBhbmQgbm9cbiAgICAgICAgICAgIC8vIGFzeW5jTG9hZGVyIGlzIHBlbmRpbmcsIHdlIGV4ZWN1dGUgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgIGlmIChkZWZhdWx0VHJhbnNsYXRpb25UZXh0KSB7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0VHJhbnNsYXRpb25UZXh0KSB7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoYXBwbHlOb3RGb3VuZEluZGljYXRvcnModHJhbnNsYXRpb25JZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBkZXRlcm1pbmVUcmFuc2xhdGlvbkluc3RhbnQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkge1xuXG4gICAgICAgIHZhciByZXN1bHQsIHRhYmxlID0gJHVzZXMgPyAkdHJhbnNsYXRpb25UYWJsZVskdXNlc10gOiAkdHJhbnNsYXRpb25UYWJsZSxcbiAgICAgICAgICAgIEludGVycG9sYXRvciA9IGRlZmF1bHRJbnRlcnBvbGF0b3I7XG5cbiAgICAgICAgLy8gaWYgdGhlIGludGVycG9sYXRpb24gaWQgZXhpc3RzIHVzZSBjdXN0b20gaW50ZXJwb2xhdG9yXG4gICAgICAgIGlmIChpbnRlcnBvbGF0b3JIYXNoTWFwICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnRlcnBvbGF0b3JIYXNoTWFwLCBpbnRlcnBvbGF0aW9uSWQpKSB7XG4gICAgICAgICAgSW50ZXJwb2xhdG9yID0gaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0aW9uSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlIHRyYW5zbGF0aW9uIGlkIGV4aXN0cywgd2UgY2FuIGp1c3QgaW50ZXJwb2xhdGUgaXRcbiAgICAgICAgaWYgKHRhYmxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YWJsZSwgdHJhbnNsYXRpb25JZCkpIHtcbiAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSB0YWJsZVt0cmFuc2xhdGlvbklkXTtcblxuICAgICAgICAgIC8vIElmIHVzaW5nIGxpbmssIHJlcnVuICR0cmFuc2xhdGUgd2l0aCBsaW5rZWQgdHJhbnNsYXRpb25JZCBhbmQgcmV0dXJuIGl0XG4gICAgICAgICAgaWYgKHRyYW5zbGF0aW9uLnN1YnN0cigwLCAyKSA9PT0gJ0A6Jykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZGV0ZXJtaW5lVHJhbnNsYXRpb25JbnN0YW50KHRyYW5zbGF0aW9uLnN1YnN0cigyKSwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvbiwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uO1xuICAgICAgICAgIC8vIGZvciBsb2dnaW5nIHB1cnBvc2VzIG9ubHkgKGFzIGluICR0cmFuc2xhdGVNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nKSwgdmFsdWUgaXMgbm90IHJldHVybmVkIHRvIHByb21pc2VcbiAgICAgICAgICBpZiAoJG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJGYWN0b3J5ICYmICFwZW5kaW5nTG9hZGVyKSB7XG4gICAgICAgICAgICBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24gPSB0cmFuc2xhdGVCeUhhbmRsZXIodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNpbmNlIHdlIGNvdWxkbid0IHRyYW5zbGF0ZSB0aGUgaW5pdGFsIHJlcXVlc3RlZCB0cmFuc2xhdGlvbiBpZCxcbiAgICAgICAgICAvLyB3ZSB0cnkgaXQgbm93IHdpdGggb25lIG9yIG1vcmUgZmFsbGJhY2sgbGFuZ3VhZ2VzLCBpZiBmYWxsYmFjayBsYW5ndWFnZShzKSBpc1xuICAgICAgICAgIC8vIGNvbmZpZ3VyZWQuXG4gICAgICAgICAgaWYgKCR1c2VzICYmICRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgZmFsbGJhY2tJbmRleCA9IDA7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlciAmJiBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIC8vIGxvb2tzIGxpa2UgdGhlIHJlcXVlc3RlZCB0cmFuc2xhdGlvbiBpZCBkb2Vzbid0IGV4aXN0cy5cbiAgICAgICAgICAgIC8vIE5vdywgaWYgdGhlcmUgaXMgYSByZWdpc3RlcmVkIGhhbmRsZXIgZm9yIG1pc3NpbmcgdHJhbnNsYXRpb25zIGFuZCBub1xuICAgICAgICAgICAgLy8gYXN5bmNMb2FkZXIgaXMgcGVuZGluZywgd2UgZXhlY3V0ZSB0aGUgaGFuZGxlclxuICAgICAgICAgICAgcmVzdWx0ID0gbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgdmFyIGNsZWFyTmV4dExhbmdBbmRQcm9taXNlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmICgkbmV4dExhbmcgPT09IGtleSkge1xuICAgICAgICAgICRuZXh0TGFuZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsYW5nUHJvbWlzZXNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjcHJlZmVycmVkTGFuZ3VhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGtleSBmb3IgdGhlIHByZWZlcnJlZCBsYW5ndWFnZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ0tleSBsYW5ndWFnZSBTdHJpbmcgb3IgQXJyYXkgdG8gYmUgdXNlZCBhcyBwcmVmZXJyZWRMYW5ndWFnZSAoY2hhbmdpbmcgYXQgcnVudGltZSlcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByZWZlcnJlZCBsYW5ndWFnZSBrZXlcbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5wcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgIGlmKGxhbmdLZXkpIHtcbiAgICAgICAgICBzZXR1cFByZWZlcnJlZExhbmd1YWdlKGxhbmdLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcHJlZmVycmVkTGFuZ3VhZ2U7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2Nsb2FrQ2xhc3NOYW1lXG4gICAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmVkIGNsYXNzIG5hbWUgZm9yIGB0cmFuc2xhdGUtY2xvYWtgIGRpcmVjdGl2ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGNsb2FrQ2xhc3NOYW1lXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUuY2xvYWtDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2ZhbGxiYWNrTGFuZ3VhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGtleSBmb3IgdGhlIGZhbGxiYWNrIGxhbmd1YWdlcyBvciBzZXRzIGEgbmV3IGZhbGxiYWNrIHN0YWNrLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFuZ0tleSBsYW5ndWFnZSBTdHJpbmcgb3IgQXJyYXkgb2YgZmFsbGJhY2sgbGFuZ3VhZ2VzIHRvIGJlIHVzZWQgKHRvIGNoYW5nZSBzdGFjayBhdCBydW50aW1lKVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ3x8YXJyYXl9IGZhbGxiYWNrIGxhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLmZhbGxiYWNrTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgICAgICBpZiAobGFuZ0tleSAhPT0gdW5kZWZpbmVkICYmIGxhbmdLZXkgIT09IG51bGwpIHtcbiAgICAgICAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuXG4gICAgICAgICAgLy8gYXMgd2UgbWlnaHQgaGF2ZSBhbiBhc3luYyBsb2FkZXIgaW5pdGlhdGVkIGFuZCBhIG5ldyB0cmFuc2xhdGlvbiBsYW5ndWFnZSBtaWdodCBoYXZlIGJlZW4gZGVmaW5lZFxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYWRkIHRoZSBwcm9taXNlIHRvIHRoZSBzdGFjayBhbHNvLiBTbyAtIGl0ZXJhdGUuXG4gICAgICAgICAgaWYgKCRsb2FkZXJGYWN0b3J5KSB7XG4gICAgICAgICAgICBpZiAoJGZhbGxiYWNrTGFuZ3VhZ2UgJiYgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghbGFuZ1Byb21pc2VzWyRmYWxsYmFja0xhbmd1YWdlW2ldXSkge1xuICAgICAgICAgICAgICAgICAgbGFuZ1Byb21pc2VzWyRmYWxsYmFja0xhbmd1YWdlW2ldXSA9IGxvYWRBc3luYygkZmFsbGJhY2tMYW5ndWFnZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICR0cmFuc2xhdGUudXNlKCR0cmFuc2xhdGUudXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZmFsbGJhY2tXYXNTdHJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gJGZhbGxiYWNrTGFuZ3VhZ2VbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmYWxsYmFja0xhbmd1YWdlO1xuICAgICAgICB9XG5cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjdXNlRmFsbGJhY2tMYW5ndWFnZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2V0cyB0aGUgZmlyc3Qga2V5IG9mIHRoZSBmYWxsYmFjayBsYW5ndWFnZSBzdGFjayB0byBiZSB1c2VkIGZvciB0cmFuc2xhdGlvbi5cbiAgICAgICAqIFRoZXJlZm9yZSBhbGwgbGFuZ3VhZ2VzIGluIHRoZSBmYWxsYmFjayBhcnJheSBCRUZPUkUgdGhpcyBrZXkgd2lsbCBiZSBza2lwcGVkIVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFuZ0tleSBDb250YWlucyB0aGUgbGFuZ0tleSB0aGUgaXRlcmF0aW9uIHNoYWxsIHN0YXJ0IHdpdGguIFNldCB0byBmYWxzZSBpZiB5b3Ugd2FudCB0b1xuICAgICAgICogZ2V0IGJhY2sgdG8gdGhlIHdob2xlIHN0YWNrXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUudXNlRmFsbGJhY2tMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgIGlmIChsYW5nS2V5ICE9PSB1bmRlZmluZWQgJiYgbGFuZ0tleSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICghbGFuZ0tleSkge1xuICAgICAgICAgICAgc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsYW5nS2V5UG9zaXRpb24gPSBpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCBsYW5nS2V5KTtcbiAgICAgICAgICAgIGlmIChsYW5nS2V5UG9zaXRpb24gPiAtMSkge1xuICAgICAgICAgICAgICBzdGFydEZhbGxiYWNrSXRlcmF0aW9uID0gbGFuZ0tleVBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjcHJvcG9zZWRMYW5ndWFnZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB0aGUgbGFuZ3VhZ2Uga2V5IG9mIGxhbmd1YWdlIHRoYXQgaXMgY3VycmVudGx5IGxvYWRlZCBhc3luY2hyb25vdXNseS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGxhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkbmV4dExhbmc7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI3N0b3JhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgcmVnaXN0ZXJlZCBzdG9yYWdlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge29iamVjdH0gU3RvcmFnZVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSN1c2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHdoaWNoIGxhbmd1YWdlIHRvIHVzZSBieSBnaXZlbiBsYW5ndWFnZSBrZXkuIFRoaXMgbWV0aG9kIGlzXG4gICAgICAgKiB1c2VkIHRvIGNoYW5nZSBsYW5ndWFnZSBhdCBydW50aW1lLiBJdCBhbHNvIHRha2VzIGNhcmUgb2Ygc3RvcmluZyB0aGUgbGFuZ3VhZ2VcbiAgICAgICAqIGtleSBpbiBhIGNvbmZpZ3VyZWQgc3RvcmUgdG8gbGV0IHlvdXIgYXBwIHJlbWVtYmVyIHRoZSBjaG9vc2VkIGxhbmd1YWdlLlxuICAgICAgICpcbiAgICAgICAqIFdoZW4gdHJ5aW5nIHRvICd1c2UnIGEgbGFuZ3VhZ2Ugd2hpY2ggaXNuJ3QgYXZhaWxhYmxlIGl0IHRyaWVzIHRvIGxvYWQgaXRcbiAgICAgICAqIGFzeW5jaHJvbm91c2x5IHdpdGggcmVnaXN0ZXJlZCBsb2FkZXJzLlxuICAgICAgICpcbiAgICAgICAqIFJldHVybnMgcHJvbWlzZSBvYmplY3Qgd2l0aCBsb2FkZWQgbGFuZ3VhZ2UgZmlsZSBkYXRhXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogJHRyYW5zbGF0ZS51c2UoXCJlbl9VU1wiKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICogICAkc2NvcGUudGV4dCA9ICR0cmFuc2xhdGUoXCJIRUxMT1wiKTtcbiAgICAgICAqIH0pO1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTGFuZ3VhZ2Uga2V5XG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IExhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnVzZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICByZXR1cm4gJHVzZXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VTdGFydCcsIHtsYW5ndWFnZToga2V5fSk7XG5cbiAgICAgICAgLy8gVHJ5IHRvIGdldCB0aGUgYWxpYXNlZCBsYW5ndWFnZSBrZXlcbiAgICAgICAgdmFyIGFsaWFzZWRLZXkgPSBuZWdvdGlhdGVMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXNuJ3QgYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgdGhlIGxhbmd1YWdlIHdlJ3ZlIHJlcXVlc3RlZCxcbiAgICAgICAgLy8gd2UgbG9hZCBpdCBhc3luY2hyb25vdXNseVxuICAgICAgICBpZiAoISR0cmFuc2xhdGlvblRhYmxlW2tleV0gJiYgJGxvYWRlckZhY3RvcnkgJiYgIWxhbmdQcm9taXNlc1trZXldKSB7XG4gICAgICAgICAgJG5leHRMYW5nID0ga2V5O1xuICAgICAgICAgIGxhbmdQcm9taXNlc1trZXldID0gbG9hZEFzeW5jKGtleSkudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbi5rZXksIHRyYW5zbGF0aW9uLnRhYmxlKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJhbnNsYXRpb24ua2V5KTtcbiAgICAgICAgICAgIHVzZUxhbmd1YWdlKHRyYW5zbGF0aW9uLmtleSk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZUVycm9yJywge2xhbmd1YWdlOiBrZXl9KTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChrZXkpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZUVuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGFuZ1Byb21pc2VzW2tleV1bJ2ZpbmFsbHknXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbGVhck5leHRMYW5nQW5kUHJvbWlzZShrZXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCRuZXh0TGFuZyA9PT0ga2V5ICYmIGxhbmdQcm9taXNlc1trZXldKSB7XG4gICAgICAgICAgLy8gd2UgYXJlIGFscmVhZHkgbG9hZGluZyB0aGlzIGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAgLy8gcmVzb2x2ZSBvdXIgbmV3IGRlZmVycmVkIHdoZW4gdGhlIG9sZCBsYW5nUHJvbWlzZSBpcyByZXNvbHZlZFxuICAgICAgICAgIGxhbmdQcm9taXNlc1trZXldLnRoZW4oZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRyYW5zbGF0aW9uLmtleSk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGtleSk7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShrZXkpO1xuICAgICAgICAgIHVzZUxhbmd1YWdlKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjc3RvcmFnZUtleVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB0aGUga2V5IGZvciB0aGUgc3RvcmFnZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0b3JhZ2Uga2V5XG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUuc3RvcmFnZUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2VLZXkoKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjaXNQb3N0Q29tcGlsaW5nRW5hYmxlZFxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB3aGV0aGVyIHBvc3QgY29tcGlsaW5nIGlzIGVuYWJsZWQgb3Igbm90XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Ym9vbH0gc3RvcmFnZSBrZXlcbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5pc1Bvc3RDb21waWxpbmdFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHBvc3RDb21waWxpbmdFbmFibGVkO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSNyZWZyZXNoXG4gICAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWZyZXNoZXMgYSB0cmFuc2xhdGlvbiB0YWJsZSBwb2ludGVkIGJ5IHRoZSBnaXZlbiBsYW5nS2V5LiBJZiBsYW5nS2V5IGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICAgKiB0aGUgbW9kdWxlIHdpbGwgZHJvcCBhbGwgZXhpc3RlbnQgdHJhbnNsYXRpb24gdGFibGVzIGFuZCBsb2FkIG5ldyB2ZXJzaW9uIG9mIHRob3NlIHdoaWNoXG4gICAgICAgKiBhcmUgY3VycmVudGx5IGluIHVzZS5cbiAgICAgICAqXG4gICAgICAgKiBSZWZyZXNoIG1lYW5zIHRoYXQgdGhlIG1vZHVsZSB3aWxsIGRyb3AgdGFyZ2V0IHRyYW5zbGF0aW9uIHRhYmxlIGFuZCB0cnkgdG8gbG9hZCBpdCBhZ2Fpbi5cbiAgICAgICAqXG4gICAgICAgKiBJbiBjYXNlIHRoZXJlIGFyZSBubyBsb2FkZXJzIHJlZ2lzdGVyZWQgdGhlIHJlZnJlc2goKSBtZXRob2Qgd2lsbCB0aHJvdyBhbiBFcnJvci5cbiAgICAgICAqXG4gICAgICAgKiBJZiB0aGUgbW9kdWxlIGlzIGFibGUgdG8gcmVmcmVzaCB0cmFuc2xhdGlvbiB0YWJsZXMgcmVmcmVzaCgpIG1ldGhvZCB3aWxsIGJyb2FkY2FzdFxuICAgICAgICogJHRyYW5zbGF0ZVJlZnJlc2hTdGFydCBhbmQgJHRyYW5zbGF0ZVJlZnJlc2hFbmQgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiAvLyB0aGlzIHdpbGwgZHJvcCBhbGwgY3VycmVudGx5IGV4aXN0ZW50IHRyYW5zbGF0aW9uIHRhYmxlcyBhbmQgcmVsb2FkIHRob3NlIHdoaWNoIGFyZVxuICAgICAgICogLy8gY3VycmVudGx5IGluIHVzZVxuICAgICAgICogJHRyYW5zbGF0ZS5yZWZyZXNoKCk7XG4gICAgICAgKiAvLyB0aGlzIHdpbGwgcmVmcmVzaCBhIHRyYW5zbGF0aW9uIHRhYmxlIGZvciB0aGUgZW5fVVMgbGFuZ3VhZ2VcbiAgICAgICAqICR0cmFuc2xhdGUucmVmcmVzaCgnZW5fVVMnKTtcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ0tleSBBIGxhbmd1YWdlIGtleSBvZiB0aGUgdGFibGUsIHdoaWNoIGhhcyB0byBiZSByZWZyZXNoZWRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtwcm9taXNlfSBQcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIGluIGNhc2UgYSB0cmFuc2xhdGlvbiB0YWJsZXMgcmVmcmVzaGluZ1xuICAgICAgICogcHJvY2VzcyBpcyBmaW5pc2hlZCBzdWNjZXNzZnVsbHksIGFuZCByZWplY3QgaWYgbm90LlxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnJlZnJlc2ggPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgICAgICBpZiAoISRsb2FkZXJGYWN0b3J5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZG5cXCd0IHJlZnJlc2ggdHJhbnNsYXRpb24gdGFibGUsIG5vIGxvYWRlciByZWdpc3RlcmVkIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlUmVmcmVzaEVuZCcsIHtsYW5ndWFnZTogbGFuZ0tleX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVSZWZyZXNoRW5kJywge2xhbmd1YWdlOiBsYW5nS2V5fSk7XG4gICAgICAgIH1cblxuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlUmVmcmVzaFN0YXJ0Jywge2xhbmd1YWdlOiBsYW5nS2V5fSk7XG5cbiAgICAgICAgaWYgKCFsYW5nS2V5KSB7XG4gICAgICAgICAgLy8gaWYgdGhlcmUncyBubyBsYW5ndWFnZSBrZXkgc3BlY2lmaWVkIHdlIHJlZnJlc2ggQUxMIFRIRSBUSElOR1MhXG4gICAgICAgICAgdmFyIHRhYmxlcyA9IFtdLCBsb2FkaW5nS2V5cyA9IHt9O1xuXG4gICAgICAgICAgLy8gcmVsb2FkIHJlZ2lzdGVyZWQgZmFsbGJhY2sgbGFuZ3VhZ2VzXG4gICAgICAgICAgaWYgKCRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9ICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHRhYmxlcy5wdXNoKGxvYWRBc3luYygkZmFsbGJhY2tMYW5ndWFnZVtpXSkpO1xuICAgICAgICAgICAgICBsb2FkaW5nS2V5c1skZmFsbGJhY2tMYW5ndWFnZVtpXV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbG9hZCBjdXJyZW50bHkgdXNlZCBsYW5ndWFnZVxuICAgICAgICAgIGlmICgkdXNlcyAmJiAhbG9hZGluZ0tleXNbJHVzZXNdKSB7XG4gICAgICAgICAgICB0YWJsZXMucHVzaChsb2FkQXN5bmMoJHVzZXMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkcS5hbGwodGFibGVzKS50aGVuKGZ1bmN0aW9uICh0YWJsZURhdGEpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0YWJsZURhdGEsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIGlmICgkdHJhbnNsYXRpb25UYWJsZVtkYXRhLmtleV0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgJHRyYW5zbGF0aW9uVGFibGVbZGF0YS5rZXldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyhkYXRhLmtleSwgZGF0YS50YWJsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICgkdXNlcykge1xuICAgICAgICAgICAgICB1c2VMYW5ndWFnZSgkdXNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICgkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSkge1xuXG4gICAgICAgICAgbG9hZEFzeW5jKGxhbmdLZXkpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyhkYXRhLmtleSwgZGF0YS50YWJsZSk7XG4gICAgICAgICAgICBpZiAobGFuZ0tleSA9PT0gJHVzZXMpIHtcbiAgICAgICAgICAgICAgdXNlTGFuZ3VhZ2UoJHVzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjaW5zdGFudFxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyBhIHRyYW5zbGF0aW9uIGluc3RhbnRseSBmcm9tIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBsb2FkZWQgdHJhbnNsYXRpb24uIEFsbCBydWxlc1xuICAgICAgICogcmVnYXJkaW5nIHRoZSBjdXJyZW50IGxhbmd1YWdlLCB0aGUgcHJlZmVycmVkIGxhbmd1YWdlIG9mIGV2ZW4gZmFsbGJhY2sgbGFuZ3VhZ2VzIHdpbGwgYmVcbiAgICAgICAqIHVzZWQgZXhjZXB0IGFueSBwcm9taXNlIGhhbmRsaW5nLiBJZiBhIGxhbmd1YWdlIHdhcyBub3QgZm91bmQsIGFuIGFzeW5jaHJvbm91cyBsb2FkaW5nXG4gICAgICAgKiB3aWxsIGJlIGludm9rZWQgaW4gdGhlIGJhY2tncm91bmQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IHRyYW5zbGF0aW9uSWQgQSB0b2tlbiB3aGljaCByZXByZXNlbnRzIGEgdHJhbnNsYXRpb24gaWRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FuIGJlIG9wdGlvbmFsbHkgYW4gYXJyYXkgb2YgdHJhbnNsYXRpb24gaWRzIHdoaWNoXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzIHRoYXQgdGhlIGZ1bmN0aW9uJ3MgcHJvbWlzZSByZXR1cm5zIGFuIG9iamVjdCB3aGVyZVxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCBrZXkgaXMgdGhlIHRyYW5zbGF0aW9uIGlkIGFuZCB0aGUgdmFsdWUgdGhlIHRyYW5zbGF0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGludGVycG9sYXRlUGFyYW1zIFBhcmFtc1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGludGVycG9sYXRpb25JZCBUaGUgaWQgb2YgdGhlIGludGVycG9sYXRpb24gdG8gdXNlXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSB0cmFuc2xhdGlvblxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLmluc3RhbnQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkge1xuXG4gICAgICAgIC8vIERldGVjdCB1bmRlZmluZWQgYW5kIG51bGwgdmFsdWVzIHRvIHNob3J0ZW4gdGhlIGV4ZWN1dGlvbiBhbmQgcHJldmVudCBleGNlcHRpb25zXG4gICAgICAgIGlmICh0cmFuc2xhdGlvbklkID09PSBudWxsIHx8IGFuZ3VsYXIuaXNVbmRlZmluZWQodHJhbnNsYXRpb25JZCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIER1Y2sgZGV0ZWN0aW9uOiBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYW4gYXJyYXksIGEgYnVuY2ggb2YgdHJhbnNsYXRpb25zIHdhcyByZXF1ZXN0ZWQuXG4gICAgICAgIC8vIFRoZSByZXN1bHQgaXMgYW4gb2JqZWN0LlxuICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KHRyYW5zbGF0aW9uSWQpKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgYyA9IHRyYW5zbGF0aW9uSWQubGVuZ3RoOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRzW3RyYW5zbGF0aW9uSWRbaV1dID0gJHRyYW5zbGF0ZS5pbnN0YW50KHRyYW5zbGF0aW9uSWRbaV0sIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGRpc2NhcmRlZCB1bmFjY2VwdGFibGUgdmFsdWVzLiBTbyB3ZSBqdXN0IG5lZWQgdG8gdmVyaWZ5IGlmIHRyYW5zbGF0aW9uSWQgaXMgZW1wdHkgU3RyaW5nXG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHRyYW5zbGF0aW9uSWQpICYmIHRyYW5zbGF0aW9uSWQubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGlvbklkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpbSBvZmYgYW55IHdoaXRlc3BhY2VcbiAgICAgICAgaWYgKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICB0cmFuc2xhdGlvbklkID0gdHJpbS5hcHBseSh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQsIHBvc3NpYmxlTGFuZ0tleXMgPSBbXTtcbiAgICAgICAgaWYgKCRwcmVmZXJyZWRMYW5ndWFnZSkge1xuICAgICAgICAgIHBvc3NpYmxlTGFuZ0tleXMucHVzaCgkcHJlZmVycmVkTGFuZ3VhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkdXNlcykge1xuICAgICAgICAgIHBvc3NpYmxlTGFuZ0tleXMucHVzaCgkdXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgIHBvc3NpYmxlTGFuZ0tleXMgPSBwb3NzaWJsZUxhbmdLZXlzLmNvbmNhdCgkZmFsbGJhY2tMYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGQgPSBwb3NzaWJsZUxhbmdLZXlzLmxlbmd0aDsgaiA8IGQ7IGorKykge1xuICAgICAgICAgIHZhciBwb3NzaWJsZUxhbmdLZXkgPSBwb3NzaWJsZUxhbmdLZXlzW2pdO1xuICAgICAgICAgIGlmICgkdHJhbnNsYXRpb25UYWJsZVtwb3NzaWJsZUxhbmdLZXldKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mICR0cmFuc2xhdGlvblRhYmxlW3Bvc3NpYmxlTGFuZ0tleV1bdHJhbnNsYXRpb25JZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGRldGVybWluZVRyYW5zbGF0aW9uSW5zdGFudCh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCB8fCAkbm90Rm91bmRJbmRpY2F0b3JSaWdodCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3VsdCAmJiByZXN1bHQgIT09ICcnKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHRyYW5zbGF0aW9uIG9mIGRlZmF1bHQgaW50ZXJwb2xhdG9yIGlmIG5vdCBmb3VuZCBhbnl0aGluZy5cbiAgICAgICAgICByZXN1bHQgPSBkZWZhdWx0SW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICBpZiAoJG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJGYWN0b3J5ICYmICFwZW5kaW5nTG9hZGVyKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0cmFuc2xhdGVCeUhhbmRsZXIodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI3ZlcnNpb25JbmZvXG4gICAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZlcnNpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBhbmd1bGFyLXRyYW5zbGF0ZSBsaWJyYXJ5XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBhbmd1bGFyLXRyYW5zbGF0ZSB2ZXJzaW9uXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUudmVyc2lvbkluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSNsb2FkZXJDYWNoZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBsb2FkZXJDYWNoZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ3xvYmplY3R9IGN1cnJlbnQgdmFsdWUgb2YgbG9hZGVyQ2FjaGVcbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5sb2FkZXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlO1xuICAgICAgfTtcblxuICAgICAgLy8gaW50ZXJuYWwgcHVycG9zZSBvbmx5XG4gICAgICAkdHJhbnNsYXRlLmRpcmVjdGl2ZVByaW9yaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlUHJpb3JpdHk7XG4gICAgICB9O1xuXG4gICAgICAvLyBpbnRlcm5hbCBwdXJwb3NlIG9ubHlcbiAgICAgICR0cmFuc2xhdGUuc3RhdGVmdWxGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZWZ1bEZpbHRlcjtcbiAgICAgIH07XG5cbiAgICAgIGlmICgkbG9hZGVyRmFjdG9yeSkge1xuXG4gICAgICAgIC8vIElmIGF0IGxlYXN0IG9uZSBhc3luYyBsb2FkZXIgaXMgZGVmaW5lZCBhbmQgdGhlcmUgYXJlIG5vXG4gICAgICAgIC8vIChkZWZhdWx0KSB0cmFuc2xhdGlvbnMgYXZhaWxhYmxlIHdlIHNob3VsZCB0cnkgdG8gbG9hZCB0aGVtLlxuICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMoJHRyYW5zbGF0aW9uVGFibGUsIHt9KSkge1xuICAgICAgICAgICR0cmFuc2xhdGUudXNlKCR0cmFuc2xhdGUudXNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxzbywgaWYgdGhlcmUgYXJlIGFueSBmYWxsYmFjayBsYW5ndWFnZSByZWdpc3RlcmVkLCB3ZSBzdGFydFxuICAgICAgICAvLyBsb2FkaW5nIHRoZW0gYXN5bmNocm9ub3VzbHkgYXMgc29vbiBhcyB3ZSBjYW4uXG4gICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcHJvY2Vzc0FzeW5jUmVzdWx0ID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbnModHJhbnNsYXRpb24ua2V5LCB0cmFuc2xhdGlvbi50YWJsZSk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlQ2hhbmdlRW5kJywgeyBsYW5ndWFnZTogdHJhbnNsYXRpb24ua2V5IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9ICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZmFsbGJhY2tMYW5ndWFnZUlkID0gJGZhbGxiYWNrTGFuZ3VhZ2VbaV07XG4gICAgICAgICAgICBpZiAoISR0cmFuc2xhdGlvblRhYmxlW2ZhbGxiYWNrTGFuZ3VhZ2VJZF0pIHtcbiAgICAgICAgICAgICAgbGFuZ1Byb21pc2VzW2ZhbGxiYWNrTGFuZ3VhZ2VJZF0gPSBsb2FkQXN5bmMoZmFsbGJhY2tMYW5ndWFnZUlkKS50aGVuKHByb2Nlc3NBc3luY1Jlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkdHJhbnNsYXRlO1xuICAgIH1cbiAgXTtcbn1dKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvblxuICogQHJlcXVpcmVzICRpbnRlcnBvbGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlcyBhbmd1bGFyJ3MgYCRpbnRlcnBvbGF0ZWAgc2VydmljZXMgdG8gaW50ZXJwb2xhdGUgc3RyaW5ncyBhZ2FpbnN0IHNvbWUgdmFsdWVzLlxuICpcbiAqIEByZXR1cm4ge29iamVjdH0gJHRyYW5zbGF0ZUludGVycG9sYXRvciBJbnRlcnBvbGF0b3Igc2VydmljZVxuICovXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLmZhY3RvcnkoJyR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvbicsIFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24gKCRpbnRlcnBvbGF0ZSkge1xuXG4gIHZhciAkdHJhbnNsYXRlSW50ZXJwb2xhdG9yID0ge30sXG4gICAgICAkbG9jYWxlLFxuICAgICAgJGlkZW50aWZpZXIgPSAnZGVmYXVsdCcsXG4gICAgICAkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5ID0gbnVsbCxcbiAgICAgIC8vIG1hcCBvZiBhbGwgc2FuaXRpemUgc3RyYXRlZ2llc1xuICAgICAgc2FuaXRpemVWYWx1ZVN0cmF0ZWdpZXMgPSB7XG4gICAgICAgIGVzY2FwZWQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIocGFyYW1zW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj48L2Rpdj4nKS50ZXh0KHBhcmFtc1trZXldKS5odG1sKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICB2YXIgc2FuaXRpemVQYXJhbXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNhbml0aXplVmFsdWVTdHJhdGVnaWVzWyRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3ldKSkge1xuICAgICAgcmVzdWx0ID0gc2FuaXRpemVWYWx1ZVN0cmF0ZWdpZXNbJHNhbml0aXplVmFsdWVTdHJhdGVneV0ocGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gcGFyYW1zO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb24jc2V0TG9jYWxlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyBjdXJyZW50IGxvY2FsZSAodGhpcyBpcyBjdXJyZW50bHkgbm90IHVzZSBpbiB0aGlzIGludGVycG9sYXRpb24pLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIExhbmd1YWdlIGtleSBvciBsb2NhbGUuXG4gICAqL1xuICAkdHJhbnNsYXRlSW50ZXJwb2xhdG9yLnNldExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAkbG9jYWxlID0gbG9jYWxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb24jZ2V0SW50ZXJwb2xhdGlvbklkZW50aWZpZXJcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGFuIGlkZW50aWZpZXIgZm9yIHRoaXMgaW50ZXJwb2xhdGlvbiBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSAkaWRlbnRpZmllclxuICAgKi9cbiAgJHRyYW5zbGF0ZUludGVycG9sYXRvci5nZXRJbnRlcnBvbGF0aW9uSWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJGlkZW50aWZpZXI7XG4gIH07XG5cbiAgJHRyYW5zbGF0ZUludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5ID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvbiNpbnRlcnBvbGF0ZVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEludGVycG9sYXRlcyBnaXZlbiBzdHJpbmcgYWdhaW5zIGdpdmVuIGludGVycG9sYXRlIHBhcmFtcyB1c2luZyBhbmd1bGFyc1xuICAgKiBgJGludGVycG9sYXRlYCBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBpbnRlcnBvbGF0ZWQgc3RyaW5nLlxuICAgKi9cbiAgJHRyYW5zbGF0ZUludGVycG9sYXRvci5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIGludGVycG9sYXRlUGFyYW1zKSB7XG4gICAgaWYgKCRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3kpIHtcbiAgICAgIGludGVycG9sYXRlUGFyYW1zID0gc2FuaXRpemVQYXJhbXMoaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gJGludGVycG9sYXRlKHN0cmluZykoaW50ZXJwb2xhdGVQYXJhbXMgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiAkdHJhbnNsYXRlSW50ZXJwb2xhdG9yO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLmNvbnN0YW50KCckU1RPUkFHRV9LRVknLCAnTkdfVFJBTlNMQVRFX0xBTkdfS0VZJyk7XG5cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJylcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS5kaXJlY3RpdmU6dHJhbnNsYXRlXG4gKiBAcmVxdWlyZXMgJGNvbXBpbGVcbiAqIEByZXF1aXJlcyAkZmlsdGVyXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVHJhbnNsYXRlcyBnaXZlbiB0cmFuc2xhdGlvbiBpZCBlaXRoZXIgdGhyb3VnaCBhdHRyaWJ1dGUgb3IgRE9NIGNvbnRlbnQuXG4gKiBJbnRlcm5hbGx5IGl0IHVzZXMgYHRyYW5zbGF0ZWAgZmlsdGVyIHRvIHRyYW5zbGF0ZSB0cmFuc2xhdGlvbiBpZC4gSXQgcG9zc2libGUgdG9cbiAqIHBhc3MgYW4gb3B0aW9uYWwgYHRyYW5zbGF0ZS12YWx1ZXNgIG9iamVjdCBsaXRlcmFsIGFzIHN0cmluZyBpbnRvIHRyYW5zbGF0aW9uIGlkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNsYXRlIFRyYW5zbGF0aW9uIGlkIHdoaWNoIGNvdWxkIGJlIGVpdGhlciBzdHJpbmcgb3IgaW50ZXJwb2xhdGVkIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNsYXRlLXZhbHVlcyBWYWx1ZXMgdG8gcGFzcyBpbnRvIHRyYW5zbGF0aW9uIGlkLiBDYW4gYmUgcGFzc2VkIGFzIG9iamVjdCBsaXRlcmFsIHN0cmluZyBvciBpbnRlcnBvbGF0ZWQgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmc9fSB0cmFuc2xhdGUtYXR0ci1BVFRSIHRyYW5zbGF0ZSBUcmFuc2xhdGlvbiBpZCBhbmQgcHV0IGl0IGludG8gQVRUUiBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IHRyYW5zbGF0ZS1kZWZhdWx0IHdpbGwgYmUgdXNlZCB1bmxlc3MgdHJhbnNsYXRpb24gd2FzIHN1Y2Nlc3NmdWxcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHRyYW5zbGF0ZS1jb21waWxlIChkZWZhdWx0IHRydWUgaWYgcHJlc2VudCkgZGVmaW5lcyBsb2NhbGx5IGFjdGl2YXRpb24gb2Yge0BsaW5rIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSN1c2VQb3N0Q29tcGlsaW5nfVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ1ZpZXdcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiVHJhbnNsYXRlQ3RybFwiPlxuXG4gICAgICAgIDxwcmUgdHJhbnNsYXRlPVwiVFJBTlNMQVRJT05fSURcIj48L3ByZT5cbiAgICAgICAgPHByZSB0cmFuc2xhdGU+VFJBTlNMQVRJT05fSUQ8L3ByZT5cbiAgICAgICAgPHByZSB0cmFuc2xhdGUgdHJhbnNsYXRlLWF0dHItdGl0bGU9XCJUUkFOU0xBVElPTl9JRFwiPjwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZT1cInt7dHJhbnNsYXRpb25JZH19XCI+PC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlPnt7dHJhbnNsYXRpb25JZH19PC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlPVwiV0lUSF9WQUxVRVNcIiB0cmFuc2xhdGUtdmFsdWVzPVwie3ZhbHVlOiA1fVwiPjwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZSB0cmFuc2xhdGUtdmFsdWVzPVwie3ZhbHVlOiA1fVwiPldJVEhfVkFMVUVTPC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlPVwiV0lUSF9WQUxVRVNcIiB0cmFuc2xhdGUtdmFsdWVzPVwie3t2YWx1ZXN9fVwiPjwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZSB0cmFuc2xhdGUtdmFsdWVzPVwie3t2YWx1ZXN9fVwiPldJVEhfVkFMVUVTPC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlIHRyYW5zbGF0ZS1hdHRyLXRpdGxlPVwiV0lUSF9WQUxVRVNcIiB0cmFuc2xhdGUtdmFsdWVzPVwie3t2YWx1ZXN9fVwiPjwvcHJlPlxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycsIFsncGFzY2FscHJlY2h0LnRyYW5zbGF0ZSddKVxuXG4gICAgICAuY29uZmlnKGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcblxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKCdlbicse1xuICAgICAgICAgICdUUkFOU0xBVElPTl9JRCc6ICdIZWxsbyB0aGVyZSEnLFxuICAgICAgICAgICdXSVRIX1ZBTFVFUyc6ICdUaGUgZm9sbG93aW5nIHZhbHVlIGlzIGR5bmFtaWM6IHt7dmFsdWV9fSdcbiAgICAgICAgfSkucHJlZmVycmVkTGFuZ3VhZ2UoJ2VuJyk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbmdWaWV3JykuY29udHJvbGxlcignVHJhbnNsYXRlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLnRyYW5zbGF0aW9uSWQgPSAnVFJBTlNMQVRJT05fSUQnO1xuXG4gICAgICAgICRzY29wZS52YWx1ZXMgPSB7XG4gICAgICAgICAgdmFsdWU6IDc4XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjZW5hcmlvLmpzXCI+XG4gICAgICBpdCgnc2hvdWxkIHRyYW5zbGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0KGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkY29tcGlsZSkge1xuICAgICAgICAgICRyb290U2NvcGUudHJhbnNsYXRpb25JZCA9ICdUUkFOU0xBVElPTl9JRCc7XG5cbiAgICAgICAgICBlbGVtZW50ID0gJGNvbXBpbGUoJzxwIHRyYW5zbGF0ZT1cIlRSQU5TTEFUSU9OX0lEXCI+PC9wPicpKCRyb290U2NvcGUpO1xuICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50LnRleHQoKSkudG9CZSgnSGVsbG8gdGhlcmUhJyk7XG5cbiAgICAgICAgICBlbGVtZW50ID0gJGNvbXBpbGUoJzxwIHRyYW5zbGF0ZT1cInt7dHJhbnNsYXRpb25JZH19XCI+PC9wPicpKCRyb290U2NvcGUpO1xuICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50LnRleHQoKSkudG9CZSgnSGVsbG8gdGhlcmUhJyk7XG5cbiAgICAgICAgICBlbGVtZW50ID0gJGNvbXBpbGUoJzxwIHRyYW5zbGF0ZT5UUkFOU0xBVElPTl9JRDwvcD4nKSgkcm9vdFNjb3BlKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudC50ZXh0KCkpLnRvQmUoJ0hlbGxvIHRoZXJlIScpO1xuXG4gICAgICAgICAgZWxlbWVudCA9ICRjb21waWxlKCc8cCB0cmFuc2xhdGU+e3t0cmFuc2xhdGlvbklkfX08L3A+JykoJHJvb3RTY29wZSk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQudGV4dCgpKS50b0JlKCdIZWxsbyB0aGVyZSEnKTtcblxuICAgICAgICAgIGVsZW1lbnQgPSAkY29tcGlsZSgnPHAgdHJhbnNsYXRlIHRyYW5zbGF0ZS1hdHRyLXRpdGxlPVwiVFJBTlNMQVRJT05fSURcIj48L3A+JykoJHJvb3RTY29wZSk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYXR0cigndGl0bGUnKSkudG9CZSgnSGVsbG8gdGhlcmUhJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG4uZGlyZWN0aXZlKCd0cmFuc2xhdGUnLCBbJyR0cmFuc2xhdGUnLCAnJHEnLCAnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgJyRwYXJzZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCR0cmFuc2xhdGUsICRxLCAkaW50ZXJwb2xhdGUsICRjb21waWxlLCAkcGFyc2UsICRyb290U2NvcGUpIHtcblxuICAvKipcbiAgICogQG5hbWUgdHJpbVxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogdHJpbSBwb2x5ZmlsbFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc3RyaW5nIHN0cmlwcGVkIG9mIHdoaXRlc3BhY2UgZnJvbSBib3RoIGVuZHNcbiAgICovXG4gIHZhciB0cmltID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgc2NvcGU6IHRydWUsXG4gICAgcHJpb3JpdHk6ICR0cmFuc2xhdGUuZGlyZWN0aXZlUHJpb3JpdHkoKSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRyKSB7XG5cbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZXNFeGlzdCA9ICh0QXR0ci50cmFuc2xhdGVWYWx1ZXMpID9cbiAgICAgICAgdEF0dHIudHJhbnNsYXRlVmFsdWVzIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgdHJhbnNsYXRlSW50ZXJwb2xhdGlvbiA9ICh0QXR0ci50cmFuc2xhdGVJbnRlcnBvbGF0aW9uKSA/XG4gICAgICAgIHRBdHRyLnRyYW5zbGF0ZUludGVycG9sYXRpb24gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZUV4aXN0ID0gdEVsZW1lbnRbMF0ub3V0ZXJIVE1MLm1hdGNoKC90cmFuc2xhdGUtdmFsdWUtKy9pKTtcblxuICAgICAgdmFyIGludGVycG9sYXRlUmVnRXhwID0gJ14oLiopKCcgKyAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSArICcuKicgKyAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCkgKyAnKSguKiknLFxuICAgICAgICAgIHdhdGNoZXJSZWdFeHAgPSAnXiguKiknICsgJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCkgKyAnKC4qKScgKyAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCkgKyAnKC4qKSc7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGlFbGVtZW50LCBpQXR0cikge1xuXG4gICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zID0ge307XG4gICAgICAgIHNjb3BlLnByZVRleHQgPSAnJztcbiAgICAgICAgc2NvcGUucG9zdFRleHQgPSAnJztcbiAgICAgICAgdmFyIHRyYW5zbGF0aW9uSWRzID0ge307XG5cbiAgICAgICAgLy8gaW5pdGlhbCBzZXR1cFxuICAgICAgICBpZiAoaUF0dHIudHJhbnNsYXRlVmFsdWVzKSB7XG4gICAgICAgICAgYW5ndWxhci5leHRlbmQoc2NvcGUuaW50ZXJwb2xhdGVQYXJhbXMsICRwYXJzZShpQXR0ci50cmFuc2xhdGVWYWx1ZXMpKHNjb3BlLiRwYXJlbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuc3VyZXMgYW55IGNoYW5nZSBvZiB0aGUgYXR0cmlidXRlIFwidHJhbnNsYXRlXCIgY29udGFpbmluZyB0aGUgaWQgd2lsbFxuICAgICAgICAvLyBiZSByZS1zdG9yZWQgdG8gdGhlIHNjb3BlJ3MgXCJ0cmFuc2xhdGlvbklkXCIuXG4gICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIG5vIGNvbnRlbnQsIHRoZSBlbGVtZW50J3MgdGV4dCB2YWx1ZSAod2hpdGUgc3BhY2VzIHRyaW1tZWQgb2ZmKSB3aWxsIGJlIHVzZWQuXG4gICAgICAgIHZhciBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcblxuICAgICAgICAgIC8vIFJlbW92ZSBhbnkgb2xkIHdhdGNoZXJcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKG9ic2VydmVFbGVtZW50VHJhbnNsYXRpb24uX3Vud2F0Y2hPbGQpKSB7XG4gICAgICAgICAgICBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uLl91bndhdGNoT2xkKCk7XG4gICAgICAgICAgICBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uLl91bndhdGNoT2xkID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyh0cmFuc2xhdGlvbklkICwgJycpIHx8ICFhbmd1bGFyLmlzRGVmaW5lZCh0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgLy8gaW5pdGlhbGx5IGZldGNoIGFsbCBhdHRyaWJ1dGVzIGlmIGV4aXN0aW5nIGFuZCBmaWxsIHRoZSBwYXJhbXNcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGVWYWx1ZUV4aXN0KSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gdEF0dHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGlBdHRyLCBhdHRyKSAmJiBhdHRyLnN1YnN0cigwLCAxNCkgPT09ICd0cmFuc2xhdGVWYWx1ZScgJiYgYXR0ciAhPT0gJ3RyYW5zbGF0ZVZhbHVlcycpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gYW5ndWxhci5sb3dlcmNhc2UoYXR0ci5zdWJzdHIoMTQsIDEpKSArIGF0dHIuc3Vic3RyKDE1KTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zW2F0dHJpYnV0ZU5hbWVdID0gdEF0dHJbYXR0cl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgdHJhbnNsYXRpb24gaWQgYnkgaW5uZXIgaHRtbCBpZiByZXF1aXJlZFxuICAgICAgICAgICAgdmFyIGludGVycG9sYXRlTWF0Y2hlcyA9IHRyaW0uYXBwbHkoaUVsZW1lbnQudGV4dCgpKS5tYXRjaChpbnRlcnBvbGF0ZVJlZ0V4cCk7XG4gICAgICAgICAgICAvLyBJbnRlcnBvbGF0ZSB0cmFuc2xhdGlvbiBpZCBpZiByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShpbnRlcnBvbGF0ZU1hdGNoZXMpKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnByZVRleHQgPSBpbnRlcnBvbGF0ZU1hdGNoZXNbMV07XG4gICAgICAgICAgICAgIHNjb3BlLnBvc3RUZXh0ID0gaW50ZXJwb2xhdGVNYXRjaGVzWzNdO1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkcy50cmFuc2xhdGUgPSAkaW50ZXJwb2xhdGUoaW50ZXJwb2xhdGVNYXRjaGVzWzJdKShzY29wZS4kcGFyZW50KTtcbiAgICAgICAgICAgICAgdmFyIHdhdGNoZXJNYXRjaGVzID0gaUVsZW1lbnQudGV4dCgpLm1hdGNoKHdhdGNoZXJSZWdFeHApO1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KHdhdGNoZXJNYXRjaGVzKSAmJiB3YXRjaGVyTWF0Y2hlc1syXSAmJiB3YXRjaGVyTWF0Y2hlc1syXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uLl91bndhdGNoT2xkID0gc2NvcGUuJHdhdGNoKHdhdGNoZXJNYXRjaGVzWzJdLCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uSWRzLnRyYW5zbGF0ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgdXBkYXRlVHJhbnNsYXRpb25zKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9uSWRzLnRyYW5zbGF0ZSA9IGlFbGVtZW50LnRleHQoKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNsYXRpb25JZHMudHJhbnNsYXRlID0gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlVHJhbnNsYXRpb25zKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG9ic2VydmVBdHRyaWJ1dGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2xhdGVBdHRyKSB7XG4gICAgICAgICAgaUF0dHIuJG9ic2VydmUodHJhbnNsYXRlQXR0ciwgZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uSWRzW3RyYW5zbGF0ZUF0dHJdID0gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgICAgIHVwZGF0ZVRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBmaXJzdEF0dHJpYnV0ZUNoYW5nZWRFdmVudCA9IHRydWU7XG4gICAgICAgIGlBdHRyLiRvYnNlcnZlKCd0cmFuc2xhdGUnLCBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdHJhbnNsYXRpb25JZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIGNhc2Ugb2YgZWxlbWVudCBcIjx0cmFuc2xhdGU+eHl6PC90cmFuc2xhdGU+XCJcbiAgICAgICAgICAgIG9ic2VydmVFbGVtZW50VHJhbnNsYXRpb24oJycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjYXNlIG9mIHJlZ3VsYXIgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb25JZCAhPT0gJycgfHwgIWZpcnN0QXR0cmlidXRlQ2hhbmdlZEV2ZW50KSB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9uSWRzLnRyYW5zbGF0ZSA9IHRyYW5zbGF0aW9uSWQ7XG4gICAgICAgICAgICAgIHVwZGF0ZVRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmaXJzdEF0dHJpYnV0ZUNoYW5nZWRFdmVudCA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciB0cmFuc2xhdGVBdHRyIGluIGlBdHRyKSB7XG4gICAgICAgICAgaWYgKGlBdHRyLmhhc093blByb3BlcnR5KHRyYW5zbGF0ZUF0dHIpICYmIHRyYW5zbGF0ZUF0dHIuc3Vic3RyKDAsIDEzKSA9PT0gJ3RyYW5zbGF0ZUF0dHInKSB7XG4gICAgICAgICAgICBvYnNlcnZlQXR0cmlidXRlVHJhbnNsYXRpb24odHJhbnNsYXRlQXR0cik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaUF0dHIuJG9ic2VydmUoJ3RyYW5zbGF0ZURlZmF1bHQnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBzY29wZS5kZWZhdWx0VGV4dCA9IHZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHJhbnNsYXRlVmFsdWVzRXhpc3QpIHtcbiAgICAgICAgICBpQXR0ci4kb2JzZXJ2ZSgndHJhbnNsYXRlVmFsdWVzJywgZnVuY3Rpb24gKGludGVycG9sYXRlUGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJwb2xhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHNjb3BlLmludGVycG9sYXRlUGFyYW1zLCAkcGFyc2UoaW50ZXJwb2xhdGVQYXJhbXMpKHNjb3BlLiRwYXJlbnQpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNsYXRlVmFsdWVFeGlzdCkge1xuICAgICAgICAgIHZhciBvYnNlcnZlVmFsdWVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICAgIGlBdHRyLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBhbmd1bGFyLmxvd2VyY2FzZShhdHRyTmFtZS5zdWJzdHIoMTQsIDEpKSArIGF0dHJOYW1lLnN1YnN0cigxNSk7XG4gICAgICAgICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zW2F0dHJpYnV0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gaUF0dHIpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaUF0dHIsIGF0dHIpICYmIGF0dHIuc3Vic3RyKDAsIDE0KSA9PT0gJ3RyYW5zbGF0ZVZhbHVlJyAmJiBhdHRyICE9PSAndHJhbnNsYXRlVmFsdWVzJykge1xuICAgICAgICAgICAgICBvYnNlcnZlVmFsdWVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWFzdGVyIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICB2YXIgdXBkYXRlVHJhbnNsYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0cmFuc2xhdGlvbklkcykge1xuXG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb25JZHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0cmFuc2xhdGlvbklkc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgdXBkYXRlVHJhbnNsYXRpb24oa2V5LCB0cmFuc2xhdGlvbklkc1trZXldLCBzY29wZSwgc2NvcGUuaW50ZXJwb2xhdGVQYXJhbXMsIHNjb3BlLmRlZmF1bHRUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHV0IHRyYW5zbGF0aW9uIHByb2Nlc3NpbmcgZnVuY3Rpb24gb3V0c2lkZSBsb29wXG4gICAgICAgIHZhciB1cGRhdGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKHRyYW5zbGF0ZUF0dHIsIHRyYW5zbGF0aW9uSWQsIHNjb3BlLCBpbnRlcnBvbGF0ZVBhcmFtcywgZGVmYXVsdFRyYW5zbGF0aW9uVGV4dCkge1xuICAgICAgICAgIGlmICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAkdHJhbnNsYXRlKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCB0cmFuc2xhdGVJbnRlcnBvbGF0aW9uLCBkZWZhdWx0VHJhbnNsYXRpb25UZXh0KVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICBhcHBseVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uLCBzY29wZSwgdHJ1ZSwgdHJhbnNsYXRlQXR0cik7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlUcmFuc2xhdGlvbih0cmFuc2xhdGlvbklkLCBzY29wZSwgZmFsc2UsIHRyYW5zbGF0ZUF0dHIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYXMgYW4gZW1wdHkgc3RyaW5nIGNhbm5vdCBiZSB0cmFuc2xhdGVkLCB3ZSBjYW4gc29sdmUgdGhpcyB1c2luZyBzdWNjZXNzZnVsPWZhbHNlXG4gICAgICAgICAgICBhcHBseVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uSWQsIHNjb3BlLCBmYWxzZSwgdHJhbnNsYXRlQXR0cik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhcHBseVRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKHZhbHVlLCBzY29wZSwgc3VjY2Vzc2Z1bCwgdHJhbnNsYXRlQXR0cikge1xuICAgICAgICAgIGlmICh0cmFuc2xhdGVBdHRyID09PSAndHJhbnNsYXRlJykge1xuICAgICAgICAgICAgLy8gZGVmYXVsdCB0cmFuc2xhdGUgaW50byBpbm5lckhUTUxcbiAgICAgICAgICAgIGlmICghc3VjY2Vzc2Z1bCAmJiB0eXBlb2Ygc2NvcGUuZGVmYXVsdFRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gc2NvcGUuZGVmYXVsdFRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpRWxlbWVudC5odG1sKHNjb3BlLnByZVRleHQgKyB2YWx1ZSArIHNjb3BlLnBvc3RUZXh0KTtcbiAgICAgICAgICAgIHZhciBnbG9iYWxseUVuYWJsZWQgPSAkdHJhbnNsYXRlLmlzUG9zdENvbXBpbGluZ0VuYWJsZWQoKTtcbiAgICAgICAgICAgIHZhciBsb2NhbGx5RGVmaW5lZCA9IHR5cGVvZiB0QXR0ci50cmFuc2xhdGVDb21waWxlICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIHZhciBsb2NhbGx5RW5hYmxlZCA9IGxvY2FsbHlEZWZpbmVkICYmIHRBdHRyLnRyYW5zbGF0ZUNvbXBpbGUgIT09ICdmYWxzZSc7XG4gICAgICAgICAgICBpZiAoKGdsb2JhbGx5RW5hYmxlZCAmJiAhbG9jYWxseURlZmluZWQpIHx8IGxvY2FsbHlFbmFibGVkKSB7XG4gICAgICAgICAgICAgICRjb21waWxlKGlFbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgaWYgKCFzdWNjZXNzZnVsICYmIHR5cGVvZiBzY29wZS5kZWZhdWx0VGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBzY29wZS5kZWZhdWx0VGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gaUF0dHIuJGF0dHJbdHJhbnNsYXRlQXR0cl07XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTmFtZS5zdWJzdHIoMCwgNSkgPT09ICdkYXRhLScpIHtcbiAgICAgICAgICAgICAgLy8gZW5zdXJlIGh0bWw1IGRhdGEgcHJlZml4IGlzIHN0cmlwcGVkXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lLnN1YnN0cig1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lLnN1YnN0cigxNSk7XG4gICAgICAgICAgICBpRWxlbWVudC5hdHRyKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKCdpbnRlcnBvbGF0ZVBhcmFtcycsIHVwZGF0ZVRyYW5zbGF0aW9ucywgdHJ1ZSk7XG5cbiAgICAgICAgLy8gRW5zdXJlcyB0aGUgdGV4dCB3aWxsIGJlIHJlZnJlc2hlZCBhZnRlciB0aGUgY3VycmVudCBsYW5ndWFnZSB3YXMgY2hhbmdlZFxuICAgICAgICAvLyB3LyAkdHJhbnNsYXRlLnVzZSguLi4pXG4gICAgICAgIHZhciB1bmJpbmQgPSAkcm9vdFNjb3BlLiRvbignJHRyYW5zbGF0ZUNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGVUcmFuc2xhdGlvbnMpO1xuXG4gICAgICAgIC8vIGVuc3VyZSB0cmFuc2xhdGlvbiB3aWxsIGJlIGxvb2tlZCB1cCBhdCBsZWFzdCBvbmVcbiAgICAgICAgaWYgKGlFbGVtZW50LnRleHQoKS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoaUF0dHIudHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uKGlBdHRyLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ic2VydmVFbGVtZW50VHJhbnNsYXRpb24oJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVUcmFuc2xhdGlvbnMoKTtcbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHVuYmluZCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnKVxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLmRpcmVjdGl2ZTp0cmFuc2xhdGVDbG9ha1xuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqIEByZXF1aXJlcyAkdHJhbnNsYXRlXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqICRkZXNjcmlwdGlvblxuICogQWRkcyBhIGB0cmFuc2xhdGUtY2xvYWtgIGNsYXNzIG5hbWUgdG8gdGhlIGdpdmVuIGVsZW1lbnQgd2hlcmUgdGhpcyBkaXJlY3RpdmVcbiAqIGlzIGFwcGxpZWQgaW5pdGlhbGx5IGFuZCByZW1vdmVzIGl0LCBvbmNlIGEgbG9hZGVyIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIHByZXZlbnQgaW5pdGlhbCBmbGlja2VyaW5nIHdoZW4gbG9hZGluZyB0cmFuc2xhdGlvblxuICogZGF0YSBhc3luY2hyb25vdXNseS5cbiAqXG4gKiBUaGUgY2xhc3MgbmFtZSBpcyBkZWZpbmVkIGluXG4gKiB7QGxpbmsgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjY2xvYWtDbGFzc05hbWUgJHRyYW5zbGF0ZS5jbG9ha0NsYXNzTmFtZSgpfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IHRyYW5zbGF0ZS1jbG9hayBJZiBhIHRyYW5zbGF0aW9uSWQgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdXNlZCBmb3Igc2hvd2luZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgaGlkaW5nIHRoZSBjbG9hay4gQmFzaWNhbGx5IGl0IHJlbGllcyBvbiB0aGUgdHJhbnNsYXRpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUuXG4gKi9cbi5kaXJlY3RpdmUoJ3RyYW5zbGF0ZUNsb2FrJywgWyckcm9vdFNjb3BlJywgJyR0cmFuc2xhdGUnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRyYW5zbGF0ZSkge1xuXG4gIHJldHVybiB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHRFbGVtZW50KSB7XG4gICAgICB2YXIgYXBwbHlDbG9hayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3MoJHRyYW5zbGF0ZS5jbG9ha0NsYXNzTmFtZSgpKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbG9hayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdEVsZW1lbnQucmVtb3ZlQ2xhc3MoJHRyYW5zbGF0ZS5jbG9ha0NsYXNzTmFtZSgpKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVMaXN0ZW5lciA9ICRyb290U2NvcGUuJG9uKCckdHJhbnNsYXRlQ2hhbmdlRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVDbG9haygpO1xuICAgICAgICByZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgICByZW1vdmVMaXN0ZW5lciA9IG51bGw7XG4gICAgICB9KTtcbiAgICAgIGFwcGx5Q2xvYWsoKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmtGbihzY29wZSwgaUVsZW1lbnQsIGlBdHRyKSB7XG4gICAgICAgIC8vIFJlZ2lzdGVyIGEgd2F0Y2hlciBmb3IgdGhlIGRlZmluZWQgdHJhbnNsYXRpb24gYWxsb3dpbmcgYSBmaW5lIHR1bmVkIGNsb2FrXG4gICAgICAgIGlmIChpQXR0ci50cmFuc2xhdGVDbG9hayAmJiBpQXR0ci50cmFuc2xhdGVDbG9hay5sZW5ndGgpIHtcbiAgICAgICAgICBpQXR0ci4kb2JzZXJ2ZSgndHJhbnNsYXRlQ2xvYWsnLCBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgICAgJHRyYW5zbGF0ZSh0cmFuc2xhdGlvbklkKS50aGVuKHJlbW92ZUNsb2FrLCBhcHBseUNsb2FrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJylcbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS5maWx0ZXI6dHJhbnNsYXRlXG4gKiBAcmVxdWlyZXMgJHBhcnNlXG4gKiBAcmVxdWlyZXMgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gKiBAZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZXMgYCR0cmFuc2xhdGVgIHNlcnZpY2UgdG8gdHJhbnNsYXRlIGNvbnRlbnRzLiBBY2NlcHRzIGludGVycG9sYXRlIHBhcmFtZXRlcnNcbiAqIHRvIHBhc3MgZHluYW1pemVkIHZhbHVlcyB0aG91Z2ggdHJhbnNsYXRpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zbGF0aW9uSWQgQSB0cmFuc2xhdGlvbiBpZCB0byBiZSB0cmFuc2xhdGVkLlxuICogQHBhcmFtIHsqPX0gaW50ZXJwb2xhdGVQYXJhbXMgT3B0aW9uYWwgb2JqZWN0IGxpdGVyYWwgKGFzIGhhc2ggb3Igc3RyaW5nKSB0byBwYXNzIHZhbHVlcyBpbnRvIHRyYW5zbGF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdWaWV3XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIlRyYW5zbGF0ZUN0cmxcIj5cblxuICAgICAgICA8cHJlPnt7ICdUUkFOU0xBVElPTl9JRCcgfCB0cmFuc2xhdGUgfX08L3ByZT5cbiAgICAgICAgPHByZT57eyB0cmFuc2xhdGlvbklkIHwgdHJhbnNsYXRlIH19PC9wcmU+XG4gICAgICAgIDxwcmU+e3sgJ1dJVEhfVkFMVUVTJyB8IHRyYW5zbGF0ZTone3ZhbHVlOiA1fScgfX08L3ByZT5cbiAgICAgICAgPHByZT57eyAnV0lUSF9WQUxVRVMnIHwgdHJhbnNsYXRlOnZhbHVlcyB9fTwvcHJlPlxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycsIFsncGFzY2FscHJlY2h0LnRyYW5zbGF0ZSddKVxuXG4gICAgICAuY29uZmlnKGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcblxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKCdlbicsIHtcbiAgICAgICAgICAnVFJBTlNMQVRJT05fSUQnOiAnSGVsbG8gdGhlcmUhJyxcbiAgICAgICAgICAnV0lUSF9WQUxVRVMnOiAnVGhlIGZvbGxvd2luZyB2YWx1ZSBpcyBkeW5hbWljOiB7e3ZhbHVlfX0nXG4gICAgICAgIH0pO1xuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIucHJlZmVycmVkTGFuZ3VhZ2UoJ2VuJyk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbmdWaWV3JykuY29udHJvbGxlcignVHJhbnNsYXRlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLnRyYW5zbGF0aW9uSWQgPSAnVFJBTlNMQVRJT05fSUQnO1xuXG4gICAgICAgICRzY29wZS52YWx1ZXMgPSB7XG4gICAgICAgICAgdmFsdWU6IDc4XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbi5maWx0ZXIoJ3RyYW5zbGF0ZScsIFsnJHBhcnNlJywgJyR0cmFuc2xhdGUnLCBmdW5jdGlvbiAoJHBhcnNlLCAkdHJhbnNsYXRlKSB7XG4gIHZhciB0cmFuc2xhdGVGaWx0ZXIgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb24pIHtcblxuICAgIGlmICghYW5ndWxhci5pc09iamVjdChpbnRlcnBvbGF0ZVBhcmFtcykpIHtcbiAgICAgIGludGVycG9sYXRlUGFyYW1zID0gJHBhcnNlKGludGVycG9sYXRlUGFyYW1zKSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJHRyYW5zbGF0ZS5pbnN0YW50KHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uKTtcbiAgfTtcblxuICBpZiAoJHRyYW5zbGF0ZS5zdGF0ZWZ1bEZpbHRlcigpKSB7XG4gICAgdHJhbnNsYXRlRmlsdGVyLiRzdGF0ZWZ1bCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gdHJhbnNsYXRlRmlsdGVyO1xufV0pO1xucmV0dXJuICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJztcblxufSkpO1xuIiwiLyohXG4gKiBhbmd1bGFyLXRyYW5zbGF0ZSAtIHYyLjcuMCAtIDIwMTUtMDQtMTVcbiAqIGh0dHA6Ly9naXRodWIuY29tL2FuZ3VsYXItdHJhbnNsYXRlL2FuZ3VsYXItdHJhbnNsYXRlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgOyBMaWNlbnNlZCBNSVRcbiAqL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUgdW5sZXNzIGFtZE1vZHVsZUlkIGlzIHNldFxuICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChmYWN0b3J5KCkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgIC8vIGxpa2UgTm9kZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQnkgdXNpbmcgYSAkdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyIHlvdSBjYW4gY29uZmlndXJlIGEgbGlzdCBvZiBhIG5lZWRlZFxuICogdHJhbnNsYXRpb24gcGFydHMgZGlyZWN0bHkgZHVyaW5nIHRoZSBjb25maWd1cmF0aW9uIHBoYXNlIG9mIHlvdXIgYXBwbGljYXRpb24nc1xuICogbGlmZXRpbWUuIEFsbCBwYXJ0cyB5b3UgYWRkIGJ5IHVzaW5nIHRoaXMgcHJvdmlkZXIgd291bGQgYmUgbG9hZGVkIGJ5XG4gKiBhbmd1bGFyLXRyYW5zbGF0ZSBhdCB0aGUgc3RhcnR1cCBhcyBzb29uIGFzIHBvc3NpYmxlLlxuICovXG4ucHJvdmlkZXIoJyR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyJywgZnVuY3Rpb24oKSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAbmFtZSBQYXJ0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXByZXNlbnRzIFBhcnQgb2JqZWN0IHRvIGFkZCBhbmQgc2V0IHBhcnRzIGF0IHJ1bnRpbWUuXG4gICAqL1xuICBmdW5jdGlvbiBQYXJ0KG5hbWUsIHByaW9yaXR5KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLnRhYmxlcyA9IHt9O1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lIHBhcnNlVXJsXG4gICAqIEBtZXRob2RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgYSBwYXJzZWQgdXJsIHRlbXBsYXRlIHN0cmluZyBhbmQgcmVwbGFjZXMgZ2l2ZW4gdGFyZ2V0IGxhbmdcbiAgICogYW5kIHBhcnQgbmFtZSBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHVybFRlbXBsYXRlIC0gRWl0aGVyIGEgc3RyaW5nIGNvbnRhaW5pbmcgYW4gdXJsIHBhdHRlcm4gKHdpdGhcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3twYXJ0fScgYW5kICd7bGFuZ30nKSBvciBhIGZ1bmN0aW9uKHBhcnQsIGxhbmcpXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybmluZyBhIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldExhbmcgLSBMYW5ndWFnZSBrZXkgZm9yIGxhbmd1YWdlIHRvIGJlIHVzZWQuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gUGFyc2VkIHVybCB0ZW1wbGF0ZSBzdHJpbmdcbiAgICovXG4gIFBhcnQucHJvdG90eXBlLnBhcnNlVXJsID0gZnVuY3Rpb24odXJsVGVtcGxhdGUsIHRhcmdldExhbmcpIHtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHVybFRlbXBsYXRlKSkge1xuICAgICAgcmV0dXJuIHVybFRlbXBsYXRlKHRoaXMubmFtZSwgdGFyZ2V0TGFuZyk7XG4gICAgfVxuICAgIHJldHVybiB1cmxUZW1wbGF0ZS5yZXBsYWNlKC9cXHtwYXJ0XFx9L2csIHRoaXMubmFtZSkucmVwbGFjZSgvXFx7bGFuZ1xcfS9nLCB0YXJnZXRMYW5nKTtcbiAgfTtcblxuICBQYXJ0LnByb3RvdHlwZS5nZXRUYWJsZSA9IGZ1bmN0aW9uKGxhbmcsICRxLCAkaHR0cCwgJGh0dHBPcHRpb25zLCB1cmxUZW1wbGF0ZSwgZXJyb3JIYW5kbGVyKSB7XG4gICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgIGlmICghdGhpcy50YWJsZXNbbGFuZ10pIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgJGh0dHAoYW5ndWxhci5leHRlbmQoe1xuICAgICAgICBtZXRob2QgOiAnR0VUJyxcbiAgICAgICAgdXJsOiB0aGlzLnBhcnNlVXJsKHVybFRlbXBsYXRlLCBsYW5nKVxuICAgICAgfSwgJGh0dHBPcHRpb25zKSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgc2VsZi50YWJsZXNbbGFuZ10gPSBkYXRhO1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChlcnJvckhhbmRsZXIpIHtcbiAgICAgICAgICBlcnJvckhhbmRsZXIoc2VsZi5uYW1lLCBsYW5nKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHNlbGYudGFibGVzW2xhbmddID0gZGF0YTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc2VsZi5uYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc2VsZi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzLnRhYmxlc1tsYW5nXSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gIHZhciBwYXJ0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGhhc1BhcnQobmFtZSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFydHMsIG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTdHJpbmdWYWxpZChzdHIpIHtcbiAgICByZXR1cm4gYW5ndWxhci5pc1N0cmluZyhzdHIpICYmIHN0ciAhPT0gJyc7XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhcnRBdmFpbGFibGUobmFtZSkge1xuICAgIGlmICghaXNTdHJpbmdWYWxpZChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0eXBlIG9mIGEgZmlyc3QgYXJndW1lbnQsIGEgbm9uLWVtcHR5IHN0cmluZyBleHBlY3RlZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGhhc1BhcnQobmFtZSkgJiYgcGFydHNbbmFtZV0uaXNBY3RpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcEV4dGVuZChkc3QsIHNyYykge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNyYykge1xuICAgICAgaWYgKHNyY1twcm9wZXJ0eV0gJiYgc3JjW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciAmJlxuICAgICAgIHNyY1twcm9wZXJ0eV0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICBkc3RbcHJvcGVydHldID0gZHN0W3Byb3BlcnR5XSB8fCB7fTtcbiAgICAgICAgZGVlcEV4dGVuZChkc3RbcHJvcGVydHldLCBzcmNbcHJvcGVydHldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRzdFtwcm9wZXJ0eV0gPSBzcmNbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZHN0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRQYXJ0cygpIHtcbiAgICB2YXIgcHJpb3JpdGl6ZWRQYXJ0cyA9IFtdO1xuICAgIGZvcih2YXIgcGFydCBpbiBwYXJ0cykge1xuICAgICAgaWYgKHBhcnRzW3BhcnRdLmlzQWN0aXZlKSB7XG4gICAgICAgIHByaW9yaXRpemVkUGFydHMucHVzaChwYXJ0c1twYXJ0XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHByaW9yaXRpemVkUGFydHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH0pO1xuICAgIHJldHVybiBwcmlvcml0aXplZFBhcnRzO1xuICB9XG5cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJQcm92aWRlciNhZGRQYXJ0XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBwYXJ0IG9mIHRoZSB0cmFuc2xhdGlvbiB0YWJsZSB0byBiZSBsb2FkZWQgb25jZSB0aGVcbiAgICogYGFuZ3VsYXItdHJhbnNsYXRlYCBnZXRzIGludG8gcnVudGltZSBwaGFzZS4gSXQgZG9lcyBub3QgYWN0dWFsbHkgbG9hZCBhbnlcbiAgICogdHJhbnNsYXRpb24gZGF0YSwgYnV0IG9ubHkgcmVnaXN0ZXJzIGEgcGFydCB0byBiZSBsb2FkZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIG9mIHRoZSBwYXJ0IHRvIGFkZFxuICAgKiBAcGFyYW0ge2ludH0gW3ByaW9yaXR5PTBdIFNldHMgdGhlIGxvYWQgcHJpb3JpdHkgb2YgdGhpcyBwYXJ0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSAkdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyLCBzbyB0aGlzIG1ldGhvZCBpcyBjaGFpbmFibGVcbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBUaGUgbWV0aG9kIGNvdWxkIHRocm93IGEgKipUeXBlRXJyb3IqKiBpZiB5b3UgcGFzcyB0aGUgcGFyYW1cbiAgICogb2YgdGhlIHdyb25nIHR5cGUuIFBsZWFzZSwgbm90ZSB0aGF0IHRoZSBgbmFtZWAgcGFyYW0gaGFzIHRvIGJlIGFcbiAgICogbm9uLWVtcHR5ICoqc3RyaW5nKiouXG4gICAqL1xuICB0aGlzLmFkZFBhcnQgPSBmdW5jdGlvbihuYW1lLCBwcmlvcml0eSkge1xuICAgIGlmICghaXNTdHJpbmdWYWxpZChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ291bGRuXFwndCBhZGQgcGFydCwgcGFydCBuYW1lIGhhcyB0byBiZSBhIHN0cmluZyEnKTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc1BhcnQobmFtZSkpIHtcbiAgICAgIHBhcnRzW25hbWVdID0gbmV3IFBhcnQobmFtZSwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICBwYXJ0c1tuYW1lXS5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jcyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXIjc2V0UGFydFxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGEgdHJhbnNsYXRpb24gdGFibGUgdG8gdGhlIHNwZWNpZmllZCBwYXJ0LiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBtYWtlIHRoZVxuICAgKiBzcGVjaWZpZWQgcGFydCBhdmFpbGFibGUsIGJ1dCBvbmx5IGF2b2lkcyBsb2FkaW5nIHRoaXMgcGFydCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5nIEEgbGFuZ3VhZ2Ugb2YgdGhlIGdpdmVuIHRyYW5zbGF0aW9uIHRhYmxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJ0IEEgbmFtZSBvZiB0aGUgdGFyZ2V0IHBhcnRcbiAgICogQHBhcmFtIHtvYmplY3R9IHRhYmxlIEEgdHJhbnNsYXRpb24gdGFibGUgdG8gc2V0IHRvIHRoZSBzcGVjaWZpZWQgcGFydFxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9ICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXIsIHNvIHRoaXMgbWV0aG9kIGlzIGNoYWluYWJsZVxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IFRoZSBtZXRob2QgY291bGQgdGhyb3cgYSAqKlR5cGVFcnJvcioqIGlmIHlvdSBwYXNzIHBhcmFtc1xuICAgKiBvZiB0aGUgd3JvbmcgdHlwZS4gUGxlYXNlLCBub3RlIHRoYXQgdGhlIGBsYW5nYCBhbmQgYHBhcnRgIHBhcmFtcyBoYXZlIHRvIGJlIGFcbiAgICogbm9uLWVtcHR5ICoqc3RyaW5nKipzIGFuZCB0aGUgYHRhYmxlYCBwYXJhbSBoYXMgdG8gYmUgYW4gb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5zZXRQYXJ0ID0gZnVuY3Rpb24obGFuZywgcGFydCwgdGFibGUpIHtcbiAgICBpZiAoIWlzU3RyaW5nVmFsaWQobGFuZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkblxcJ3Qgc2V0IHBhcnQuYGxhbmdgIHBhcmFtZXRlciBoYXMgdG8gYmUgYSBzdHJpbmchJyk7XG4gICAgfVxuICAgIGlmICghaXNTdHJpbmdWYWxpZChwYXJ0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ291bGRuXFwndCBzZXQgcGFydC5gcGFydGAgcGFyYW1ldGVyIGhhcyB0byBiZSBhIHN0cmluZyEnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0YWJsZSAhPT0gJ29iamVjdCcgfHwgdGFibGUgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkblxcJ3Qgc2V0IHBhcnQuIGB0YWJsZWAgcGFyYW1ldGVyIGhhcyB0byBiZSBhbiBvYmplY3QhJyk7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNQYXJ0KHBhcnQpKSB7XG4gICAgICBwYXJ0c1twYXJ0XSA9IG5ldyBQYXJ0KHBhcnQpO1xuICAgICAgcGFydHNbcGFydF0uaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwYXJ0c1twYXJ0XS50YWJsZXNbbGFuZ10gPSB0YWJsZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJQcm92aWRlciNkZWxldGVQYXJ0XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHByZXZpb3VzbHkgYWRkZWQgcGFydCBvZiB0aGUgdHJhbnNsYXRpb24gZGF0YS4gU28sIGBhbmd1bGFyLXRyYW5zbGF0ZWAgd2lsbCBub3RcbiAgICogbG9hZCBpdCBhdCB0aGUgc3RhcnR1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIG9mIHRoZSBwYXJ0IHRvIGRlbGV0ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSAkdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyLCBzbyB0aGlzIG1ldGhvZCBpcyBjaGFpbmFibGVcbiAgICpcbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBUaGUgbWV0aG9kIGNvdWxkIHRocm93IGEgKipUeXBlRXJyb3IqKiBpZiB5b3UgcGFzcyB0aGUgcGFyYW0gb2YgdGhlIHdyb25nXG4gICAqIHR5cGUuIFBsZWFzZSwgbm90ZSB0aGF0IHRoZSBgbmFtZWAgcGFyYW0gaGFzIHRvIGJlIGEgbm9uLWVtcHR5ICoqc3RyaW5nKiouXG4gICAqL1xuICB0aGlzLmRlbGV0ZVBhcnQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCFpc1N0cmluZ1ZhbGlkKG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZG5cXCd0IGRlbGV0ZSBwYXJ0LCBmaXJzdCBhcmcgaGFzIHRvIGJlIHN0cmluZy4nKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzUGFydChuYW1lKSkge1xuICAgICAgcGFydHNbbmFtZV0uaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyI2lzUGFydEF2YWlsYWJsZVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUGFydGlhbExvYWRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDaGVja3MgaWYgdGhlIHNwZWNpZmljIHBhcnQgaXMgYXZhaWxhYmxlLiBBIHBhcnQgYmVjb21lcyBhdmFpbGFibGUgYWZ0ZXIgaXQgd2FzIGFkZGVkIGJ5IHRoZVxuICAgKiBgYWRkUGFydGAgbWV0aG9kLiBBdmFpbGFibGUgcGFydHMgd291bGQgYmUgbG9hZGVkIGZyb20gdGhlIHNlcnZlciBvbmNlIHRoZSBgYW5ndWxhci10cmFuc2xhdGVgXG4gICAqIGFza3MgdGhlIGxvYWRlciB0byB0aGF0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIG5hbWUgb2YgdGhlIHBhcnQgdG8gY2hlY2tcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgKip0cnVlKiogaWYgdGhlIHBhcnQgaXMgYXZhaWxhYmxlIG5vdyBhbmQgKipmYWxzZSoqIGlmIG5vdC5cbiAgICpcbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBUaGUgbWV0aG9kIGNvdWxkIHRocm93IGEgKipUeXBlRXJyb3IqKiBpZiB5b3UgcGFzcyB0aGUgcGFyYW0gb2YgdGhlIHdyb25nXG4gICAqIHR5cGUuIFBsZWFzZSwgbm90ZSB0aGF0IHRoZSBgbmFtZWAgcGFyYW0gaGFzIHRvIGJlIGEgbm9uLWVtcHR5ICoqc3RyaW5nKiouXG4gICAqL1xuICB0aGlzLmlzUGFydEF2YWlsYWJsZSA9IGlzUGFydEF2YWlsYWJsZTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyXG4gICAqXG4gICAqIEByZXF1aXJlcyAkcVxuICAgKiBAcmVxdWlyZXMgJGh0dHBcbiAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJHRyYW5zbGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICpcbiAgICogQHRocm93cyB7VHlwZUVycm9yfVxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRpbmplY3RvcicsICckcScsICckaHR0cCcsXG4gIGZ1bmN0aW9uKCRyb290U2NvcGUsICRpbmplY3RvciwgJHEsICRodHRwKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyIyR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyU3RydWN0dXJlQ2hhbmdlZFxuICAgICAqIEBldmVudE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJcbiAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyU3RydWN0dXJlQ2hhbmdlZCBldmVudCBpcyBjYWxsZWQgd2hlbiBhIHN0YXRlIG9mIHRoZSBsb2FkZXIgd2FzXG4gICAgICogY2hhbmdlZCBzb21laG93LiBJdCBjb3VsZCBtZWFuIGVpdGhlciBzb21lIHBhcnQgaXMgYWRkZWQgb3Igc29tZSBwYXJ0IGlzIGRlbGV0ZWQuIEFueXdheSB3aGVuXG4gICAgICogeW91IGdldCB0aGlzIGV2ZW50IHRoZSB0cmFuc2xhdGlvbiB0YWJsZSBpcyBub3QgbG9uZ2VyIGN1cnJlbnQgYW5kIGhhcyB0byBiZSB1cGRhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIG9mIHRoZSBwYXJ0IHdoaWNoIGlzIGEgcmVhc29uIHdoeSB0aGUgZXZlbnQgd2FzIGZpcmVkXG4gICAgICovXG5cbiAgICB2YXIgc2VydmljZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghaXNTdHJpbmdWYWxpZChvcHRpb25zLmtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxvYWQgZGF0YSwgYSBrZXkgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZ1ZhbGlkKG9wdGlvbnMudXJsVGVtcGxhdGUpICYmICFhbmd1bGFyLmlzRnVuY3Rpb24ob3B0aW9ucy51cmxUZW1wbGF0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxvYWQgZGF0YSwgYSB1cmxUZW1wbGF0ZSBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIG5vdCBhIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXJyb3JIYW5kbGVyID0gb3B0aW9ucy5sb2FkRmFpbHVyZUhhbmRsZXI7XG4gICAgICBpZiAoZXJyb3JIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzU3RyaW5nKGVycm9ySGFuZGxlcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2FkIGRhdGEsIGEgbG9hZEZhaWx1cmVIYW5kbGVyIGlzIG5vdCBhIHN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIGVycm9ySGFuZGxlciA9ICRpbmplY3Rvci5nZXQoZXJyb3JIYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxvYWRlcnMgPSBbXSxcbiAgICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcHJpb3JpdGl6ZWRQYXJ0cyA9IGdldFByaW9yaXRpemVkUGFydHMoKTtcblxuICAgICAgYW5ndWxhci5mb3JFYWNoKHByaW9yaXRpemVkUGFydHMsIGZ1bmN0aW9uKHBhcnQsIGluZGV4KSB7XG4gICAgICAgIGxvYWRlcnMucHVzaChcbiAgICAgICAgICBwYXJ0LmdldFRhYmxlKG9wdGlvbnMua2V5LCAkcSwgJGh0dHAsIG9wdGlvbnMuJGh0dHAsIG9wdGlvbnMudXJsVGVtcGxhdGUsIGVycm9ySGFuZGxlcilcbiAgICAgICAgKTtcbiAgICAgICAgcGFydC51cmxUZW1wbGF0ZSA9IG9wdGlvbnMudXJsVGVtcGxhdGU7XG4gICAgICB9KTtcblxuICAgICAgJHEuYWxsKGxvYWRlcnMpLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0YWJsZSA9IHt9O1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcmlvcml0aXplZFBhcnRzLCBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgICAgICBkZWVwRXh0ZW5kKHRhYmxlLCBwYXJ0LnRhYmxlc1tvcHRpb25zLmtleV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodGFibGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qob3B0aW9ucy5rZXkpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUGFydGlhbExvYWRlciNhZGRQYXJ0XG4gICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBwYXJ0IG9mIHRoZSB0cmFuc2xhdGlvbiB0YWJsZS4gVGhpcyBtZXRob2QgZG9lcyBub3QgYWN0dWFsbHkgcGVyZm9ybSBhbnkgeGhyXG4gICAgICogcmVxdWVzdHMgdG8gZ2V0IHRyYW5zbGF0aW9uIGRhdGEuIFRoZSBuZXcgcGFydHMgd2lsbCBiZSBsb2FkZWQgaW4gb3JkZXIgb2YgcHJpb3JpdHkgZnJvbSB0aGUgc2VydmVyIG5leHQgdGltZVxuICAgICAqIGBhbmd1bGFyLXRyYW5zbGF0ZWAgYXNrcyB0aGUgbG9hZGVyIHRvIGxvYWQgdHJhbnNsYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIG9mIHRoZSBwYXJ0IHRvIGFkZFxuICAgICAqIEBwYXJhbSB7aW50fSBbcHJpb3JpdHk9MF0gU2V0cyB0aGUgbG9hZCBwcmlvcml0eSBvZiB0aGlzIHBhcnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSAkdHJhbnNsYXRlUGFydGlhbExvYWRlciwgc28gdGhpcyBtZXRob2QgaXMgY2hhaW5hYmxlXG4gICAgICpcbiAgICAgKiBAZmlyZXMgeyR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyU3RydWN0dXJlQ2hhbmdlZH0gVGhlICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyU3RydWN0dXJlQ2hhbmdlZFxuICAgICAqIGV2ZW50IHdvdWxkIGJlIGZpcmVkIGJ5IHRoaXMgbWV0aG9kIGluIGNhc2UgdGhlIG5ldyBwYXJ0IGFmZmVjdGVkIHNvbWVob3cgb24gdGhlIGxvYWRlcnNcbiAgICAgKiBzdGF0ZS4gVGhpcyB3YXkgaXQgbWVhbnMgdGhhdCB0aGVyZSBhcmUgYSBuZXcgdHJhbnNsYXRpb24gZGF0YSBhdmFpbGFibGUgdG8gYmUgbG9hZGVkIGZyb21cbiAgICAgKiB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBUaGUgbWV0aG9kIGNvdWxkIHRocm93IGEgKipUeXBlRXJyb3IqKiBpZiB5b3UgcGFzcyB0aGUgcGFyYW0gb2YgdGhlIHdyb25nXG4gICAgICogdHlwZS4gUGxlYXNlLCBub3RlIHRoYXQgdGhlIGBuYW1lYCBwYXJhbSBoYXMgdG8gYmUgYSBub24tZW1wdHkgKipzdHJpbmcqKi5cbiAgICAgKi9cbiAgICBzZXJ2aWNlLmFkZFBhcnQgPSBmdW5jdGlvbihuYW1lLCBwcmlvcml0eSkge1xuICAgICAgaWYgKCFpc1N0cmluZ1ZhbGlkKG5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvdWxkblxcJ3QgYWRkIHBhcnQsIGZpcnN0IGFyZyBoYXMgdG8gYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNQYXJ0KG5hbWUpKSB7XG4gICAgICAgIHBhcnRzW25hbWVdID0gbmV3IFBhcnQobmFtZSwgcHJpb3JpdHkpO1xuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlUGFydGlhbExvYWRlclN0cnVjdHVyZUNoYW5nZWQnLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoIXBhcnRzW25hbWVdLmlzQWN0aXZlKSB7XG4gICAgICAgIHBhcnRzW25hbWVdLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJTdHJ1Y3R1cmVDaGFuZ2VkJywgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyI2RlbGV0ZVBhcnRcbiAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUGFydGlhbExvYWRlclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGVsZXRlcyB0aGUgcHJldmlvdXNseSBhZGRlZCBwYXJ0IG9mIHRoZSB0cmFuc2xhdGlvbiBkYXRhLiBUaGUgdGFyZ2V0IHBhcnQgY291bGQgYmUgZGVsZXRlZFxuICAgICAqIGVpdGhlciBsb2dpY2FsbHkgb3IgcGh5c2ljYWxseS4gV2hlbiB0aGUgZGF0YSBpcyBkZWxldGVkIGxvZ2ljYWxseSBpdCBpcyBub3QgYWN0dWFsbHkgZGVsZXRlZFxuICAgICAqIGZyb20gdGhlIGJyb3dzZXIsIGJ1dCB0aGUgbG9hZGVyIG1hcmtzIGl0IGFzIG5vdCBhY3RpdmUgYW5kIHByZXZlbnRzIGl0IGZyb20gYWZmZWN0aW5nIG9uIHRoZVxuICAgICAqIHRyYW5zbGF0aW9ucy4gSWYgdGhlIGRlbGV0ZWQgaW4gc3VjaCB3YXkgcGFydCBpcyBhZGRlZCBhZ2FpbiwgdGhlIGxvYWRlciB3aWxsIHVzZSB0aGVcbiAgICAgKiBwcmV2aW91c2x5IGxvYWRlZCBkYXRhIHJhdGhlciB0aGFuIGxvYWRpbmcgaXQgZnJvbSB0aGUgc2VydmVyIG9uY2UgbW9yZSB0aW1lLiBCdXQgaWYgdGhlIGRhdGFcbiAgICAgKiBpcyBkZWxldGVkIHBoeXNpY2FsbHksIHRoZSBsb2FkZXIgd2lsbCBjb21wbGV0ZWx5IHJlbW92ZSBhbGwgaW5mb3JtYXRpb24gYWJvdXQgaXQuIFNvIGluIGNhc2VcbiAgICAgKiBvZiByZWN5Y2xpbmcgdGhpcyBwYXJ0IHdpbGwgYmUgbG9hZGVkIGZyb20gdGhlIHNlcnZlciBhZ2Fpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgbmFtZSBvZiB0aGUgcGFydCB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbcmVtb3ZlRGF0YT1mYWxzZV0gQW4gaW5kaWNhdG9yIGlmIHRoZSBsb2FkZXIgaGFzIHRvIHJlbW92ZSBhIGxvYWRlZFxuICAgICAqIHRyYW5zbGF0aW9uIGRhdGEgcGh5c2ljYWxseS4gSWYgdGhlIGByZW1vdmVEYXRhYCBpZiBzZXQgdG8gKipmYWxzZSoqIHRoZSBsb2FkZWQgZGF0YSB3aWxsIG5vdCBiZVxuICAgICAqIGRlbGV0ZWQgcGh5c2ljYWxseSBhbmQgbWlnaHQgYmUgcmV1c2VkIGluIHRoZSBmdXR1cmUgdG8gcHJldmVudCBhbiBhZGRpdGlvbmFsIHhociByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9ICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyLCBzbyB0aGlzIG1ldGhvZCBpcyBjaGFpbmFibGVcbiAgICAgKlxuICAgICAqIEBmaXJlcyB7JHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJTdHJ1Y3R1cmVDaGFuZ2VkfSBUaGUgJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJTdHJ1Y3R1cmVDaGFuZ2VkXG4gICAgICogZXZlbnQgd291bGQgYmUgZmlyZWQgYnkgdGhpcyBtZXRob2QgaW4gY2FzZSBhIHBhcnQgZGVsZXRpb24gcHJvY2VzcyBhZmZlY3RzIHNvbWVob3cgb24gdGhlXG4gICAgICogbG9hZGVycyBzdGF0ZS4gVGhpcyB3YXkgaXQgbWVhbnMgdGhhdCBzb21lIHBhcnQgb2YgdGhlIHRyYW5zbGF0aW9uIGRhdGEgaXMgbm93IGRlcHJlY2F0ZWQgYW5kXG4gICAgICogdGhlIHRyYW5zbGF0aW9uIHRhYmxlIGhhcyB0byBiZSByZWNvbXBpbGVkIHdpdGggdGhlIHJlbWFpbmluZyB0cmFuc2xhdGlvbiBwYXJ0cy5cbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gVGhlIG1ldGhvZCBjb3VsZCB0aHJvdyBhICoqVHlwZUVycm9yKiogaWYgeW91IHBhc3Mgc29tZSBwYXJhbSBvZiB0aGVcbiAgICAgKiB3cm9uZyB0eXBlLiBQbGVhc2UsIG5vdGUgdGhhdCB0aGUgYG5hbWVgIHBhcmFtIGhhcyB0byBiZSBhIG5vbi1lbXB0eSAqKnN0cmluZyoqIGFuZFxuICAgICAqIHRoZSBgcmVtb3ZlRGF0YWAgcGFyYW0gaGFzIHRvIGJlIGVpdGhlciAqKnVuZGVmaW5lZCoqIG9yICoqYm9vbGVhbioqLlxuICAgICAqL1xuICAgIHNlcnZpY2UuZGVsZXRlUGFydCA9IGZ1bmN0aW9uKG5hbWUsIHJlbW92ZURhdGEpIHtcbiAgICAgIGlmICghaXNTdHJpbmdWYWxpZChuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZG5cXCd0IGRlbGV0ZSBwYXJ0LCBmaXJzdCBhcmcgaGFzIHRvIGJlIHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbW92ZURhdGEgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlbW92ZURhdGEgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHR5cGUgb2YgYSBzZWNvbmQgYXJndW1lbnQsIGEgYm9vbGVhbiBleHBlY3RlZC4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc1BhcnQobmFtZSkpIHtcbiAgICAgICAgdmFyIHdhc0FjdGl2ZSA9IHBhcnRzW25hbWVdLmlzQWN0aXZlO1xuICAgICAgICBpZiAocmVtb3ZlRGF0YSkge1xuICAgICAgICAgIHZhciAkdHJhbnNsYXRlID0gJGluamVjdG9yLmdldCgnJHRyYW5zbGF0ZScpO1xuICAgICAgICAgIHZhciBjYWNoZSA9ICR0cmFuc2xhdGUubG9hZGVyQ2FjaGUoKTtcbiAgICAgICAgICBpZiAodHlwZW9mKGNhY2hlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIGdldHRpbmcgb24tZGVtYW5kIGluc3RhbmNlIG9mIGxvYWRlclxuICAgICAgICAgICAgY2FjaGUgPSAkaW5qZWN0b3IuZ2V0KGNhY2hlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUHVyZ2luZyBpdGVtcyBmcm9tIGNhY2hlLi4uXG4gICAgICAgICAgaWYgKHR5cGVvZihjYWNoZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocGFydHNbbmFtZV0udGFibGVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHBhcnRzW25hbWVdLnBhcnNlVXJsKHBhcnRzW25hbWVdLnVybFRlbXBsYXRlLCBrZXkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgcGFydHNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHNbbmFtZV0uaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzQWN0aXZlKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJTdHJ1Y3R1cmVDaGFuZ2VkJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXIjaXNQYXJ0TG9hZGVkXG4gICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENoZWNrcyBpZiB0aGUgcmVnaXN0ZXJlZCB0cmFuc2xhdGlvbiBwYXJ0IGlzIGxvYWRlZCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0YWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgbmFtZSBvZiB0aGUgcGFydFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5nIEEga2V5IG9mIHRoZSBsYW5ndWFnZVxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgKip0cnVlKiogaWYgdGhlIHRyYW5zbGF0aW9uIG9mIHRoZSBwYXJ0IGlzIGxvYWRlZCB0byB0aGUgdHJhbnNsYXRpb24gdGFibGUgYW5kICoqZmFsc2UqKiBpZiBub3QuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IFRoZSBtZXRob2QgY291bGQgdGhyb3cgYSAqKlR5cGVFcnJvcioqIGlmIHlvdSBwYXNzIHRoZSBwYXJhbSBvZiB0aGUgd3JvbmdcbiAgICAgKiB0eXBlLiBQbGVhc2UsIG5vdGUgdGhhdCB0aGUgYG5hbWVgIGFuZCBgbGFuZ2AgcGFyYW1zIGhhdmUgdG8gYmUgbm9uLWVtcHR5ICoqc3RyaW5nKiouXG4gICAgICovXG4gICAgc2VydmljZS5pc1BhcnRMb2FkZWQgPSBmdW5jdGlvbihuYW1lLCBsYW5nKSB7XG4gICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQocGFydHNbbmFtZV0pICYmIGFuZ3VsYXIuaXNEZWZpbmVkKHBhcnRzW25hbWVdLnRhYmxlc1tsYW5nXSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXIjZ2V0UmVnaXN0ZXJlZFBhcnRzXG4gICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEdldHMgbmFtZXMgb2YgdGhlIHBhcnRzIHRoYXQgd2VyZSBhZGRlZCB3aXRoIHRoZSBgYWRkUGFydGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9IFJldHVybnMgYXJyYXkgb2YgcmVnaXN0ZXJlZCBwYXJ0cywgaWYgbm9uZSB3ZXJlIHJlZ2lzdGVyZWQgdGhlbiBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBzZXJ2aWNlLmdldFJlZ2lzdGVyZWRQYXJ0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlZ2lzdGVyZWRQYXJ0cyA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHBhcnRzLCBmdW5jdGlvbihwKXtcbiAgICAgICAgaWYocC5pc0FjdGl2ZSkge1xuICAgICAgICAgIHJlZ2lzdGVyZWRQYXJ0cy5wdXNoKHAubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRQYXJ0cztcbiAgICB9O1xuXG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXIjaXNQYXJ0QXZhaWxhYmxlXG4gICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENoZWNrcyBpZiBhIHRhcmdldCB0cmFuc2xhdGlvbiBwYXJ0IGlzIGF2YWlsYWJsZS4gVGhlIHBhcnQgYmVjb21lcyBhdmFpbGFibGUganVzdCBhZnRlciBpdCB3YXNcbiAgICAgKiBhZGRlZCBieSB0aGUgYGFkZFBhcnRgIG1ldGhvZC4gUGFydCdzIGF2YWlsYWJpbGl0eSBkb2VzIG5vdCBtZWFuIHRoYXQgaXQgd2FzIGxvYWRlZCBmcm9tIHRoZVxuICAgICAqIHNlcnZlciwgYnV0IG9ubHkgdGhhdCBpdCB3YXMgYWRkZWQgdG8gdGhlIGxvYWRlci4gVGhlIGF2YWlsYWJsZSBwYXJ0IG1pZ2h0IGJlIGxvYWRlZCBuZXh0XG4gICAgICogdGltZSB0aGUgbG9hZGVyIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgbmFtZSBvZiB0aGUgcGFydCB0byBkZWxldGVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zICoqdHJ1ZSoqIGlmIHRoZSBwYXJ0IGlzIGF2YWlsYWJsZSBub3cgYW5kICoqZmFsc2UqKiBpZiBub3QuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IFRoZSBtZXRob2QgY291bGQgdGhyb3cgYSAqKlR5cGVFcnJvcioqIGlmIHlvdSBwYXNzIHRoZSBwYXJhbSBvZiB0aGUgd3JvbmdcbiAgICAgKiB0eXBlLiBQbGVhc2UsIG5vdGUgdGhhdCB0aGUgYG5hbWVgIHBhcmFtIGhhcyB0byBiZSBhIG5vbi1lbXB0eSAqKnN0cmluZyoqLlxuICAgICAqL1xuICAgIHNlcnZpY2UuaXNQYXJ0QXZhaWxhYmxlID0gaXNQYXJ0QXZhaWxhYmxlO1xuXG4gICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgfV07XG5cbn0pO1xucmV0dXJuICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJztcblxufSkpO1xuIiwiLyohIFxuICogYW5ndWxhci1sb2FkaW5nLWJhciB2MC43LjFcbiAqIGh0dHBzOi8vY2hpZWZmYW5jeXBhbnRzLmdpdGh1Yi5pby9hbmd1bGFyLWxvYWRpbmctYmFyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgV2VzIENydXZlclxuICogTGljZW5zZTogTUlUXG4gKi9cbi8qXG4gKiBhbmd1bGFyLWxvYWRpbmctYmFyXG4gKlxuICogaW50ZXJjZXB0cyBYSFIgcmVxdWVzdHMgYW5kIGNyZWF0ZXMgYSBsb2FkaW5nIGJhci5cbiAqIEJhc2VkIG9uIHRoZSBleGNlbGxlbnQgbnByb2dyZXNzIHdvcmsgYnkgcnN0YWNydXogKG1vcmUgaW5mbyBpbiByZWFkbWUpXG4gKlxuICogKGMpIDIwMTMgV2VzIENydXZlclxuICogTGljZW5zZTogTUlUXG4gKi9cblxuXG4oZnVuY3Rpb24oKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gQWxpYXMgdGhlIGxvYWRpbmcgYmFyIGZvciB2YXJpb3VzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXRpZXMgc2luY2UgdGhlIHByb2plY3QgaGFzIG1hdHVyZWQ6XG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1sb2FkaW5nLWJhcicsIFsnY2ZwLmxvYWRpbmdCYXJJbnRlcmNlcHRvciddKTtcbmFuZ3VsYXIubW9kdWxlKCdjaGllZmZhbmN5cGFudHMubG9hZGluZ0JhcicsIFsnY2ZwLmxvYWRpbmdCYXJJbnRlcmNlcHRvciddKTtcblxuXG4vKipcbiAqIGxvYWRpbmdCYXJJbnRlcmNlcHRvciBzZXJ2aWNlXG4gKlxuICogUmVnaXN0ZXJzIGl0c2VsZiBhcyBhbiBBbmd1bGFyIGludGVyY2VwdG9yIGFuZCBsaXN0ZW5zIGZvciBYSFIgcmVxdWVzdHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjZnAubG9hZGluZ0JhckludGVyY2VwdG9yJywgWydjZnAubG9hZGluZ0JhciddKVxuICAuY29uZmlnKFsnJGh0dHBQcm92aWRlcicsIGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyKSB7XG5cbiAgICB2YXIgaW50ZXJjZXB0b3IgPSBbJyRxJywgJyRjYWNoZUZhY3RvcnknLCAnJHRpbWVvdXQnLCAnJHJvb3RTY29wZScsICckbG9nJywgJ2NmcExvYWRpbmdCYXInLCBmdW5jdGlvbiAoJHEsICRjYWNoZUZhY3RvcnksICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkbG9nLCBjZnBMb2FkaW5nQmFyKSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRvdGFsIG51bWJlciBvZiByZXF1ZXN0cyBtYWRlXG4gICAgICAgKi9cbiAgICAgIHZhciByZXFzVG90YWwgPSAwO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgcmVxdWVzdHMgY29tcGxldGVkIChlaXRoZXIgc3VjY2Vzc2Z1bGx5IG9yIG5vdClcbiAgICAgICAqL1xuICAgICAgdmFyIHJlcXNDb21wbGV0ZWQgPSAwO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSBzcGVudCBmZXRjaGluZyBiZWZvcmUgc2hvd2luZyB0aGUgbG9hZGluZyBiYXJcbiAgICAgICAqL1xuICAgICAgdmFyIGxhdGVuY3lUaHJlc2hvbGQgPSBjZnBMb2FkaW5nQmFyLmxhdGVuY3lUaHJlc2hvbGQ7XG5cbiAgICAgIC8qKlxuICAgICAgICogJHRpbWVvdXQgaGFuZGxlIGZvciBsYXRlbmN5VGhyZXNob2xkXG4gICAgICAgKi9cbiAgICAgIHZhciBzdGFydFRpbWVvdXQ7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBjYWxscyBjZnBMb2FkaW5nQmFyLmNvbXBsZXRlKCkgd2hpY2ggcmVtb3ZlcyB0aGVcbiAgICAgICAqIGxvYWRpbmcgYmFyIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2V0Q29tcGxldGUoKSB7XG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChzdGFydFRpbWVvdXQpO1xuICAgICAgICBjZnBMb2FkaW5nQmFyLmNvbXBsZXRlKCk7XG4gICAgICAgIHJlcXNDb21wbGV0ZWQgPSAwO1xuICAgICAgICByZXFzVG90YWwgPSAwO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERldGVybWluZSBpZiB0aGUgcmVzcG9uc2UgaGFzIGFscmVhZHkgYmVlbiBjYWNoZWRcbiAgICAgICAqIEBwYXJhbSAge09iamVjdH0gIGNvbmZpZyB0aGUgY29uZmlnIG9wdGlvbiBmcm9tIHRoZSByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSByZXRybnMgdHJ1ZSBpZiBjYWNoZWQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBpc0NhY2hlZChjb25maWcpIHtcbiAgICAgICAgdmFyIGNhY2hlO1xuICAgICAgICB2YXIgZGVmYXVsdENhY2hlID0gJGNhY2hlRmFjdG9yeS5nZXQoJyRodHRwJyk7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9ICRodHRwUHJvdmlkZXIuZGVmYXVsdHM7XG5cbiAgICAgICAgLy8gQ2hvb3NlIHRoZSBwcm9wZXIgY2FjaGUgc291cmNlLiBCb3Jyb3dlZCBmcm9tIGFuZ3VsYXI6ICRodHRwIHNlcnZpY2VcbiAgICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHtcbiAgICAgICAgICAgIGNhY2hlID0gYW5ndWxhci5pc09iamVjdChjb25maWcuY2FjaGUpID8gY29uZmlnLmNhY2hlXG4gICAgICAgICAgICAgIDogYW5ndWxhci5pc09iamVjdChkZWZhdWx0cy5jYWNoZSkgPyBkZWZhdWx0cy5jYWNoZVxuICAgICAgICAgICAgICA6IGRlZmF1bHRDYWNoZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICBjYWNoZS5nZXQoY29uZmlnLnVybCkgIT09IHVuZGVmaW5lZCA6IGZhbHNlO1xuXG4gICAgICAgIGlmIChjb25maWcuY2FjaGVkICE9PSB1bmRlZmluZWQgJiYgY2FjaGVkICE9PSBjb25maWcuY2FjaGVkKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZy5jYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLmNhY2hlZCA9IGNhY2hlZDtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgIH1cblxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGlzIHJlcXVlc3QgaGFzbid0IGFscmVhZHkgYmVlbiBjYWNoZWQgYW5kIHRoYXRcbiAgICAgICAgICAvLyB0aGUgcmVxdWVzdGVyIGRpZG4ndCBleHBsaWNpdGx5IGFzayB1cyB0byBpZ25vcmUgdGhpcyByZXF1ZXN0OlxuICAgICAgICAgIGlmICghY29uZmlnLmlnbm9yZUxvYWRpbmdCYXIgJiYgIWlzQ2FjaGVkKGNvbmZpZykpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY2ZwTG9hZGluZ0Jhcjpsb2FkaW5nJywge3VybDogY29uZmlnLnVybH0pO1xuICAgICAgICAgICAgaWYgKHJlcXNUb3RhbCA9PT0gMCkge1xuICAgICAgICAgICAgICBzdGFydFRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjZnBMb2FkaW5nQmFyLnN0YXJ0KCk7XG4gICAgICAgICAgICAgIH0sIGxhdGVuY3lUaHJlc2hvbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxc1RvdGFsKys7XG4gICAgICAgICAgICBjZnBMb2FkaW5nQmFyLnNldChyZXFzQ29tcGxldGVkIC8gcmVxc1RvdGFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcblxuICAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLmNvbmZpZykge1xuICAgICAgICAgICAgJGxvZy5lcnJvcignQnJva2VuIGludGVyY2VwdG9yIGRldGVjdGVkOiBDb25maWcgb2JqZWN0IG5vdCBzdXBwbGllZCBpbiByZXNwb25zZTpcXG4gaHR0cHM6Ly9naXRodWIuY29tL2NoaWVmZmFuY3lwYW50cy9hbmd1bGFyLWxvYWRpbmctYmFyL3B1bGwvNTAnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXJlc3BvbnNlLmNvbmZpZy5pZ25vcmVMb2FkaW5nQmFyICYmICFpc0NhY2hlZChyZXNwb25zZS5jb25maWcpKSB7XG4gICAgICAgICAgICByZXFzQ29tcGxldGVkKys7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2NmcExvYWRpbmdCYXI6bG9hZGVkJywge3VybDogcmVzcG9uc2UuY29uZmlnLnVybCwgcmVzdWx0OiByZXNwb25zZX0pO1xuICAgICAgICAgICAgaWYgKHJlcXNDb21wbGV0ZWQgPj0gcmVxc1RvdGFsKSB7XG4gICAgICAgICAgICAgIHNldENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjZnBMb2FkaW5nQmFyLnNldChyZXFzQ29tcGxldGVkIC8gcmVxc1RvdGFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9LFxuXG4gICAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKCFyZWplY3Rpb24gfHwgIXJlamVjdGlvbi5jb25maWcpIHtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoJ0Jyb2tlbiBpbnRlcmNlcHRvciBkZXRlY3RlZDogQ29uZmlnIG9iamVjdCBub3Qgc3VwcGxpZWQgaW4gcmVqZWN0aW9uOlxcbiBodHRwczovL2dpdGh1Yi5jb20vY2hpZWZmYW5jeXBhbnRzL2FuZ3VsYXItbG9hZGluZy1iYXIvcHVsbC81MCcpO1xuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcmVqZWN0aW9uLmNvbmZpZy5pZ25vcmVMb2FkaW5nQmFyICYmICFpc0NhY2hlZChyZWplY3Rpb24uY29uZmlnKSkge1xuICAgICAgICAgICAgcmVxc0NvbXBsZXRlZCsrO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdjZnBMb2FkaW5nQmFyOmxvYWRlZCcsIHt1cmw6IHJlamVjdGlvbi5jb25maWcudXJsLCByZXN1bHQ6IHJlamVjdGlvbn0pO1xuICAgICAgICAgICAgaWYgKHJlcXNDb21wbGV0ZWQgPj0gcmVxc1RvdGFsKSB7XG4gICAgICAgICAgICAgIHNldENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjZnBMb2FkaW5nQmFyLnNldChyZXFzQ29tcGxldGVkIC8gcmVxc1RvdGFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvcik7XG4gIH1dKTtcblxuXG4vKipcbiAqIExvYWRpbmcgQmFyXG4gKlxuICogVGhpcyBzZXJ2aWNlIGhhbmRsZXMgYWRkaW5nIGFuZCByZW1vdmluZyB0aGUgYWN0dWFsIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAqIEdlbmVyYWxseSwgYmVzdCBwcmFjdGljZXMgZm9yIERPTSBtYW5pcHVsYXRpb24gaXMgdG8gdGFrZSBwbGFjZSBpbiBhXG4gKiBkaXJlY3RpdmUsIGJ1dCBiZWNhdXNlIHRoZSBlbGVtZW50IGl0c2VsZiBpcyBpbmplY3RlZCBpbiB0aGUgRE9NIG9ubHkgdXBvblxuICogWEhSIHJlcXVlc3RzLCBhbmQgaXQncyBsaWtlbHkgbmVlZGVkIG9uIGV2ZXJ5IHZpZXcsIHRoZSBiZXN0IG9wdGlvbiBpcyB0b1xuICogdXNlIGEgc2VydmljZS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NmcC5sb2FkaW5nQmFyJywgW10pXG4gIC5wcm92aWRlcignY2ZwTG9hZGluZ0JhcicsIGZ1bmN0aW9uKCkge1xuXG4gICAgdGhpcy5pbmNsdWRlU3Bpbm5lciA9IHRydWU7XG4gICAgdGhpcy5pbmNsdWRlQmFyID0gdHJ1ZTtcbiAgICB0aGlzLmxhdGVuY3lUaHJlc2hvbGQgPSAxMDA7XG4gICAgdGhpcy5zdGFydFNpemUgPSAwLjAyO1xuICAgIHRoaXMucGFyZW50U2VsZWN0b3IgPSAnYm9keSc7XG4gICAgdGhpcy5zcGlubmVyVGVtcGxhdGUgPSAnPGRpdiBpZD1cImxvYWRpbmctYmFyLXNwaW5uZXJcIj48ZGl2IGNsYXNzPVwic3Bpbm5lci1pY29uXCI+PC9kaXY+PC9kaXY+JztcbiAgICB0aGlzLmxvYWRpbmdCYXJUZW1wbGF0ZSA9ICc8ZGl2IGlkPVwibG9hZGluZy1iYXJcIj48ZGl2IGNsYXNzPVwiYmFyXCI+PGRpdiBjbGFzcz1cInBlZ1wiPjwvZGl2PjwvZGl2PjwvZGl2Pic7XG5cbiAgICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckZG9jdW1lbnQnLCAnJHRpbWVvdXQnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkaW5qZWN0b3IsICRkb2N1bWVudCwgJHRpbWVvdXQsICRyb290U2NvcGUpIHtcbiAgICAgIHZhciAkYW5pbWF0ZTtcbiAgICAgIHZhciAkcGFyZW50U2VsZWN0b3IgPSB0aGlzLnBhcmVudFNlbGVjdG9yLFxuICAgICAgICBsb2FkaW5nQmFyQ29udGFpbmVyID0gYW5ndWxhci5lbGVtZW50KHRoaXMubG9hZGluZ0JhclRlbXBsYXRlKSxcbiAgICAgICAgbG9hZGluZ0JhciA9IGxvYWRpbmdCYXJDb250YWluZXIuZmluZCgnZGl2JykuZXEoMCksXG4gICAgICAgIHNwaW5uZXIgPSBhbmd1bGFyLmVsZW1lbnQodGhpcy5zcGlubmVyVGVtcGxhdGUpO1xuXG4gICAgICB2YXIgaW5jVGltZW91dCxcbiAgICAgICAgY29tcGxldGVUaW1lb3V0LFxuICAgICAgICBzdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHN0YXR1cyA9IDA7XG5cbiAgICAgIHZhciBpbmNsdWRlU3Bpbm5lciA9IHRoaXMuaW5jbHVkZVNwaW5uZXI7XG4gICAgICB2YXIgaW5jbHVkZUJhciA9IHRoaXMuaW5jbHVkZUJhcjtcbiAgICAgIHZhciBzdGFydFNpemUgPSB0aGlzLnN0YXJ0U2l6ZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBJbnNlcnRzIHRoZSBsb2FkaW5nIGJhciBlbGVtZW50IGludG8gdGhlIGRvbSwgYW5kIHNldHMgaXQgdG8gMiVcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gX3N0YXJ0KCkge1xuICAgICAgICBpZiAoISRhbmltYXRlKSB7XG4gICAgICAgICAgJGFuaW1hdGUgPSAkaW5qZWN0b3IuZ2V0KCckYW5pbWF0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICRwYXJlbnQgPSAkZG9jdW1lbnQuZmluZCgkcGFyZW50U2VsZWN0b3IpLmVxKDApO1xuICAgICAgICAkdGltZW91dC5jYW5jZWwoY29tcGxldGVUaW1lb3V0KTtcblxuICAgICAgICAvLyBkbyBub3QgY29udGludWFsbHkgYnJvYWRjYXN0IHRoZSBzdGFydGVkIGV2ZW50OlxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY2ZwTG9hZGluZ0JhcjpzdGFydGVkJyk7XG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChpbmNsdWRlQmFyKSB7XG4gICAgICAgICAgJGFuaW1hdGUuZW50ZXIobG9hZGluZ0JhckNvbnRhaW5lciwgJHBhcmVudCwgYW5ndWxhci5lbGVtZW50KCRwYXJlbnRbMF0ubGFzdENoaWxkKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jbHVkZVNwaW5uZXIpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihzcGlubmVyLCAkcGFyZW50LCBhbmd1bGFyLmVsZW1lbnQoJHBhcmVudFswXS5sYXN0Q2hpbGQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zZXQoc3RhcnRTaXplKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgdGhlIGxvYWRpbmcgYmFyJ3Mgd2lkdGggdG8gYSBjZXJ0YWluIHBlcmNlbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIG4gYW55IHZhbHVlIGJldHdlZW4gMCBhbmQgMVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBfc2V0KG4pIHtcbiAgICAgICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwY3QgPSAobiAqIDEwMCkgKyAnJSc7XG4gICAgICAgIGxvYWRpbmdCYXIuY3NzKCd3aWR0aCcsIHBjdCk7XG4gICAgICAgIHN0YXR1cyA9IG47XG5cbiAgICAgICAgLy8gaW5jcmVtZW50IGxvYWRpbmdiYXIgdG8gZ2l2ZSB0aGUgaWxsdXNpb24gdGhhdCB0aGVyZSBpcyBhbHdheXNcbiAgICAgICAgLy8gcHJvZ3Jlc3MgYnV0IG1ha2Ugc3VyZSB0byBjYW5jZWwgdGhlIHByZXZpb3VzIHRpbWVvdXRzIHNvIHdlIGRvbid0XG4gICAgICAgIC8vIGhhdmUgbXVsdGlwbGUgaW5jcyBydW5uaW5nIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChpbmNUaW1lb3V0KTtcbiAgICAgICAgaW5jVGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF9pbmMoKTtcbiAgICAgICAgfSwgMjUwKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBJbmNyZW1lbnRzIHRoZSBsb2FkaW5nIGJhciBieSBhIHJhbmRvbSBhbW91bnRcbiAgICAgICAqIGJ1dCBzbG93cyBkb3duIGFzIGl0IHByb2dyZXNzZXNcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gX2luYygpIHtcbiAgICAgICAgaWYgKF9zdGF0dXMoKSA+PSAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJuZCA9IDA7XG5cbiAgICAgICAgLy8gVE9ETzogZG8gdGhpcyBtYXRobWF0aWNhbGx5IGluc3RlYWQgb2YgdGhyb3VnaCBjb25kaXRpb25zXG5cbiAgICAgICAgdmFyIHN0YXQgPSBfc3RhdHVzKCk7XG4gICAgICAgIGlmIChzdGF0ID49IDAgJiYgc3RhdCA8IDAuMjUpIHtcbiAgICAgICAgICAvLyBTdGFydCBvdXQgYmV0d2VlbiAzIC0gNiUgaW5jcmVtZW50c1xuICAgICAgICAgIHJuZCA9IChNYXRoLnJhbmRvbSgpICogKDUgLSAzICsgMSkgKyAzKSAvIDEwMDtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ID49IDAuMjUgJiYgc3RhdCA8IDAuNjUpIHtcbiAgICAgICAgICAvLyBpbmNyZW1lbnQgYmV0d2VlbiAwIC0gMyVcbiAgICAgICAgICBybmQgPSAoTWF0aC5yYW5kb20oKSAqIDMpIC8gMTAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXQgPj0gMC42NSAmJiBzdGF0IDwgMC45KSB7XG4gICAgICAgICAgLy8gaW5jcmVtZW50IGJldHdlZW4gMCAtIDIlXG4gICAgICAgICAgcm5kID0gKE1hdGgucmFuZG9tKCkgKiAyKSAvIDEwMDtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ID49IDAuOSAmJiBzdGF0IDwgMC45OSkge1xuICAgICAgICAgIC8vIGZpbmFsbHksIGluY3JlbWVudCBpdCAuNSAlXG4gICAgICAgICAgcm5kID0gMC4wMDU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYWZ0ZXIgOTklLCBkb24ndCBpbmNyZW1lbnQ6XG4gICAgICAgICAgcm5kID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwY3QgPSBfc3RhdHVzKCkgKyBybmQ7XG4gICAgICAgIF9zZXQocGN0KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3N0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX2NvbXBsZXRlQW5pbWF0aW9uKCkge1xuICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF9jb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKCEkYW5pbWF0ZSkge1xuICAgICAgICAgICRhbmltYXRlID0gJGluamVjdG9yLmdldCgnJGFuaW1hdGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY2ZwTG9hZGluZ0Jhcjpjb21wbGV0ZWQnKTtcbiAgICAgICAgX3NldCgxKTtcblxuICAgICAgICAkdGltZW91dC5jYW5jZWwoY29tcGxldGVUaW1lb3V0KTtcblxuICAgICAgICAvLyBBdHRlbXB0IHRvIGFnZ3JlZ2F0ZSBhbnkgc3RhcnQvY29tcGxldGUgY2FsbHMgd2l0aGluIDUwMG1zOlxuICAgICAgICBjb21wbGV0ZVRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRhbmltYXRlLmxlYXZlKGxvYWRpbmdCYXJDb250YWluZXIsIF9jb21wbGV0ZUFuaW1hdGlvbik7XG4gICAgICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS50aGVuKSB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4oX2NvbXBsZXRlQW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoc3Bpbm5lcik7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0ICAgICAgICAgICAgOiBfc3RhcnQsXG4gICAgICAgIHNldCAgICAgICAgICAgICAgOiBfc2V0LFxuICAgICAgICBzdGF0dXMgICAgICAgICAgIDogX3N0YXR1cyxcbiAgICAgICAgaW5jICAgICAgICAgICAgICA6IF9pbmMsXG4gICAgICAgIGNvbXBsZXRlICAgICAgICAgOiBfY29tcGxldGUsXG4gICAgICAgIGluY2x1ZGVTcGlubmVyICAgOiB0aGlzLmluY2x1ZGVTcGlubmVyLFxuICAgICAgICBsYXRlbmN5VGhyZXNob2xkIDogdGhpcy5sYXRlbmN5VGhyZXNob2xkLFxuICAgICAgICBwYXJlbnRTZWxlY3RvciAgIDogdGhpcy5wYXJlbnRTZWxlY3RvcixcbiAgICAgICAgc3RhcnRTaXplICAgICAgICA6IHRoaXMuc3RhcnRTaXplXG4gICAgICB9O1xuXG5cbiAgICB9XTsgICAgIC8vXG4gIH0pOyAgICAgICAvLyB3dGYgamF2YXNjcmlwdC4gc3JzbHlcbn0pKCk7ICAgICAgIC8vXG4iLCIvKiEgUG9seWdsb3QgTGFuZ3VhZ2UgU3dpdGNoZXIgMiAtIHYxLjAuMCAtIDIwMTUtMDItMjBcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9peHRlbmRvL1BvbHlnbG90LUxhbmd1YWdlLVN3aXRjaGVyLTIvXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IEl4dGVuZG87XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cblxuYW5ndWxhci5tb2R1bGUoJ3BvbHlnbG90TGFuZ3VhZ2VTd2l0Y2hlcicsIFtdKVxuICAgIC5kaXJlY3RpdmUoJ3BscycsIFsnJGRvY3VtZW50JywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRkb2N1bWVudCwgJHRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBpdGVtczogJz0nLFxuICAgICAgICAgICAgICAgIGlkOiAnQCcsXG4gICAgICAgICAgICAgICAgaG92ZXJUaW1lb3V0OiAnQCcsXG4gICAgICAgICAgICAgICAgb3Blbk1vZGU6ICdAJyxcbiAgICAgICAgICAgICAgICBncmlkQ29sdW1uczogJ0AnLFxuICAgICAgICAgICAgICAgIHNob3dGbGFnOiAnQCcsXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMYW5nOiAnQCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRMYW5nID0gJHNjb3BlLnNlbGVjdGVkTGFuZztcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IE1hdGgucm91bmQoJHNjb3BlLml0ZW1zLmxlbmd0aCAvIHBhcnNlSW50KCRzY29wZS5ncmlkQ29sdW1ucykpO1xuICAgICAgICAgICAgICAgIHZhciBob3ZlclRpbWVvdXQgPSAkc2NvcGUuaG92ZXJUaW1lb3V0O1xuICAgICAgICAgICAgICAgIGlmICghaG92ZXJUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyVGltZW91dCA9IDIwMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaG92ZXJUaW1lb3V0UHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGRvY3VtZW50Q2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudEtleUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJlcGFyZU1vZGVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRMYW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0ZsYWc6ICgkc2NvcGUuc2hvd0ZsYWcgPT09ICd0cnVlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBbXVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAxO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUubW9kZWwuc2VsZWN0ZWRMYW5nICYmIGl0ZW0uaWQgPT09IHNlbGVjdGVkTGFuZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbC5zZWxlY3RlZExhbmcgPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIGNvbHVtbnMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwuY29sdW1ucy5wdXNoKGNvbHVtbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbC5jb2x1bW5zLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUubW9kZWwuc2VsZWN0ZWRMYW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwuc2VsZWN0ZWRMYW5nID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgb3BlblBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5tb2RlbC5vcGVuZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncGxzLnBvcHVwT3BlbmluZycsIHtpZDogJHNjb3BlLmlkfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwub3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBkb2N1bWVudENsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub24oJ2tleWRvd24nLCBkb2N1bWVudEtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdwbHMucG9wdXBPcGVuZWQnLCB7aWQ6ICRzY29wZS5pZH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsb3NlUG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubW9kZWwub3BlbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3Bscy5wb3B1cENsb3NpbmcnLCB7aWQ6ICRzY29wZS5pZH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBkb2N1bWVudENsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub2ZmKCdrZXlkb3duJywgZG9jdW1lbnRLZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbC5vcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncGxzLnBvcHVwQ2xvc2VkJywge2lkOiAkc2NvcGUuaWR9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5vbk1vdXNlRW50ZXJPckxlYXZlID0gZnVuY3Rpb24gKG1vdXNlRW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdXNlRW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3ZlclRpbWVvdXRQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGhvdmVyVGltZW91dFByb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyVGltZW91dFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlblBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhvdmVyVGltZW91dFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3ZlclRpbWVvdXRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaG92ZXJUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5vbkNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLm1vZGVsLm9wZW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlblBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUub25MYW5ndWFnZUNoYW5nZWQgPSBmdW5jdGlvbiAoZXZ0LCBzZWxlY3RlZExhbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjbG9zZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhbmcuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwuc2VsZWN0ZWRMYW5nID0gc2VsZWN0ZWRMYW5nO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3Bscy5vbkxhbmd1YWdlQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAkc2NvcGUuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiBhbmd1bGFyLmNvcHkoc2VsZWN0ZWRMYW5nKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBwcmVwYXJlTW9kZWwoKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgdGVtcGxhdGU6IGZ1bmN0aW9uIChjb250ZXh0LCAkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cInBvbHlnbG90LWxhbmd1YWdlLXN3aXRjaGVyIG5nLXBvbHlnbG90LWxhbmd1YWdlLXN3aXRjaGVyXCI+JztcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm9wZW5Nb2RlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlICs9ICc8YSBjbGFzcz1cInBscy1zZWxlY3RlZC1sb2NhbGVcIiBocmVmPVwiI1wiIGRhdGEtbmctbW91c2VlbnRlcj1cIm9uTW91c2VFbnRlck9yTGVhdmUodHJ1ZSlcIiBkYXRhLW5nLW1vdXNlbGVhdmU9XCJvbk1vdXNlRW50ZXJPckxlYXZlKGZhbHNlKVwiPjxpbWcgZGF0YS1uZy1pZj1cIm1vZGVsLnNob3dGbGFnXCIgZGF0YS1uZy1zcmM9XCJ7e21vZGVsLnNlbGVjdGVkTGFuZy5mbGFnSW1nfX1cIiBhbHQ9XCJ7e21vZGVsLnNlbGVjdGVkTGFuZy5mbGFnVGl0bGV9fVwiPiB7e21vZGVsLnNlbGVjdGVkTGFuZy5uYW1lfX08L2E+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicGxzLWxhbmd1YWdlLWNvbnRhaW5lci1zY3JvbGxhYmxlXCIgZGF0YS1uZy1zaG93PVwibW9kZWwub3BlbmVkXCIgZGF0YS1uZy1tb3VzZWVudGVyPVwib25Nb3VzZUVudGVyT3JMZWF2ZSh0cnVlKVwiIGRhdGEtbmctbW91c2VsZWF2ZT1cIm9uTW91c2VFbnRlck9yTGVhdmUoZmFsc2UpXCI+JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5vcGVuTW9kZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSAnPGEgY2xhc3M9XCJwbHMtc2VsZWN0ZWQtbG9jYWxlXCIgaHJlZj1cIiNcIiBkYXRhLW5nLWNsaWNrPVwib25DbGljaygkZXZlbnQpXCI+PGltZyBkYXRhLW5nLWlmPVwibW9kZWwuc2hvd0ZsYWdcIiBkYXRhLW5nLXNyYz1cInt7bW9kZWwuc2VsZWN0ZWRMYW5nLmZsYWdJbWd9fVwiIGFsdD1cInt7bW9kZWwuc2VsZWN0ZWRMYW5nLmZsYWdUaXRsZX19XCI+IHt7bW9kZWwuc2VsZWN0ZWRMYW5nLm5hbWV9fTwvYT4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJwbHMtbGFuZ3VhZ2UtY29udGFpbmVyLXNjcm9sbGFibGVcIiBkYXRhLW5nLXNob3c9XCJtb2RlbC5vcGVuZWRcIj4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSArPSAnPHRhYmxlIGNsYXNzPVwicGxzLWxhbmd1YWdlLWNvbnRhaW5lclwiPjx0Ym9keT48dHI+JyArXG4gICAgICAgICAgICAgICAgJzx0ZCBkYXRhLW5nLXJlcGVhdD1cImNvbHVtbiBpbiBtb2RlbC5jb2x1bW5zXCI+PHVsPicgK1xuICAgICAgICAgICAgICAgICc8bGkgZGF0YS1uZy1yZXBlYXQ9XCJpdGVtIGluIGNvbHVtblwiPicgK1xuICAgICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiIHRpdGxlPVwie3tpdGVtLnRpdGxlfX1cIiBkYXRhLW5nLWNsaWNrPVwib25MYW5ndWFnZUNoYW5nZWQoJGV2ZW50LCBpdGVtKVwiIGRhdGEtbmctY2xhc3M9XCJpdGVtLnNlbGVjdGVkPyBcXCdwbHMtc2VsZWN0ZWQtbG9jYWxlXFwnOlxcJ1xcJ1wiPjxpbWcgZGF0YS1uZy1pZj1cIm1vZGVsLnNob3dGbGFnXCIgZGF0YS1uZy1zcmM9XCJ7e2l0ZW0uZmxhZ0ltZ319XCIgYWx0PVwie3tpdGVtLmZsYWdUaXRsZX19XCI+IHt7aXRlbS5uYW1lfX08L2E+JyArXG4gICAgICAgICAgICAgICAgJzwvbGk+JyArXG4gICAgICAgICAgICAgICAgJzwvdWw+PC90ZD4nICtcbiAgICAgICAgICAgICAgICAnPC90cj48L3Rib2R5PjwvdGFibGU+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnZGlyZWN0aXZlcy5jb25maXJtUGFzc3dvcmQnLCBbXSkuXG4gICAgZGlyZWN0aXZlKCdjb25maXJtUGFzc3dvcmQnLCBbZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgc2NvcGU6IHRydWUsXG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gc2NvcGUuJGV2YWwoYXR0cmlidXRlcy5uZ01vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1lZFBhc3N3b3JkID0gc2NvcGUuJGV2YWwoYXR0cmlidXRlcy5jb25maXJtUGFzc3dvcmQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKFwiXCIgPT09IHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoXCJcIiA9PT0gY29uZmlybWVkUGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1lZFBhc3N3b3JkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXNzd29yZCA9PSBjb25maXJtZWRQYXNzd29yZDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChjaGVja2VyLCBmdW5jdGlvbiAoaXNDb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZE1pc21hdGNoXCIsIGlzQ29uZmlybWVkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdkaXJlY3RpdmVzLnBhc3N3b3JkU3RyZW5ndGgnLCBbXSkuXG4gICAgZGlyZWN0aXZlKCdwYXNzd29yZFN0cmVuZ3RoJywgW2Z1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBjb250cm9sKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZVN0cmVuZ3RoOiBmdW5jdGlvbihwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVuZ3RoID0gLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoL1thLXpdKy8udGVzdChwYXNzd29yZCkpIHsgLy8gbG93ZXItY2FzZSBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKC9bQS1aXSsvLnRlc3QocGFzc3dvcmQpKSB7IC8vIHVwcGVyLWNhc2UgbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigvWzAtOV0rLy50ZXN0KHBhc3N3b3JkKSkgeyAvLyBudW1iZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKC9bXmEtekEtWlxcZF0vLnRlc3QocGFzc3dvcmQpKSB7IC8vIG5vbiBhbHBoYS1udW1lcmljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhc3N3b3JkLmxlbmd0aCA8IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RyZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocGFzc3dvcmQubGVuZ3RoID4gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLnN0cmVuZ3RoU3R5bGUgPSBmdW5jdGlvbihsZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICBpZihsZXZlbCA8PSBzY29wZS5wYXNzd29yZFN0cmVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJlbmd0aF9cIiArIHNjb3BlLnBhc3N3b3JkU3RyZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cmlidXRlcy5uZ01vZGVsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzd29yZCA9IHNjb3BlLiRldmFsKGF0dHJpYnV0ZXMubmdNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBhc3N3b3JkICYmIHBhc3N3b3JkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wYXNzd29yZFN0cmVuZ3RoID0gY2hlY2tlci5tZWFzdXJlU3RyZW5ndGgocGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe1wiZGlzcGxheVwiOiBcImlubGluZVwifSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLiRzZXRWYWxpZGl0eShcInBhc3N3b3JkVG9vV2Vla1wiLCBzY29wZS5wYXNzd29yZFN0cmVuZ3RoID49IDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucGFzc3dvcmRTdHJlbmd0aCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moe1wiZGlzcGxheVwiOiBcIm5vbmVcIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZFRvb1dlZWtcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx1bCBpZD1cInN0cmVuZ3RoXCI+PGxpIG5nLWNsYXNzPVwic3RyZW5ndGhTdHlsZSgwKVwiPjwvbGk+PGxpIG5nLWNsYXNzPVwic3RyZW5ndGhTdHlsZSgxKVwiPjwvbGk+PGxpIG5nLWNsYXNzPVwic3RyZW5ndGhTdHlsZSgyKVwiPjwvbGk+PGxpIG5nLWNsYXNzPVwic3RyZW5ndGhTdHlsZSgzKVwiPjwvbGk+PGxpIG5nLWNsYXNzPVwic3RyZW5ndGhTdHlsZSg0KVwiPjwvbGk+PC91bD4nXG4gICAgICAgIH07XG4gICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2F1dGgnLCBbXSkuXG4gICAgc2VydmljZSgnVG9rZW5TZXJ2aWNlJywgWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICAgICAgICBmdW5jdGlvbiB1cmxCYXNlNjREZWNvZGUoc3RyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gc3RyLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG91dHB1dC5sZW5ndGggJSA0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSAnPT0nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSAnPSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdJbGxlZ2FsIGJhc2U2NHVybCBzdHJpbmchJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuYXRvYihvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VG9rZW5DbGFpbXModG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBjbGFpbXMgPSB7fTtcblxuICAgICAgICAgICAgaWYodG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgY2xhaW1zID0gSlNPTi5wYXJzZSh1cmxCYXNlNjREZWNvZGUoZW5jb2RlZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsYWltcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVG9rZW5WYWxpZCgpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UudG9rZW4gIT0gbnVsbCAmJiAkcm9vdFNjb3BlLnRva2VuQ2xhaW1zICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSA8PSAoJHJvb3RTY29wZS50b2tlbkNsYWltcy5leHApICogMTAwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xuICAgICAgICAgICAgaWYodG9rZW4pIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRva2VuQ2xhaW1zID0gZ2V0VG9rZW5DbGFpbXModG9rZW4pO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBpZihpc1Rva2VuVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZS50b2tlbjtcbiAgICAgICAgICAgIGRlbGV0ZSAkcm9vdFNjb3BlLnRva2VuQ2xhaW1zO1xuICAgICAgICAgICAgZGVsZXRlICRyb290U2NvcGUudG9rZW47XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzVG9rZW5WYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS50b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4obnVsbCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhc1Blcm1pc3Npb24gPSBmdW5jdGlvbihyZXNvdXJjZSkge1xuICAgICAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5uZWVkc1JlZnJlc2ggPSBmdW5jdGlvbihhZ2UpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UudG9rZW4gIT0gbnVsbCAmJiAkcm9vdFNjb3BlLnRva2VuQ2xhaW1zICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSA+PSAkcm9vdFNjb3BlLnRva2VuQ2xhaW1zLmlhdCAqIDEwMDAgKyBhZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XSkuXG4gICAgc2VydmljZSgnQXV0aFNlcnZpY2UnLCBbJyRodHRwJywgJ3VybHMnLCBmdW5jdGlvbiAoJGh0dHAsIHVybHMpIHtcbiAgICAgICAgdGhpcy5zaWdudXAgPSBmdW5jdGlvbiAoZGF0YSwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgICRodHRwLnBvc3QodXJscy5CQVNFX0FQSSArICcvc2lnbnVwJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzKS5lcnJvcihlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2lnbmluID0gZnVuY3Rpb24gKGRhdGEsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KHVybHMuQkFTRV9BUEkgKyAnL3NpZ25pbicsIGRhdGEpLnN1Y2Nlc3Moc3VjY2VzcykuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlZnJlc2ggPSBmdW5jdGlvbihzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybHMuQkFTRV9BUEkgKyAnL3Rva2VuLXJlZnJlc2gnLCB7aWdub3JlTG9hZGluZ0JhcjogdHJ1ZX0pLnN1Y2Nlc3Moc3VjY2VzcykuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uIChzdWNjZXNzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKCk7IC8vIFRPRE86IGNhbGwgYSByZW1vdGUgc2VydmljZSB0byBjbGVhbiB1cCB0b2tlbnMgYW5kIHdoYXQgbm90XG4gICAgICAgIH07XG4gICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NlYXJjaCcsIFtdKS5cbiAgICBzZXJ2aWNlKCdTZWFyY2hTZXJ2aWNlJywgWyckaHR0cCcsICd1cmxzJywgZnVuY3Rpb24gKCRodHRwLCB1cmxzKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24oZGF0YSwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgICRodHRwLnBvc3QodXJscy5CQVNFX0FQSSArICcvc2VhcmNoJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzKS5lcnJvcihlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWR2YW5jZWRTZWFyY2ggPSBmdW5jdGlvbihkYXRhLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgJGh0dHAucG9zdCh1cmxzLkJBU0VfQVBJICsgJy9zZWFyY2gvYWR2YW5jZWQnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3MpLmVycm9yKGVycm9yKTtcbiAgICAgICAgfTtcbiAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgndmVoaWNsZXMnLCBbXSkuXG4gICAgZmFjdG9yeSgnVmVoaWNsZScsIFsnJHJlc291cmNlJywgJ3VybHMnLCBmdW5jdGlvbigkcmVzb3VyY2UsIHVybHMpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSh1cmxzLkJBU0VfQVBJICsgJy92ZWhpY2xlLzp2ZWhpY2xlSWQvOmFjdGlvbicsIHtcbiAgICAgICAgICAgIHZlaGljbGVJZDogXCJAdmVoaWNsZUlkXCIsXG4gICAgICAgICAgICBhY3Rpb246IFwiQGFjdGlvblwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHByZXZpZXc6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJwcmV2aWV3XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1dKS5cbiAgICBzZXJ2aWNlKCdWZWhpY2xlc1NlcnZpY2UnLCBbJyRodHRwJywgJ1ZlaGljbGUnLCBmdW5jdGlvbiAoJGh0dHAsIFZlaGljbGUpIHtcbiAgICAgICAgdGhpcy5nZXQgPSBmdW5jdGlvbih2ZWNoaWNsZUlkLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgdmFyIHZlaGljbGUgPSBWZWhpY2xlLmdldCh7dmVoaWNsZUlkOiB2ZWNoaWNsZUlkfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcyh2ZWhpY2xlKTtcbiAgICAgICAgICAgICAgICB9LCBlcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wcmV2aWV3ID0gZnVuY3Rpb24odmVjaGljbGVJZCwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciB2ZWhpY2xlID0gVmVoaWNsZS5wcmV2aWV3KHt2ZWhpY2xlSWQ6IHZlY2hpY2xlSWR9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKHZlaGljbGUpO1xuICAgICAgICAgICAgICAgIH0sIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50IHRoZSByZXN0XG4gICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2F1dGgnKS5cbiAgICBjb250cm9sbGVyKCdBdXRoQ29udHJvbGxlcicsXG4gICAgICAgICAgICBbJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRsb2NhdGlvbicsICckdHJhbnNsYXRlUGFydGlhbExvYWRlcicsICckaW50ZXJ2YWwnLCAnVG9rZW5TZXJ2aWNlJywgJ0F1dGhTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXIsICRpbnRlcnZhbCwgdG9rZW5TZXJ2aWNlLCBhdXRoU2VydmljZSkge1xuICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQXV0aChyZXMpIHtcbiAgICAgICAgICAgIGlmKCRyb290U2NvcGUucmV0dXJuVG8pIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgkcm9vdFNjb3BlLnJldHVyblRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NMb2dvdXQoKSB7XG4vLyAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBcIi9cIjtcbiAgICAgICAgICAgIHRva2VuU2VydmljZS5zZXRUb2tlbihudWxsKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hUb2tlbigpIHtcbiAgICAgICAgICAgIGlmICh0b2tlblNlcnZpY2UubmVlZHNSZWZyZXNoKDYwMDAwKSkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2VuU2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBhdXRoU2VydmljZS5yZWZyZXNoKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9rZW5TZXJ2aWNlLnNldFRva2VuKHJlcy50b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU2VydmljZS5zZXRUb2tlbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoISRyb290U2NvcGUudG9rZW5SZWZyZXNoUHJvbWlzZSkgeyAvLyBGSVhNRTogTG9va3MgbGlrZSBpdCdzIG5vdCBmaXJpbmcgd2hlbiB0aGUgYnJvd3NlciBpcyBtaW5pbWl6ZWQsIHRyeSBzZXRJbnRlcnZhbFxuICAgICAgICAgICAgJHJvb3RTY29wZS50b2tlblJlZnJlc2hQcm9taXNlID0gJGludGVydmFsKHJlZnJlc2hUb2tlbiwgMzAwMDApOyAvLyB2ZXJpZnkgdGhlIHRva2VuIGV2ZXJ5IDMwIHNlY29uZHNcbiAgICAgICAgfVxuXG4gICAgICAgICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyLmFkZFBhcnQoJ2F1dGgnKTtcblxuLypcbiAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKCRyb290U2NvcGUudG9rZW5SZWZyZXNoUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoJHJvb3RTY29wZS50b2tlblJlZnJlc2hQcm9taXNlKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgJHJvb3RTY29wZS50b2tlblJlZnJlc2hQcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiovXG5cbiAgICAgICAgJHNjb3BlLnNpZ25pbiA9IGZ1bmN0aW9uIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZihpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5zaWduaW5Gb3JtSW52YWxpZDtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiAkc2NvcGUuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAkc2NvcGUucGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2lnbmluKGZvcm1EYXRhLCBzdWNjZXNzQXV0aCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmVycm9yID0gJ0ludmFsaWQgY3JlZGVudGlhbHMuJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5zaWduaW5Gb3JtSW52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNpZ251cCA9IGZ1bmN0aW9uIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZihpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5zaWdudXBGb3JtSW52YWxpZDtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogJHNjb3BlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogJHNjb3BlLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZF9jb25maXJtYXRpb246ICRzY29wZS5wYXNzd29yZF9jb25maXJtYXRpb25cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2lnbnVwKGZvcm1EYXRhLCBzdWNjZXNzQXV0aCwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmVycm9yID0gcmVzLmVycm9yIHx8ICdGYWlsZWQgdG8gc2lnbiB1cC4nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpZ251cEZvcm1JbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KHN1Y2Nlc3NMb2dvdXQpO1xuICAgICAgICB9O1xuICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB2ZWhpY2xlcyA9IFtdO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NlYXJjaCcpLlxuICAgIGNvbnRyb2xsZXIoJ1NlYXJjaENvbnRyb2xsZXInLCBbJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRsb2NhdGlvbicsICckdHJhbnNsYXRlUGFydGlhbExvYWRlcicsICdTZWFyY2hTZXJ2aWNlJywgJ1Rva2VuU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyLCBzZWFyY2hTZXJ2aWNlLCB0b2tlblNlcnZpY2UpIHtcbiAgICAgICAgZnVuY3Rpb24gc2VhcmNoU3VjY2VzcyhyZXMpIHtcbiAgICAgICAgICAgIGlmKHJlcyAmJiByZXMudmVoaWNsZXMpIHsgLy8gVE9ETzogdmVyaWZ5IGlmIGl0J3MgYW4gYXJyYXlcbiAgICAgICAgICAgICAgICBzZXRWZWhpY2xlcyhyZXMudmVoaWNsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VmVoaWNsZXMoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VmVoaWNsZXMoJHZlaGljbGVzKSB7XG4gICAgICAgICAgICB2ZWhpY2xlcyA9ICR2ZWhpY2xlcztcbiAgICAgICAgICAgICRzY29wZS52ZWhpY2xlcyA9ICR2ZWhpY2xlcztcbiAgICAgICAgICAgIGlmKHZlaGljbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNQYW5lbEV4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNQYW5lbEV4cGFuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNlYXJjaEZhaWxlZCgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuZXJyb3IgPSAnU2VhcmNoIGZhaWxlZCc7XG4gICAgICAgICAgICBzZXRWZWhpY2xlcyhbXSk7XG4gICAgICAgIH1cblxuICAgICAgICAkdHJhbnNsYXRlUGFydGlhbExvYWRlci5hZGRQYXJ0KCdzZWFyY2gnKTtcblxuICAgICAgICAkc2NvcGUuc2VhcmNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXNBZHZhbmNlZFNlYXJjaCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJHNjb3BlLnR5cGUsXG4gICAgICAgICAgICAgICAgZmVhdHVyZTE6ICRzY29wZS5mZWF0dXJlMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlYXJjaFNlcnZpY2Uuc2VhcmNoKGZvcm1EYXRhLCBzZWFyY2hTdWNjZXNzLCBzZWFyY2hGYWlsZWQpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5hZHZhbmNlZFNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodG9rZW5TZXJ2aWNlLmdldFRva2VuKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuZXJyb3IgPSAnQWNjZXNzIGRlbmllZCc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQWR2YW5jZWRTZWFyY2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuaXNBZHZhbmNlZFNlYXJjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJHNjb3BlLnR5cGUsXG4gICAgICAgICAgICAgICAgZmVhdHVyZTE6ICRzY29wZS5mZWF0dXJlMSxcbiAgICAgICAgICAgICAgICBmZWF0dXJlMjogJHNjb3BlLmZlYXR1cmUyLFxuICAgICAgICAgICAgICAgIGZlYXR1cmUzOiAkc2NvcGUuZmVhdHVyZTNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlYXJjaFNlcnZpY2UuYWR2YW5jZWRTZWFyY2goZm9ybURhdGEsIHNlYXJjaFN1Y2Nlc3MsIHNlYXJjaEZhaWxlZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnZpZXdEZXRhaWxzID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL3ZlaGljbGUvXCIgKyBpZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKCR0YWIpIHtcbiAgICAgICAgICAgIGlmKCdhZHZhbmNlZCcgPT09ICR0YWIgJiYgdG9rZW5TZXJ2aWNlLmdldFRva2VuKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5pc0FkdmFuY2VkU2VhcmNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5pc0FkdmFuY2VkU2VhcmNoID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuaXNQYW5lbEV4cGFuZGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZXRWZWhpY2xlcyh2ZWhpY2xlcyk7XG4gICAgICAgICRzY29wZS5pc0FkdmFuY2VkU2VhcmNoID0gZmFsc2U7XG4gICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3ZlaGljbGVzJykuXG4gICAgY29udHJvbGxlcignVmVoaWNsZXNDb250cm9sbGVyJyxcbiAgICAgICAgICAgIFsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnVG9rZW5TZXJ2aWNlJywgJ1ZlaGljbGVzU2VydmljZScsICckcm91dGVQYXJhbXMnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgdG9rZW5TZXJ2aWNlLCB2ZWhpY2xlc1NlcnZpY2UsICRyb3V0ZVBhcmFtcykge1xuICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlcykge1xuICAgICAgICAgICAgJHNjb3BlLnZlaGljbGUgPSByZXMudmVoaWNsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVycm9yKHJlcykge1xuICAgICAgICAgICAgJHJvb3RTY29wZS5lcnJvciA9IHJlcy5kYXRhLmVycm9yOyAvLyBUT0RPOiBpbXByb3ZlIGVycm9yIGhhbmRsaW5nXG4gICAgICAgIH1cblxuICAgICAgICBpZigkcm91dGVQYXJhbXMgJiYgJHJvdXRlUGFyYW1zLmlkKSB7XG4gICAgICAgICAgICBpZih0b2tlblNlcnZpY2UuZ2V0VG9rZW4oKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmVoaWNsZXNTZXJ2aWNlLnByZXZpZXcoJHJvdXRlUGFyYW1zLmlkLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZWhpY2xlc1NlcnZpY2UuZ2V0KCRyb3V0ZVBhcmFtcy5pZCwgc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGFuZ3VsYXIubW9kdWxlKCd0cnV4QXBwJywgW1xuICAgICAgICAnbmdSb3V0ZScsICduZ1Jlc291cmNlJyxcbiAgICAgICAgJ2FuZ3VsYXItbG9hZGluZy1iYXInLFxuICAgICAgICAncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScsXG4gICAgICAgICdkaXJlY3RpdmVzLnBhc3N3b3JkU3RyZW5ndGgnLFxuICAgICAgICAnZGlyZWN0aXZlcy5jb25maXJtUGFzc3dvcmQnLFxuICAgICAgICAnYXV0aCcsXG4gICAgICAgICdzZWFyY2gnLFxuICAgICAgICAndmVoaWNsZXMnXG4gICAgXSkuXG4gICAgY29uc3RhbnQoJ3VybHMnLCB7XG4gICAgICAgIEJBU0U6ICcnLFxuICAgICAgICBCQVNFX0FQSTogJy9hcGkvdjEnXG4gICAgfSkuXG4gICAgY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsICckdHJhbnNsYXRlUHJvdmlkZXInLCAnJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJQcm92aWRlcicsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkdHJhbnNsYXRlUHJvdmlkZXIsICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIuXG4gICAgICAgICAgICB3aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9zZWFyY2gvc2VhcmNoLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZWFyY2hDb250cm9sbGVyJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvc2lnbmluJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hdXRoL3NpZ25pbi5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXV0aENvbnRyb2xsZXInXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9zaWdudXAnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2F1dGgvc2lnbnVwLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdXRoQ29udHJvbGxlcidcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL3ZlaGljbGUvOmlkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy92ZWhpY2xlcy9kZXRhaWxzLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWZWhpY2xlc0NvbnRyb2xsZXInXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9hY2NvdW50Jywge1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2FjY291bnQvYWNjb3VudC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXV0aENvbnRyb2xsZXInICAvLyBGSVhNRTogdXNlIHRoZSBhY2NvdW50IGNvbnRyb2xsZXJcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgb3RoZXJ3aXNlKHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKFsnJHEnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCAnVG9rZW5TZXJ2aWNlJywgZnVuY3Rpb24gKCRxLCAkbG9jYXRpb24sICRyb290U2NvcGUsIHRva2VuU2VydmljZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZXh0cmFjdFRva2VuKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gcmVzcG9uc2UuaGVhZGVycygnWC1KV1QtVG9rZW4nKTtcbiAgICAgICAgICAgICAgICBpZih0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblNlcnZpY2Uuc2V0VG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5TZXJ2aWNlLmdldFRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFRva2VuKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU2VydmljZS5zZXRUb2tlbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG8gPSAkbG9jYXRpb24ucGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9zaWduaW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RUb2tlbihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkYtVG9rZW4nO1xuICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnhzcmZDb29raWVOYW1lID0gJ2NzcmZUb2tlbic7XG5cbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgICAgICR0cmFuc2xhdGVQcm92aWRlclxuICAgICAgICAgICAgLnVzZUxvYWRlcignJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXInLCB7XG4gICAgICAgICAgICAgICAgdXJsVGVtcGxhdGU6ICcvbW9kdWxlcy97cGFydH0vbG9jYWxlL3tsYW5nfS5qc29uJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vLnRyYW5zbGF0aW9ucygnZGUnLCB7IC8qIC4uLiAqLyB9KVxuICAgICAgICAgICAgLy8udHJhbnNsYXRpb25zKCdydScsIHsgLyogLi4uICovIH0pXG4gICAgICAgICAgICAvLy50cmFuc2xhdGlvbnMoJ2x0JywgeyAvKiAuLi4gKi8gfSlcbiAgICAgICAgICAgIC8vLnRyYW5zbGF0aW9ucygnZW4nLCB7IC8qIC4uLiAqLyB9KVxuICAgICAgICAgICAgLnJlZ2lzdGVyQXZhaWxhYmxlTGFuZ3VhZ2VLZXlzKFsnZW4nLCAnZGUnLCAncnUnLCAnbHQnXSwge1xuICAgICAgICAgICAgICAgICdlbl9VUyc6ICdlbicsXG4gICAgICAgICAgICAgICAgJ2VuX1VLJzogJ2VuJyxcbiAgICAgICAgICAgICAgICAnZGVfREUnOiAnZGUnLFxuICAgICAgICAgICAgICAgICdkZV9DSCc6ICdkZScsXG4gICAgICAgICAgICAgICAgJ3J1X1JVJzogJ3J1JyxcbiAgICAgICAgICAgICAgICAnbHRfTFQnOiAnbHQnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhbGxiYWNrTGFuZ3VhZ2UoJ2VuJylcbiAgICAgICAgICAgIC5kZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSgpXG4gICAgICAgICAgICAudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCdlc2NhcGVkJylcbiAgICAgICAgICAgIC8qLnVzZUxvY2FsU3RvcmFnZSgpKi87XG5cbiAgICAgICAgICAgICR0cmFuc2xhdGVQYXJ0aWFsTG9hZGVyUHJvdmlkZXIuYWRkUGFydCgnYXV0aCcpO1xuICAgICAgICAgICAgJHRyYW5zbGF0ZVBhcnRpYWxMb2FkZXJQcm92aWRlci5hZGRQYXJ0KCdzZWFyY2gnKTtcbiAgICB9XSkuXG4gICAgY29udHJvbGxlcignVHJhbnNsYXRlQ29udHJvbGxlcicsIFsnJHRyYW5zbGF0ZScsICckc2NvcGUnLCBmdW5jdGlvbigkdHJhbnNsYXRlLCAkc2NvcGUpIHtcbiAgICAgICAgaWYobG9jYWxTdG9yYWdlLmxhbmdLZXkpIHtcbiAgICAgICAgICAgICR0cmFuc2xhdGUudXNlKGxvY2FsU3RvcmFnZS5sYW5nS2V5KTtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50TGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UubGFuZ0tleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50TGFuZ3VhZ2UgPSAkdHJhbnNsYXRlLnVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmxhbmd1YWdlcyA9IFtcbiAgICAgICAgICAgIHtpZDogJ2RlJywgbGFiZWw6IFwiRGV1dHNjaFwifSxcbiAgICAgICAgICAgIHtpZDogJ3J1JywgbGFiZWw6IFwi0KDRg9GB0YHQutC40LlcIn0sXG4gICAgICAgICAgICB7aWQ6ICdsdCcsIGxhYmVsOiBcIkxpZXR1dmnFs1wifSxcbiAgICAgICAgICAgIHtpZDogJ2VuJywgbGFiZWw6IFwiRW5nbGlzaFwifV07XG5cbiAgICAgICAgJHNjb3BlLmNoYW5nZUxhbmd1YWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UoJHNjb3BlLmN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UubGFuZ0tleSA9ICRzY29wZS5jdXJyZW50TGFuZ3VhZ2U7XG4gICAgICAgIH07XG4gICAgfV0pLlxuICAgIHJ1bihbJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyR0cmFuc2xhdGUnLCAnVG9rZW5TZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRsb2NhdGlvbiwgJHRyYW5zbGF0ZSwgdG9rZW5TZXJ2aWNlKSB7XG4gICAgICAgICRyb290U2NvcGUuJG9uKCBcIiRyb3V0ZUNoYW5nZVN0YXJ0XCIsIGZ1bmN0aW9uKGV2ZW50LCBuZXh0KSB7XG4gICAgICAgICAgICBkZWxldGUgJHJvb3RTY29wZS5lcnJvcjtcbiAgICAgICAgICAgIGlmICh0b2tlblNlcnZpY2UuZ2V0VG9rZW4oKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5yZXN0cmljdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG8gPSAkbG9jYXRpb24ucGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9zaWduaW5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoJHJvb3RTY29wZS5yZXR1cm5Ubykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgJHJvb3RTY29wZS5yZXR1cm5UbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckdHJhbnNsYXRlUGFydGlhbExvYWRlclN0cnVjdHVyZUNoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkdHJhbnNsYXRlLnJlZnJlc2goKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdG9rZW5TZXJ2aWNlLnNldFRva2VuKGxvY2FsU3RvcmFnZS50b2tlbik7XG4gICAgfV0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==